{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Drush is a command line shell and Unix scripting interface for Drupal. Drush core ships with lots of useful commands for interacting with code like modules/themes/profiles. Similarly, it runs update.php, executes SQL queries and DB migrations, and misc utilities like run cron or clear cache. Developers love the generate command , which jump starts your coding project by writing ready-to-customize PHP and YML files. Drush can be extended by 3rd party commandfiles . Resources \u00b6 Installing and Upgrading ( Drush 8 ) General Documentation ( Drush 8 ) Drush Commands API Documentation Drush packages available via Composer A list of modules that include Drush integration Drush comes with a full test suite powered by PHPUnit . Each commit gets tested by our CI bots. Support \u00b6 Post support requests to Drupal Answers . Tag question with 'drush'. Report bugs and request features in the GitHub Drush Issue Queue . Use pull requests (PRs) to contribute to Drush. Code of Conduct \u00b6 The Drush project expects all participants to abide by the Drupal Code of Conduct . FAQ \u00b6 What does Drush stand for? \u00b6 A: The Drupal Shell. How do I pronounce Drush? \u00b6 Some people pronounce the dru with a long 'u' like Dr u pal. Fidelity points go to them, but they are in the minority. Most pronounce Drush so that it rhymes with hush, rush, flush, etc. This is the preferred pronunciation. Does Drush have unit tests? \u00b6 Drush has an excellent suite of unit tests. See tests/README.md for more information. Credits \u00b6 Maintained by Moshe Weitzman with much help from the folks listed at https://github.com/orgs/drush-ops/people . Originally developed by Arto Bendiken for Drupal 4.7. Redesigned by Franz Heinzmann in May 2007 for Drupal 5. Thanks to JetBrains for supporting this project and open source software .","title":"Introduction"},{"location":"#resources","text":"Installing and Upgrading ( Drush 8 ) General Documentation ( Drush 8 ) Drush Commands API Documentation Drush packages available via Composer A list of modules that include Drush integration Drush comes with a full test suite powered by PHPUnit . Each commit gets tested by our CI bots.","title":"Resources"},{"location":"#support","text":"Post support requests to Drupal Answers . Tag question with 'drush'. Report bugs and request features in the GitHub Drush Issue Queue . Use pull requests (PRs) to contribute to Drush.","title":"Support"},{"location":"#code-of-conduct","text":"The Drush project expects all participants to abide by the Drupal Code of Conduct .","title":"Code of Conduct"},{"location":"#faq","text":"","title":"FAQ"},{"location":"#what-does-drush-stand-for","text":"A: The Drupal Shell.","title":"What does Drush stand for?"},{"location":"#how-do-i-pronounce-drush","text":"Some people pronounce the dru with a long 'u' like Dr u pal. Fidelity points go to them, but they are in the minority. Most pronounce Drush so that it rhymes with hush, rush, flush, etc. This is the preferred pronunciation.","title":"How do I pronounce Drush?"},{"location":"#does-drush-have-unit-tests","text":"Drush has an excellent suite of unit tests. See tests/README.md for more information.","title":"Does Drush have unit tests?"},{"location":"#credits","text":"Maintained by Moshe Weitzman with much help from the folks listed at https://github.com/orgs/drush-ops/people . Originally developed by Arto Bendiken for Drupal 4.7. Redesigned by Franz Heinzmann in May 2007 for Drupal 5. Thanks to JetBrains for supporting this project and open source software .","title":"Credits"},{"location":"bootstrap/","text":"The Drush Bootstrap Process \u00b6 When preparing to run a command, Drush works by bootstrapping the Drupal environment in very much the same way that is done during a normal page request from the web server, so most Drush commands run in the context of a fully-initialized website. For efficiency and convenience, some Drush commands can work without first bootstrapping a Drupal site, or by only partially bootstrapping a site. This is faster than a full bootstrap. It is also a matter of convenience, because some commands are useful even when you don't have a working Drupal site. Commands may specify their bootstrap level with a @bootstrap annotation. Commands supplied by Drupal modules are always @bootstrap full . Prior to bootstrapping, Drush goes through the preflight process, where the following things occur: Preflight Commandline arguments are parsed. Configuration files are read. The site-alias included on the commandline is loaded if present. The local selected site is determined, if any. Dependency injection is done. Global commandfiles are loaded. Commandfiles with a drush.services.yml are loaded later, during bootstrap @full . The command is dispatched via the Symfony Console component. Bootstrapping is done from a Symfony Console command hook. The different bootstrap levels are discribed below. @bootstrap none \u00b6 Only run Drush preflight , without considering Drupal at all. Any code that operates on the Drush installation, and not specifically any Drupal directory, should bootstrap to this phase. @bootstrap root \u00b6 Set up and test for a valid Drupal root, either through the --root options, or evaluated based on the current working directory. Any code that interacts with an entire Drupal installation, and not a specific site on the Drupal installation should use this bootstrap phase. @bootstrap site \u00b6 Set up a Drupal site directory and the correct environment variables to allow Drupal to find the configuration file. If no site is specified with the --uri options, Drush will assume the site is 'default', which mimics Drupal's behaviour. Note that it is necessary to specify a full URI, e.g. --uri= http://example.com , in order for certain Drush commands and Drupal modules to behave correctly. See the example Config file for more information. Any code that needs to modify or interact with a specific Drupal site's settings.php file should bootstrap to this phase. @bootstrap configuration \u00b6 Load the settings from the Drupal sites directory. This phase is analogous to the DRUPAL_BOOTSTRAP_CONFIGURATION bootstrap phase in Drupal itself, and this is also the first step where Drupal specific code is included. This phase is commonly used for code that interacts with the Drupal install API, as both install.php and update.php start at this phase. @bootstrap database \u00b6 Connect to the Drupal database using the database credentials loaded during the previous bootstrap phase. This phase is analogous to the DRUPAL_BOOTSTRAP_DATABASE bootstrap phase in Drupal. Any code that needs to interact with the Drupal database API needs to be bootstrapped to at least this phase. @bootstrap full \u00b6 Fully initialize Drupal. This is analogous to the DRUPAL_BOOTSTRAP_FULL bootstrap phase in Drupal. Any code that interacts with the general Drupal API should be bootstrapped to this phase. @bootstrap max \u00b6 This is not an actual bootstrap phase. Commands that use the \"max\" bootstrap level will cause Drush to bootstrap as far as possible, and then run the command regardless of the bootstrap phase that was reached. This is useful for Drush commands that work without a bootstrapped site, but that provide additional information or capabilities in the presence of a bootstrapped site. For example, drush status will show progressively more information the farther the site bootstraps.","title":"Bootstrap"},{"location":"bootstrap/#the-drush-bootstrap-process","text":"When preparing to run a command, Drush works by bootstrapping the Drupal environment in very much the same way that is done during a normal page request from the web server, so most Drush commands run in the context of a fully-initialized website. For efficiency and convenience, some Drush commands can work without first bootstrapping a Drupal site, or by only partially bootstrapping a site. This is faster than a full bootstrap. It is also a matter of convenience, because some commands are useful even when you don't have a working Drupal site. Commands may specify their bootstrap level with a @bootstrap annotation. Commands supplied by Drupal modules are always @bootstrap full . Prior to bootstrapping, Drush goes through the preflight process, where the following things occur: Preflight Commandline arguments are parsed. Configuration files are read. The site-alias included on the commandline is loaded if present. The local selected site is determined, if any. Dependency injection is done. Global commandfiles are loaded. Commandfiles with a drush.services.yml are loaded later, during bootstrap @full . The command is dispatched via the Symfony Console component. Bootstrapping is done from a Symfony Console command hook. The different bootstrap levels are discribed below.","title":"The Drush Bootstrap Process"},{"location":"bootstrap/#bootstrap-none","text":"Only run Drush preflight , without considering Drupal at all. Any code that operates on the Drush installation, and not specifically any Drupal directory, should bootstrap to this phase.","title":"@bootstrap none"},{"location":"bootstrap/#bootstrap-root","text":"Set up and test for a valid Drupal root, either through the --root options, or evaluated based on the current working directory. Any code that interacts with an entire Drupal installation, and not a specific site on the Drupal installation should use this bootstrap phase.","title":"@bootstrap root"},{"location":"bootstrap/#bootstrap-site","text":"Set up a Drupal site directory and the correct environment variables to allow Drupal to find the configuration file. If no site is specified with the --uri options, Drush will assume the site is 'default', which mimics Drupal's behaviour. Note that it is necessary to specify a full URI, e.g. --uri= http://example.com , in order for certain Drush commands and Drupal modules to behave correctly. See the example Config file for more information. Any code that needs to modify or interact with a specific Drupal site's settings.php file should bootstrap to this phase.","title":"@bootstrap site"},{"location":"bootstrap/#bootstrap-configuration","text":"Load the settings from the Drupal sites directory. This phase is analogous to the DRUPAL_BOOTSTRAP_CONFIGURATION bootstrap phase in Drupal itself, and this is also the first step where Drupal specific code is included. This phase is commonly used for code that interacts with the Drupal install API, as both install.php and update.php start at this phase.","title":"@bootstrap configuration"},{"location":"bootstrap/#bootstrap-database","text":"Connect to the Drupal database using the database credentials loaded during the previous bootstrap phase. This phase is analogous to the DRUPAL_BOOTSTRAP_DATABASE bootstrap phase in Drupal. Any code that needs to interact with the Drupal database API needs to be bootstrapped to at least this phase.","title":"@bootstrap database"},{"location":"bootstrap/#bootstrap-full","text":"Fully initialize Drupal. This is analogous to the DRUPAL_BOOTSTRAP_FULL bootstrap phase in Drupal. Any code that interacts with the general Drupal API should be bootstrapped to this phase.","title":"@bootstrap full"},{"location":"bootstrap/#bootstrap-max","text":"This is not an actual bootstrap phase. Commands that use the \"max\" bootstrap level will cause Drush to bootstrap as far as possible, and then run the command regardless of the bootstrap phase that was reached. This is useful for Drush commands that work without a bootstrapped site, but that provide additional information or capabilities in the presence of a bootstrapped site. For example, drush status will show progressively more information the farther the site bootstraps.","title":"@bootstrap max"},{"location":"commands/","text":"Creating Custom Drush Commands \u00b6 Creating a new Drush command or porting a legacy command is easy. Follow the steps below. Run drush generate drush-command-file . Drush will prompt for the machine name of the module that should \"own\" the file. (optional) Drush will also prompt for the path to a legacy command file to port. See tips on porting command to Drush 9 The module selected must already exist and be enabled. Use drush generate module-standard to create a new module. Drush will then report that it created a commandfile, a drush.services.yml file and a composer.json file. Edit those files as needed. Use the classes for the core Drush commands at /src/Drupal/Commands as inspiration and documentation. See the dependency injection docs for interfaces you can implement to gain access to Drush config, Drupal site aliases, etc. Write PHPUnit tests based on Drush Test Traits . Once your two files are ready, run drush cr to get your command recognized by the Drupal container. Specifying the Services File \u00b6 A module's composer.json file stipulates the filename where the Drush services (e.g. the Drush command files) are defined. The default services file is drush.services.yml , which is defined in the extra section of the composer.json file as follows: \"extra\" : { \"drush\" : { \"services\" : { \"drush.services.yml\" : \"^9\" } } } If for some reason you need to load different services for different versions of Drush, simply define multiple services files in the services section. The first one found will be used. For example: \"extra\" : { \"drush\" : { \"services\" : { \"drush-9-99.services.yml\" : \"^9.99\" , \"drush.services.yml\" : \"^9\" } } } In this example, the file drush-9-99.services.yml loads commandfile classes that require features only available in Drush 9.99 and later, and drush.services.yml loads an older commandfile implementation for earlier versions of Drush. It is also possible to use version ranges to exactly specify which version of Drush the services file should be used with (e.g. \"drush.services.yml\": \">=9 <9.99\" ). In Drush 9, the default services file, drush.services.yml , will be used in instances where there is no services section in the Drush extras of the project's composer.json file. In Drush 10, however, the services section must exist, and must name the services file to be used. If a future Drush extension is written such that it only works with Drush 10 and later, then its entry would read \"drush.services.yml\": \"^10\" , and Drush 9 would not load the extension's commands. It is all the same recommended that Drush 9 extensions explicitly declare their services file with an appropriate version constraint. Altering Drush Command Info \u00b6 Drush command info (annotations) can be altered from other modules. This is done by creating and registering 'command info alterers'. Alterers are class services that are able to intercept and manipulate an existing command annotation. In order to alter an existing command info, follow the steps below: In the module that wants to alter a command info, add a service class that implements the \\Consolidation\\AnnotatedCommand\\CommandInfoAltererInterface . In the module drush.services.yml declare a service pointing to this class and tag the service with the drush.command_info_alterer tag. In that class, implement the alteration logic in the alterCommandInfo() method. Along with the alter code, it's strongly recommended to log a debug message explaining what exactly was altered. This makes things easier on others who may need to debug the interaction of the alter code with other modules. Also it's a good practice to inject the the logger in the class constructor. For an example, see the alterer class provided by the testing 'woot' module: tests/functional/resources/modules/d8/woot/src/WootCommandInfoAlterer.php . Site-Wide Drush Commands \u00b6 Commandfiles that are installed in a Drupal site and are not bundled inside a Drupal module are called 'site-wide' commandfiles. Site-wide commands may either be added directly to the Drupal site's repository (e.g. for site-specific policy files), or via composer require . See the examples/Commands folder for examples. In general, it's better to use modules to carry your Drush commands, as module-based commands may participate in Drupal's dependency injection via the drush.services.yml . If you still prefer using site-wide commandfiles, here are some examples of valid commandfile names and namespaces: Simple Filename: $PROJECT_ROOT/drush/Commands/ExampleCommands.php Namespace: Drush\\Commands Nested in a subdirectory committed to the site's repository Filename: $PROJECT_ROOT/drush/Commands/example/ExampleCommands.php Namespace: Drush\\Commands\\example Nested in a subdirectory installed via a Composer package Filename: $PROJECT_ROOT/drush/Commands/contrib/dev_modules/ExampleCommands.php Namespace: Drush\\Commands\\dev_modules Note: Make sure you do not include src in the path to your command. Your command may not be discovered and have additional problems. Installing commands as part of a Composer project requires that the project's type be drupal-drush , and that the installer-paths in the Drupal site's composer.json file contains \"drush/Commands/contrib/{$name}\": [\"type:drupal-drush\"] . It is also possible to commit projects with a similar layout using a directory named custom in place of contrib ; if this is done, then the directory custom will not be considered to be part of the commandfile's namespace. If a site-wide commandfile is added via a Composer package, then it may declare any dependencies that it may need in its composer.json file. Site-wide commandfiles that are committed directly to a site's repository only have access to the dependencies already available in the site. Site-wide commandfiles should declare their Drush version compatibility via a conflict directive. For example, a Composer-managed site-wide command that works with both Drush 8 and Drush 9 might contain something similar to the following in its composer.json file: \"conflict\" : { \"drush/drush\" : \"<8.2 || >=9.0 <9.6 || >=10.0\" , } Using require in place of conflict is not recommended. A site-wide commandfile should have tests that run with each (major) version of Drush that is supported. You may model your test suite after the example drush extension project, which works on Drush ^8.2 and ^9.6. Global Drush Commands \u00b6 Commandfiles that are not part of any Drupal site are called 'global' commandfiles. Global commandfiles are not supported by default; in order to enable them, you must configure your drush.yml configuration file to add an include search location. For example: drush : paths : include : - '${env.home}/.drush/commands' With this configuration in place, global commands may be placed as described in the Site-Wide Drush Commands section above. Global commandfiles may not declare any dependencies of their own; they may only use those dependencies already available via the autoloader. Tip The filename must be have a name like Commands/ExampleCommands.php The prefix Example can be whatever string you want. The file must end in Commands.php The directory above Commands must be one of: A Folder listed in the 'include' option. Include may be provided via config or via CLI. ../drush, /drush or /sites/all/drush. These paths are relative to Drupal root. It is recommended that you avoid global Drush commands, and favor site-wide commandfiles instead. If you really need a command or commands that are not part of any Drupal site, consider making a stand-alone script or custom .phar instead. See ahoy , Robo and g1a/starter as potential starting points. Symlinked packages While it is good practice to make your custom commands into a Composer package, please beware that symlinked packages (by using the composer repository type Path ) will not be discovered by Drush. When in development, it is recommended to specify your package's path in your drush.yml to have quick access to your commands.","title":"Command Authoring"},{"location":"commands/#creating-custom-drush-commands","text":"Creating a new Drush command or porting a legacy command is easy. Follow the steps below. Run drush generate drush-command-file . Drush will prompt for the machine name of the module that should \"own\" the file. (optional) Drush will also prompt for the path to a legacy command file to port. See tips on porting command to Drush 9 The module selected must already exist and be enabled. Use drush generate module-standard to create a new module. Drush will then report that it created a commandfile, a drush.services.yml file and a composer.json file. Edit those files as needed. Use the classes for the core Drush commands at /src/Drupal/Commands as inspiration and documentation. See the dependency injection docs for interfaces you can implement to gain access to Drush config, Drupal site aliases, etc. Write PHPUnit tests based on Drush Test Traits . Once your two files are ready, run drush cr to get your command recognized by the Drupal container.","title":"Creating Custom Drush Commands"},{"location":"commands/#specifying-the-services-file","text":"A module's composer.json file stipulates the filename where the Drush services (e.g. the Drush command files) are defined. The default services file is drush.services.yml , which is defined in the extra section of the composer.json file as follows: \"extra\" : { \"drush\" : { \"services\" : { \"drush.services.yml\" : \"^9\" } } } If for some reason you need to load different services for different versions of Drush, simply define multiple services files in the services section. The first one found will be used. For example: \"extra\" : { \"drush\" : { \"services\" : { \"drush-9-99.services.yml\" : \"^9.99\" , \"drush.services.yml\" : \"^9\" } } } In this example, the file drush-9-99.services.yml loads commandfile classes that require features only available in Drush 9.99 and later, and drush.services.yml loads an older commandfile implementation for earlier versions of Drush. It is also possible to use version ranges to exactly specify which version of Drush the services file should be used with (e.g. \"drush.services.yml\": \">=9 <9.99\" ). In Drush 9, the default services file, drush.services.yml , will be used in instances where there is no services section in the Drush extras of the project's composer.json file. In Drush 10, however, the services section must exist, and must name the services file to be used. If a future Drush extension is written such that it only works with Drush 10 and later, then its entry would read \"drush.services.yml\": \"^10\" , and Drush 9 would not load the extension's commands. It is all the same recommended that Drush 9 extensions explicitly declare their services file with an appropriate version constraint.","title":"Specifying the Services File"},{"location":"commands/#altering-drush-command-info","text":"Drush command info (annotations) can be altered from other modules. This is done by creating and registering 'command info alterers'. Alterers are class services that are able to intercept and manipulate an existing command annotation. In order to alter an existing command info, follow the steps below: In the module that wants to alter a command info, add a service class that implements the \\Consolidation\\AnnotatedCommand\\CommandInfoAltererInterface . In the module drush.services.yml declare a service pointing to this class and tag the service with the drush.command_info_alterer tag. In that class, implement the alteration logic in the alterCommandInfo() method. Along with the alter code, it's strongly recommended to log a debug message explaining what exactly was altered. This makes things easier on others who may need to debug the interaction of the alter code with other modules. Also it's a good practice to inject the the logger in the class constructor. For an example, see the alterer class provided by the testing 'woot' module: tests/functional/resources/modules/d8/woot/src/WootCommandInfoAlterer.php .","title":"Altering Drush Command Info"},{"location":"commands/#site-wide-drush-commands","text":"Commandfiles that are installed in a Drupal site and are not bundled inside a Drupal module are called 'site-wide' commandfiles. Site-wide commands may either be added directly to the Drupal site's repository (e.g. for site-specific policy files), or via composer require . See the examples/Commands folder for examples. In general, it's better to use modules to carry your Drush commands, as module-based commands may participate in Drupal's dependency injection via the drush.services.yml . If you still prefer using site-wide commandfiles, here are some examples of valid commandfile names and namespaces: Simple Filename: $PROJECT_ROOT/drush/Commands/ExampleCommands.php Namespace: Drush\\Commands Nested in a subdirectory committed to the site's repository Filename: $PROJECT_ROOT/drush/Commands/example/ExampleCommands.php Namespace: Drush\\Commands\\example Nested in a subdirectory installed via a Composer package Filename: $PROJECT_ROOT/drush/Commands/contrib/dev_modules/ExampleCommands.php Namespace: Drush\\Commands\\dev_modules Note: Make sure you do not include src in the path to your command. Your command may not be discovered and have additional problems. Installing commands as part of a Composer project requires that the project's type be drupal-drush , and that the installer-paths in the Drupal site's composer.json file contains \"drush/Commands/contrib/{$name}\": [\"type:drupal-drush\"] . It is also possible to commit projects with a similar layout using a directory named custom in place of contrib ; if this is done, then the directory custom will not be considered to be part of the commandfile's namespace. If a site-wide commandfile is added via a Composer package, then it may declare any dependencies that it may need in its composer.json file. Site-wide commandfiles that are committed directly to a site's repository only have access to the dependencies already available in the site. Site-wide commandfiles should declare their Drush version compatibility via a conflict directive. For example, a Composer-managed site-wide command that works with both Drush 8 and Drush 9 might contain something similar to the following in its composer.json file: \"conflict\" : { \"drush/drush\" : \"<8.2 || >=9.0 <9.6 || >=10.0\" , } Using require in place of conflict is not recommended. A site-wide commandfile should have tests that run with each (major) version of Drush that is supported. You may model your test suite after the example drush extension project, which works on Drush ^8.2 and ^9.6.","title":"Site-Wide Drush Commands"},{"location":"commands/#global-drush-commands","text":"Commandfiles that are not part of any Drupal site are called 'global' commandfiles. Global commandfiles are not supported by default; in order to enable them, you must configure your drush.yml configuration file to add an include search location. For example: drush : paths : include : - '${env.home}/.drush/commands' With this configuration in place, global commands may be placed as described in the Site-Wide Drush Commands section above. Global commandfiles may not declare any dependencies of their own; they may only use those dependencies already available via the autoloader. Tip The filename must be have a name like Commands/ExampleCommands.php The prefix Example can be whatever string you want. The file must end in Commands.php The directory above Commands must be one of: A Folder listed in the 'include' option. Include may be provided via config or via CLI. ../drush, /drush or /sites/all/drush. These paths are relative to Drupal root. It is recommended that you avoid global Drush commands, and favor site-wide commandfiles instead. If you really need a command or commands that are not part of any Drupal site, consider making a stand-alone script or custom .phar instead. See ahoy , Robo and g1a/starter as potential starting points. Symlinked packages While it is good practice to make your custom commands into a Composer package, please beware that symlinked packages (by using the composer repository type Path ) will not be discovered by Drush. When in development, it is recommended to specify your package's path in your drush.yml to have quick access to your commands.","title":"Global Drush Commands"},{"location":"config-exporting/","text":"Exporting and Importing Configuration \u00b6 Drush provides commands to export , pull , and import Drupal configuration files. Simple - value changes \u00b6 It is not necessary to alter configuration values to make simple value changes to configuration variables, as this may be done by the configuration override system . The configuration override system allows you to change configuration values for a given instance of a site (e.g. the development server) by setting configuration variables in the site's settings.php file. For example, to change the name of a local development site: $config [ 'system.site' ][ 'name' ] = 'Local Install of Awesome Widgets, Inc.' ; Note that the configuration override system is a Drupal feature, not a Drush feature. It should be the preferred method for changing configuration values on a per-environment basis; however, it does not work for some things, such as enabling and disabling modules. Advanced - variation by environment \u00b6 As of Drupal 8.8, Drupal supports excluding development modules from enabling on higher environments . See Config Split module for more advanced needs.","title":"Drupal configuration"},{"location":"config-exporting/#exporting-and-importing-configuration","text":"Drush provides commands to export , pull , and import Drupal configuration files.","title":"Exporting and Importing Configuration"},{"location":"config-exporting/#simple-value-changes","text":"It is not necessary to alter configuration values to make simple value changes to configuration variables, as this may be done by the configuration override system . The configuration override system allows you to change configuration values for a given instance of a site (e.g. the development server) by setting configuration variables in the site's settings.php file. For example, to change the name of a local development site: $config [ 'system.site' ][ 'name' ] = 'Local Install of Awesome Widgets, Inc.' ; Note that the configuration override system is a Drupal feature, not a Drush feature. It should be the preferred method for changing configuration values on a per-environment basis; however, it does not work for some things, such as enabling and disabling modules.","title":"Simple - value changes"},{"location":"config-exporting/#advanced-variation-by-environment","text":"As of Drupal 8.8, Drupal supports excluding development modules from enabling on higher environments . See Config Split module for more advanced needs.","title":"Advanced - variation by environment"},{"location":"cron/","text":"Running Drupal cron tasks from Drush \u00b6 Drupal cron tasks are often set up to be run via a wget call to cron.php; this same task can also be accomplished via the cron command , which circumvents the need to provide a web server interface to cron. Quick start \u00b6 If you just want to get started quickly, here is a crontab entry that will run cron once every hour at ten minutes after the hour: 10 * * * * cd [DOCROOT] && /usr/bin/env PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin COLUMNS=72 ../vendor/bin/drush --uri=your.drupalsite.org --quiet cron You should set up crontab to run your cron tasks as the same user that runs the web server; for example, if you run your web server as the user www-data: sudo crontab -u www-data -e You might need to edit the crontab entry shown above slightly for your particular setup; for example, if you have installed Drush to some directory other than /usr/local/drush, then you will need to adjust the path to drush appropriately. We'll break down the meaning of each section of the crontab entry in the documentation that continues below. Setting the schedule \u00b6 See man 5 crontab for information on how to format the information in a crontab entry. In the example above, the schedule for the crontab is set by the string 10 * * * * . These fields are the minute, hour, day of month, month and day of week; * means essentially 'all values', so 10 * * * * will run any time the minute == 10 (once every hour). Setting the PATH \u00b6 We use /usr/bin/env to run Drush so that we can set up some necessary environment variables that Drush needs to execute. By default, cron will run each command with an empty PATH, which would not work well with Drush. To find out what your PATH needs to be, just type: echo $PATH Take the value that is output and place it into your crontab entry in the place of the one shown above. You can remove any entry that is known to not be of interest to Drush (e.g. /usr/games), or is only useful in a graphic environment (e.g. /usr/X11/bin). Setting COLUMNS \u00b6 When running Drush in a terminal, the number of columns will be automatically determined by Drush by way of the tput command, which queries the active terminal to determine what the width of the screen is. When running Drush from cron, there will not be any terminal set, and the call to tput will produce an error message. Spurious error messages are undesirable, as cron is often configured to send email whenever any output is produced, so it is important to make an effort to insure that successful runs of cron complete with no output. In some cases, Drush is smart enough to recognize that there is no terminal -- if the terminal value is empty or \"dumb\", for example. However, there are some \"non-terminal\" values that Drush does not recognize, such as \"unknown.\" If you manually set COLUMNS , then Drush will respect your setting and will not attempt to call tput. Using --quiet \u00b6 By default, Drush will print a success message when the run of cron is completed. The --quiet flag will suppress these and other progress messages, again avoiding an unnecessary email message. Specifying the Drupal site to run \u00b6 There are many ways to tell Drush which Drupal site to select for the active command, and any may be used here. The example uses cd [DOCROOT] , but you could also use the --root and --uri flags.","title":"Cron"},{"location":"cron/#running-drupal-cron-tasks-from-drush","text":"Drupal cron tasks are often set up to be run via a wget call to cron.php; this same task can also be accomplished via the cron command , which circumvents the need to provide a web server interface to cron.","title":"Running Drupal cron tasks from Drush"},{"location":"cron/#quick-start","text":"If you just want to get started quickly, here is a crontab entry that will run cron once every hour at ten minutes after the hour: 10 * * * * cd [DOCROOT] && /usr/bin/env PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin COLUMNS=72 ../vendor/bin/drush --uri=your.drupalsite.org --quiet cron You should set up crontab to run your cron tasks as the same user that runs the web server; for example, if you run your web server as the user www-data: sudo crontab -u www-data -e You might need to edit the crontab entry shown above slightly for your particular setup; for example, if you have installed Drush to some directory other than /usr/local/drush, then you will need to adjust the path to drush appropriately. We'll break down the meaning of each section of the crontab entry in the documentation that continues below.","title":"Quick start"},{"location":"cron/#setting-the-schedule","text":"See man 5 crontab for information on how to format the information in a crontab entry. In the example above, the schedule for the crontab is set by the string 10 * * * * . These fields are the minute, hour, day of month, month and day of week; * means essentially 'all values', so 10 * * * * will run any time the minute == 10 (once every hour).","title":"Setting the schedule"},{"location":"cron/#setting-the-path","text":"We use /usr/bin/env to run Drush so that we can set up some necessary environment variables that Drush needs to execute. By default, cron will run each command with an empty PATH, which would not work well with Drush. To find out what your PATH needs to be, just type: echo $PATH Take the value that is output and place it into your crontab entry in the place of the one shown above. You can remove any entry that is known to not be of interest to Drush (e.g. /usr/games), or is only useful in a graphic environment (e.g. /usr/X11/bin).","title":"Setting the PATH"},{"location":"cron/#setting-columns","text":"When running Drush in a terminal, the number of columns will be automatically determined by Drush by way of the tput command, which queries the active terminal to determine what the width of the screen is. When running Drush from cron, there will not be any terminal set, and the call to tput will produce an error message. Spurious error messages are undesirable, as cron is often configured to send email whenever any output is produced, so it is important to make an effort to insure that successful runs of cron complete with no output. In some cases, Drush is smart enough to recognize that there is no terminal -- if the terminal value is empty or \"dumb\", for example. However, there are some \"non-terminal\" values that Drush does not recognize, such as \"unknown.\" If you manually set COLUMNS , then Drush will respect your setting and will not attempt to call tput.","title":"Setting COLUMNS"},{"location":"cron/#using-quiet","text":"By default, Drush will print a success message when the run of cron is completed. The --quiet flag will suppress these and other progress messages, again avoiding an unnecessary email message.","title":"Using --quiet"},{"location":"cron/#specifying-the-drupal-site-to-run","text":"There are many ways to tell Drush which Drupal site to select for the active command, and any may be used here. The example uses cd [DOCROOT] , but you could also use the --root and --uri flags.","title":"Specifying the Drupal site to run"},{"location":"dependency-injection/","text":"Dependency Injection \u00b6 Drush command files obtain references to the resources they need through a technique called dependency injection . When using this programing paradigm, a class by convention will never use the new operator to instantiate dependencies. Instead, it will store the other objects it needs in class variables, and provide a way for other code to assign an object to that variable. Types of Injection \u00b6 There are two ways that a class can receive its dependencies. One is called \u201cconstructor injection\u201d, and the other is called \u201csetter injection\u201d. Example of constructor injection: public function __construct ( DependencyType $service ) { $this -> service = $service ; } Example of setter injection: public function setService ( DependencyType $service ) { $this -> service = $service ; } A class should use one or the other of these methods. The code that is responsible for providing the dependencies a class need is usually an object called the dependency injection container. Services Files \u00b6 Drush command files can request that Drupal inject services by using a drush.services.yml file. See creating commands for instructions on how to use the Drupal Code Generator to create a simple command file starter with a drush.services.yml file. An initial services file will look something like this: services : my_module.commands : class : \\Drupal\\my_module\\Commands\\MyModuleiCommands tags : - { name : drush.command } See the Drupal Documentation for details on how to inject Drupal services into your command file. The process is exactly the same as using a Drupal services.yml file to inject services into your module classes. Inflection \u00b6 Drush will also inject dependencies that it provides using a technique called inflection. Inflection is a kind of dependency injection that works by way of a set of provided inflection interfaces, one for each available service. Each of these interfaces will define one or more setter methods (usually only one); these will automatically be called by Drush when the commandfile object is instantiated. The command only needs to implement this method and save the provided object in a class field. There is usually a corresponding trait that may be included via a use statement to fulfill this requirement. For example: <? php namespace Drupal\\my_module\\Commands ; use Drush\\Commands\\DrushCommands ; use Consolidation\\OutputFormatters\\StructuredData\\ListDataFromKeys ; use Consolidation\\SiteAlias\\SiteAliasManagerAwareInterface ; use Consolidation\\SiteAlias\\SiteAliasManagerAwareTrait ; class MyModuleCommands extends DrushCommands implements SiteAliasManagerAwareInterface { use SiteAliasManagerAwareTrait ; /** * Prints the currenbt alias name and info. * * @command mymodule:myAlias * @return \\Consolidation\\OutputFormatters\\StructuredData\\ListDataFromKeys */ public function myAlias () { $selfAlias = $this -> siteAliasManager () -> getSelf (); $this -> logger () -> success ( \u2018The current alias is { name } \u2019 , [ \u2018name\u2019 => $selfAlias ]); return new ListDataFromKeys ( $aliasRecord -> export ()); } } All Drush command files extend DrushCommands. DrushCommands implements ConfigAwareInterface, IOAwareInterface, LoggerAwareInterface, which gives access to $this->getConfig() , $this->logger() and other ways to do input and output. See the IO documentation for more information. Any additional services that are desired must be injected by implementing the appropriate inflection interface. Additional Interfaces: AutoloaderAwareInterface: Provides access to the class loader. SiteAliasManagerAwareInterface: The site alias manager allows alias records to be obtained . CustomEventAwareInterface: Allows command files to define and fire custom events that other command files can hook. ContainerAwareInterface: Provides Drush's dependency injection container. Note that although the autoloader and Drush dependency injection container is available and may be injected into your command file if needed, this should be avoided. Favor using services that can be injected from Drupal or Drush. Some of the objects in the container are not part of the Drush public API, and may not maintain compatibility in minor and patch releases.","title":"Dependency injection"},{"location":"dependency-injection/#dependency-injection","text":"Drush command files obtain references to the resources they need through a technique called dependency injection . When using this programing paradigm, a class by convention will never use the new operator to instantiate dependencies. Instead, it will store the other objects it needs in class variables, and provide a way for other code to assign an object to that variable.","title":"Dependency Injection"},{"location":"dependency-injection/#types-of-injection","text":"There are two ways that a class can receive its dependencies. One is called \u201cconstructor injection\u201d, and the other is called \u201csetter injection\u201d. Example of constructor injection: public function __construct ( DependencyType $service ) { $this -> service = $service ; } Example of setter injection: public function setService ( DependencyType $service ) { $this -> service = $service ; } A class should use one or the other of these methods. The code that is responsible for providing the dependencies a class need is usually an object called the dependency injection container.","title":"Types of Injection"},{"location":"dependency-injection/#services-files","text":"Drush command files can request that Drupal inject services by using a drush.services.yml file. See creating commands for instructions on how to use the Drupal Code Generator to create a simple command file starter with a drush.services.yml file. An initial services file will look something like this: services : my_module.commands : class : \\Drupal\\my_module\\Commands\\MyModuleiCommands tags : - { name : drush.command } See the Drupal Documentation for details on how to inject Drupal services into your command file. The process is exactly the same as using a Drupal services.yml file to inject services into your module classes.","title":"Services Files"},{"location":"dependency-injection/#inflection","text":"Drush will also inject dependencies that it provides using a technique called inflection. Inflection is a kind of dependency injection that works by way of a set of provided inflection interfaces, one for each available service. Each of these interfaces will define one or more setter methods (usually only one); these will automatically be called by Drush when the commandfile object is instantiated. The command only needs to implement this method and save the provided object in a class field. There is usually a corresponding trait that may be included via a use statement to fulfill this requirement. For example: <? php namespace Drupal\\my_module\\Commands ; use Drush\\Commands\\DrushCommands ; use Consolidation\\OutputFormatters\\StructuredData\\ListDataFromKeys ; use Consolidation\\SiteAlias\\SiteAliasManagerAwareInterface ; use Consolidation\\SiteAlias\\SiteAliasManagerAwareTrait ; class MyModuleCommands extends DrushCommands implements SiteAliasManagerAwareInterface { use SiteAliasManagerAwareTrait ; /** * Prints the currenbt alias name and info. * * @command mymodule:myAlias * @return \\Consolidation\\OutputFormatters\\StructuredData\\ListDataFromKeys */ public function myAlias () { $selfAlias = $this -> siteAliasManager () -> getSelf (); $this -> logger () -> success ( \u2018The current alias is { name } \u2019 , [ \u2018name\u2019 => $selfAlias ]); return new ListDataFromKeys ( $aliasRecord -> export ()); } } All Drush command files extend DrushCommands. DrushCommands implements ConfigAwareInterface, IOAwareInterface, LoggerAwareInterface, which gives access to $this->getConfig() , $this->logger() and other ways to do input and output. See the IO documentation for more information. Any additional services that are desired must be injected by implementing the appropriate inflection interface. Additional Interfaces: AutoloaderAwareInterface: Provides access to the class loader. SiteAliasManagerAwareInterface: The site alias manager allows alias records to be obtained . CustomEventAwareInterface: Allows command files to define and fire custom events that other command files can hook. ContainerAwareInterface: Provides Drush's dependency injection container. Note that although the autoloader and Drush dependency injection container is available and may be injected into your command file if needed, this should be avoided. Favor using services that can be injected from Drupal or Drush. Some of the objects in the container are not part of the Drush public API, and may not maintain compatibility in minor and patch releases.","title":"Inflection"},{"location":"deploycommand/","text":"Deploy \u00b6 The deploy command standardizes how Drupal deployments work. The intent is your deployment script updates the codebase for the target site and then this command performs the following: drush updatedb --no-cache-clear drush cache:rebuild drush config:import drush cache:rebuild drush deploy:hook Authoring update functions \u00b6 Below are the 3 types of update functions run by this command, in order. Choose the most appropriate for your need. Function Drupal API Purpose HOOK_update_n() Not allowed Low level changes. HOOK_post_update_NAME() Allowed Runs before config is imported. HOOK_deploy_NAME() Allowed Runs after config is imported. Configuration \u00b6 If you need to customize this command, you should use Drush configuration for the subcommands listed above (e.g. updatedb , config:import , etc.).","title":"Deploy"},{"location":"deploycommand/#deploy","text":"The deploy command standardizes how Drupal deployments work. The intent is your deployment script updates the codebase for the target site and then this command performs the following: drush updatedb --no-cache-clear drush cache:rebuild drush config:import drush cache:rebuild drush deploy:hook","title":"Deploy"},{"location":"deploycommand/#authoring-update-functions","text":"Below are the 3 types of update functions run by this command, in order. Choose the most appropriate for your need. Function Drupal API Purpose HOOK_update_n() Not allowed Low level changes. HOOK_post_update_NAME() Allowed Runs before config is imported. HOOK_deploy_NAME() Allowed Runs after config is imported.","title":"Authoring update functions"},{"location":"deploycommand/#configuration","text":"If you need to customize this command, you should use Drush configuration for the subcommands listed above (e.g. updatedb , config:import , etc.).","title":"Configuration"},{"location":"generators/","text":"Overview \u00b6 Generators jump start your coding by building all the boring boilerplate code for you. After running the generate command , you have a guide for where to insert your custom logic. Drush's generators reuse classes provided by the excellent Drupal Code Generator project. See its Commands directory for inspiration. Writing Custom Generators \u00b6 Drupal modules may supply their own Generators, just like they can supply Commands. See Woot module , which Drush uses for testing. Specifically, Write a class similar to ExampleGenerator . Implement your custom logic in the interact() method. Typically this class is placed in the src/Generators directory. Add a .twig file to the same directory. This template specifies what gets output from the generator. Add your class to your module's drush.services.yml file ( example ). Use the tag drush.generator instead of drush.command . Perform a drush cache-rebuild to compile your drush.services.yml changes into the Drupal container. Global Generators \u00b6 Generators that don't ship inside Drupal modules are called global generators. In general, it is better to use modules to carry your generators. If you still prefer using a global generator, please note: The file's namespace should be \\Drush\\Generators . The filename must have a name like Generators/FooGenerator.php The prefix Foo can be whatever string you want. The file must end in Generator.php The enclosing directory must be named Generators The directory above Generators must be one of: A Folder listed in the --include option. include may be provided via config or via CLI. ../drush , /drush or /sites/all/drush . These paths are relative to Drupal root.","title":"Generator Authoring"},{"location":"generators/#overview","text":"Generators jump start your coding by building all the boring boilerplate code for you. After running the generate command , you have a guide for where to insert your custom logic. Drush's generators reuse classes provided by the excellent Drupal Code Generator project. See its Commands directory for inspiration.","title":"Overview"},{"location":"generators/#writing-custom-generators","text":"Drupal modules may supply their own Generators, just like they can supply Commands. See Woot module , which Drush uses for testing. Specifically, Write a class similar to ExampleGenerator . Implement your custom logic in the interact() method. Typically this class is placed in the src/Generators directory. Add a .twig file to the same directory. This template specifies what gets output from the generator. Add your class to your module's drush.services.yml file ( example ). Use the tag drush.generator instead of drush.command . Perform a drush cache-rebuild to compile your drush.services.yml changes into the Drupal container.","title":"Writing Custom Generators"},{"location":"generators/#global-generators","text":"Generators that don't ship inside Drupal modules are called global generators. In general, it is better to use modules to carry your generators. If you still prefer using a global generator, please note: The file's namespace should be \\Drush\\Generators . The filename must have a name like Generators/FooGenerator.php The prefix Foo can be whatever string you want. The file must end in Generator.php The enclosing directory must be named Generators The directory above Generators must be one of: A Folder listed in the --include option. include may be provided via config or via CLI. ../drush , /drush or /sites/all/drush . These paths are relative to Drupal root.","title":"Global Generators"},{"location":"hooks/","text":"Core Hooks \u00b6 All commandfiles may implement methods that are called by Drush at various times in the request cycle. To implement one, add a @hook validate (for example) to the top of your method. Documentation about available hooks . To see how core commands implement a hook, you can search the Drush source code . This link uses validate hook as an example. Custom Hooks \u00b6 Drush commands can define custom events that other command files can hook. You can find examples in CacheCommands and SanitizeCommands First, the command must implement CustomEventAwareInterface and use CustomEventAwareTrait, as described in the dependency injection documentation. Then, the command may ask the provided hook manager to return a list of handlers with a certain annotation. In the example below, the my-event label is used: /** * This command uses a custom event 'my-event' to collect data. Note that * the event handlers will not be found unless the hook manager is * injected into this command handler object via `setHookManager()` * (defined in CustomEventAwareTrait). * * @command example:command */ public function exampleCommand () { $myEventHandlers = $this -> getCustomEventHandlers ( 'my-event' ); $result = []; foreach ( $myEventHandlers as $handler ) { $result [] = $handler (); } sort ( $result ); return implode ( ',' , $result ); } Other command handlers may provide implementations by implementing @hook on-event my-event . /** * @hook on-event my-event */ public function hookOne () { return 'one' ; }","title":"Hooks"},{"location":"hooks/#core-hooks","text":"All commandfiles may implement methods that are called by Drush at various times in the request cycle. To implement one, add a @hook validate (for example) to the top of your method. Documentation about available hooks . To see how core commands implement a hook, you can search the Drush source code . This link uses validate hook as an example.","title":"Core Hooks"},{"location":"hooks/#custom-hooks","text":"Drush commands can define custom events that other command files can hook. You can find examples in CacheCommands and SanitizeCommands First, the command must implement CustomEventAwareInterface and use CustomEventAwareTrait, as described in the dependency injection documentation. Then, the command may ask the provided hook manager to return a list of handlers with a certain annotation. In the example below, the my-event label is used: /** * This command uses a custom event 'my-event' to collect data. Note that * the event handlers will not be found unless the hook manager is * injected into this command handler object via `setHookManager()` * (defined in CustomEventAwareTrait). * * @command example:command */ public function exampleCommand () { $myEventHandlers = $this -> getCustomEventHandlers ( 'my-event' ); $result = []; foreach ( $myEventHandlers as $handler ) { $result [] = $handler (); } sort ( $result ); return implode ( ',' , $result ); } Other command handlers may provide implementations by implementing @hook on-event my-event . /** * @hook on-event my-event */ public function hookOne () { return 'one' ; }","title":"Custom Hooks"},{"location":"install/","text":"Tip Drush only supports one install method. It requires that your Drupal site be built with Composer and Drush be listed as a dependency. See the Drush 8 or Drush 9 docs for installing prior versions of Drush. Install a site-local Drush and Drush Launcher. \u00b6 It is required that Drupal sites be built using Composer, with Drush listed as a dependency. Popular starter templates for that include drupal-project (Drush is included) and recommended-project (Drush must be added). If your Composer project doesn't yet depend on Drush, run composer require drush/drush to add it. After this step, you may call Drush via vendor/bin/drush . Optional. To be able to call drush from anywhere, install the Drush Launcher . That is a small program which listens on your $PATH and hands control to a site-local Drush that is in the /vendor directory of your Composer project. Note See Usage for details on using Drush To use a non-default PHP, edit ~/.bashrc so that the desired PHP is in front of your $PATH . If that is not desirable, you can change your PATH for just one request: PATH=/path/to/php:$PATH drush status ...` To use a custom php.ini for Drush requests, see this comment . See our guide on porting commandfiles from Drush 8 to later versions. Also note that alias and config files use a new .yml format in Drush 10+. Drupal Compatibility \u00b6 Drush Version PHP Version End Of Life Drupal versions 7 -8.3 8.4+ 9 Drush 10 7.1+ TBD \u2705 \u2705 Drush 9 5.6+ May 2020 \u2713 Drush 8 5.4.5+ \u2776 \u2705 \u2705 \u26a0\ufe0f Drush 7 5.3.0+ Jul 2017 \u2713 Drush 6 5.3.0+ Dec 2015 \u2713 Drush 5 5.2.0+ May 2015 \u2713 Legend \u2705 Supported and recommended \u26a0\ufe0f Supported but not recommended \u2713 Compatible but no longer supported \u2776: EOL date for Drush 8 tbd, but estimated to be in concert with Drupal 7 EOL .","title":"Install"},{"location":"install/#install-a-site-local-drush-and-drush-launcher","text":"It is required that Drupal sites be built using Composer, with Drush listed as a dependency. Popular starter templates for that include drupal-project (Drush is included) and recommended-project (Drush must be added). If your Composer project doesn't yet depend on Drush, run composer require drush/drush to add it. After this step, you may call Drush via vendor/bin/drush . Optional. To be able to call drush from anywhere, install the Drush Launcher . That is a small program which listens on your $PATH and hands control to a site-local Drush that is in the /vendor directory of your Composer project. Note See Usage for details on using Drush To use a non-default PHP, edit ~/.bashrc so that the desired PHP is in front of your $PATH . If that is not desirable, you can change your PATH for just one request: PATH=/path/to/php:$PATH drush status ...` To use a custom php.ini for Drush requests, see this comment . See our guide on porting commandfiles from Drush 8 to later versions. Also note that alias and config files use a new .yml format in Drush 10+.","title":"Install a site-local Drush and Drush Launcher."},{"location":"install/#drupal-compatibility","text":"Drush Version PHP Version End Of Life Drupal versions 7 -8.3 8.4+ 9 Drush 10 7.1+ TBD \u2705 \u2705 Drush 9 5.6+ May 2020 \u2713 Drush 8 5.4.5+ \u2776 \u2705 \u2705 \u26a0\ufe0f Drush 7 5.3.0+ Jul 2017 \u2713 Drush 6 5.3.0+ Dec 2015 \u2713 Drush 5 5.2.0+ May 2015 \u2713 Legend \u2705 Supported and recommended \u26a0\ufe0f Supported but not recommended \u2713 Compatible but no longer supported \u2776: EOL date for Drush 8 tbd, but estimated to be in concert with Drupal 7 EOL .","title":"Drupal Compatibility"},{"location":"io/","text":"Input / Output \u00b6 The Input object holds information about the request such option and argument values. You may need to this information when coding a hook implementation. You don't need this object in your command callback method since these values are passed as parameters. The Output object is rarely needed. Instead, return an object that gets formatted via the Output Formatter system. If you want to send additional output, use the io system (see below). The io() system \u00b6 If you need to ask the user a question, or print non-object content, use the io() system. A command callback gets access via $this->io() . The main methods for gathering user input are $this->io()->choice() and $this->io()->confirm() . You may use any of the methods described in the Symfony Style docs .","title":"Input / Output"},{"location":"io/#input-output","text":"The Input object holds information about the request such option and argument values. You may need to this information when coding a hook implementation. You don't need this object in your command callback method since these values are passed as parameters. The Output object is rarely needed. Instead, return an object that gets formatted via the Output Formatter system. If you want to send additional output, use the io system (see below).","title":"Input / Output"},{"location":"io/#the-io-system","text":"If you need to ask the user a question, or print non-object content, use the io() system. A command callback gets access via $this->io() . The main methods for gathering user input are $this->io()->choice() and $this->io()->confirm() . You may use any of the methods described in the Symfony Style docs .","title":"The io() system"},{"location":"output-formats-filters/","text":"Output Formats, Fields and Filters \u00b6 Drush utilizes a powerful formatting and filtering system that provides the user with a lot of control over how output from various commands is rendered. Output formats may be used to select the data type used to print the output. For example, many commands allow the user to select between a human-readable table, or various machine-parsable formats such as yaml and json. Output fields may be used to select and order the data columns. Output filters may be used to limit which data rows are printed based on logical expressions. Output Formats \u00b6 The --format option may be used to select the data format used to print the output of a command. Most commands that produce informative output about some object or system can transform their data into different formats. For example, the version command may be printed in a human-readable table (the default), or in a json array: $ drush version Drush version : 10 .3.1 $ drush version --format = json { \"drush-version\" : \"10.3.1\" } The available output formats are shown in the help for each command: $ drush help version Show drush version. Options: --format = <json> Select output format. Available: json, string, var_export, yaml. Default is key-value. Output Fields \u00b6 If you wish to limit the number of columns produced by a command, use the --fields option. List the field names in the order they should be displayed: $ drush views:list --fields = machine-name,status +-------------------+----------+ | Machine name | Status | +-------------------+----------+ | block_content | Enabled | | comment | Enabled | | comments_recent | Enabled | | content | Enabled | | content_recent | Enabled | | files | Enabled | | frontpage | Enabled | | taxonomy_term | Enabled | | user_admin_people | Enabled | | watchdog | Enabled | | who_s_new | Enabled | | who_s_online | Enabled | | archive | Disabled | | glossary | Disabled | +-------------------+----------+ The available field names are shown in the help text: $ drush help views:list Get a list of all views in the system. Options: --fields = FIELDS Available fields: Machine name ( machine-name ) , Name ( label ) , Description ( description ) , Status ( status ) , Tag ( tag ) [ default: \"machine-name,label,description,status\" ] Fields may be named either using their human-readable name, or via their machine name. Note also that some commands do not display all of their available data columns by default. To show all available fields, use --fields=* There is also a singular form --field available. If this form is used, it will also force the output format to string . $ drush views:list --field = machine-name block_content comment comments_recent content content_recent files frontpage taxonomy_term user_admin_people watchdog who_s_new who_s_online archive glossary Output Filters \u00b6 A number of Drush commands that output tabular data support a --filter option that allows rows from the output to be selected with simple logic expressions. In its simplest form, the --filter option takes a string that indicates the value to filter by in the command's default filter field . For example, the role:list command specifies perms as its default filter; the output of the role:list command may be limited to only those roles that have a specified permission: $ drush role:list --filter = 'post comments' authenticated: label: 'Authenticated user' perms: - 'access comments' - 'access content' - 'access shortcuts' - 'access site-wide contact form' - 'access user contact forms' - 'post comments' - 'search content' - 'skip comment approval' - 'use text format basic_html' Note that not all commands have a default filter field. Other fields in the output may be searched by using a simple expression in the --filter term. For example, to list only the enabled extensions with the pm:list command, you could run: $ drush pm:list --filter = 'status=enabled' To search for fields that contain a string using the operator *= , or match a regular expression with the ~= operator. For example, to find all views whose machine name contains the word \"content\": drush views:list --filter = 'machine-name*=content' To use a regular expression to find any core requirement notice whose title contains either \"php\" or \"gd\" drush core:requirements --filter = 'title~=#(php|gd)#i' Finally, filter expressions may also use logical-and ( && ) or logical-or ( || ) operations to separate multiple terms. Parenthesis are not supported. For example, to search both the title and severity fields in the core:requirements command: drush core:requirements --filter = 'title~=#(php|gd)#i&&severity=warning' The = and *= operators always use case-insensitive comparisons. The ~= operator is case-sensitive, unless the i PCRE modifier is used, as shown in the previous example. Comparison of Filters with Grep \u00b6 Using the --filter feature is similar to using grep . The main difference is that the filter feature does a semantic search, which is to say that it explicitly compares against the data in specific fields. In comparison, the grep command does a line-based search. Show only results where the severity is warning : drush core:requirements --filter = 'severity=warning' Show only lines that contain the string warning (either in the severity field, or somewhere else on the line): drush core:requirements | grep -i warning The table below compares and contrasts the two ways of searching. Feature --filter grep Regular expressions Yes, with ~= Yes Word-wrapped field data Searched correctly Might cause false negative Search just one field Yes Might get false positives Search multiple fields Yes, with || / && Yes (line-based searching) Searching hides header No Yes (unless it matches)","title":"Output Formats, Fields & Filters"},{"location":"output-formats-filters/#output-formats-fields-and-filters","text":"Drush utilizes a powerful formatting and filtering system that provides the user with a lot of control over how output from various commands is rendered. Output formats may be used to select the data type used to print the output. For example, many commands allow the user to select between a human-readable table, or various machine-parsable formats such as yaml and json. Output fields may be used to select and order the data columns. Output filters may be used to limit which data rows are printed based on logical expressions.","title":"Output Formats, Fields and Filters"},{"location":"output-formats-filters/#output-formats","text":"The --format option may be used to select the data format used to print the output of a command. Most commands that produce informative output about some object or system can transform their data into different formats. For example, the version command may be printed in a human-readable table (the default), or in a json array: $ drush version Drush version : 10 .3.1 $ drush version --format = json { \"drush-version\" : \"10.3.1\" } The available output formats are shown in the help for each command: $ drush help version Show drush version. Options: --format = <json> Select output format. Available: json, string, var_export, yaml. Default is key-value.","title":"Output Formats"},{"location":"output-formats-filters/#output-fields","text":"If you wish to limit the number of columns produced by a command, use the --fields option. List the field names in the order they should be displayed: $ drush views:list --fields = machine-name,status +-------------------+----------+ | Machine name | Status | +-------------------+----------+ | block_content | Enabled | | comment | Enabled | | comments_recent | Enabled | | content | Enabled | | content_recent | Enabled | | files | Enabled | | frontpage | Enabled | | taxonomy_term | Enabled | | user_admin_people | Enabled | | watchdog | Enabled | | who_s_new | Enabled | | who_s_online | Enabled | | archive | Disabled | | glossary | Disabled | +-------------------+----------+ The available field names are shown in the help text: $ drush help views:list Get a list of all views in the system. Options: --fields = FIELDS Available fields: Machine name ( machine-name ) , Name ( label ) , Description ( description ) , Status ( status ) , Tag ( tag ) [ default: \"machine-name,label,description,status\" ] Fields may be named either using their human-readable name, or via their machine name. Note also that some commands do not display all of their available data columns by default. To show all available fields, use --fields=* There is also a singular form --field available. If this form is used, it will also force the output format to string . $ drush views:list --field = machine-name block_content comment comments_recent content content_recent files frontpage taxonomy_term user_admin_people watchdog who_s_new who_s_online archive glossary","title":"Output Fields"},{"location":"output-formats-filters/#output-filters","text":"A number of Drush commands that output tabular data support a --filter option that allows rows from the output to be selected with simple logic expressions. In its simplest form, the --filter option takes a string that indicates the value to filter by in the command's default filter field . For example, the role:list command specifies perms as its default filter; the output of the role:list command may be limited to only those roles that have a specified permission: $ drush role:list --filter = 'post comments' authenticated: label: 'Authenticated user' perms: - 'access comments' - 'access content' - 'access shortcuts' - 'access site-wide contact form' - 'access user contact forms' - 'post comments' - 'search content' - 'skip comment approval' - 'use text format basic_html' Note that not all commands have a default filter field. Other fields in the output may be searched by using a simple expression in the --filter term. For example, to list only the enabled extensions with the pm:list command, you could run: $ drush pm:list --filter = 'status=enabled' To search for fields that contain a string using the operator *= , or match a regular expression with the ~= operator. For example, to find all views whose machine name contains the word \"content\": drush views:list --filter = 'machine-name*=content' To use a regular expression to find any core requirement notice whose title contains either \"php\" or \"gd\" drush core:requirements --filter = 'title~=#(php|gd)#i' Finally, filter expressions may also use logical-and ( && ) or logical-or ( || ) operations to separate multiple terms. Parenthesis are not supported. For example, to search both the title and severity fields in the core:requirements command: drush core:requirements --filter = 'title~=#(php|gd)#i&&severity=warning' The = and *= operators always use case-insensitive comparisons. The ~= operator is case-sensitive, unless the i PCRE modifier is used, as shown in the previous example.","title":"Output Filters"},{"location":"output-formats-filters/#comparison-of-filters-with-grep","text":"Using the --filter feature is similar to using grep . The main difference is that the filter feature does a semantic search, which is to say that it explicitly compares against the data in specific fields. In comparison, the grep command does a line-based search. Show only results where the severity is warning : drush core:requirements --filter = 'severity=warning' Show only lines that contain the string warning (either in the severity field, or somewhere else on the line): drush core:requirements | grep -i warning The table below compares and contrasts the two ways of searching. Feature --filter grep Regular expressions Yes, with ~= Yes Word-wrapped field data Searched correctly Might cause false negative Search just one field Yes Might get false positives Search multiple fields Yes, with || / && Yes (line-based searching) Searching hides header No Yes (unless it matches)","title":"Comparison of Filters with Grep"},{"location":"repl/","text":"The php:cli command is interactive PHP REPL with your bootstrapped site (remote or local). It\u2019s a Drupal code playground. You can do quick code experimentation, grab some data, or run Drush commands. This can also help with debugging certain issues. See this blog post for an introduction. Run help for a list of commands.","title":"REPL (a custom shell for Drupal)"},{"location":"site-alias-manager/","text":"Site Alias Manager \u00b6 The Site Alias Manager (SAM) service is used to retrieve information about one or all of the site aliases for the current installation. An informative example is the browse command A commandfile gets access to the SAM by implementing the SiteAliasManagerAwareInterface and use ing the SiteAliasManagerAwareTrait trait. Then you gain access via $this->siteAliasManager() . If an alias was used for the current request, it is available via $this->siteAliasManager()->getself(). The SAM generally deals in SiteAlias objects. That is how any given site alias is represented. See its methods for determining things like whether the alias points to a local host or remote host. An example site alias file . Dynamically alter site aliases . The SAM is also available for as a standalone Composer project . More information available in the README there.","title":"Site Alias Manager"},{"location":"site-alias-manager/#site-alias-manager","text":"The Site Alias Manager (SAM) service is used to retrieve information about one or all of the site aliases for the current installation. An informative example is the browse command A commandfile gets access to the SAM by implementing the SiteAliasManagerAwareInterface and use ing the SiteAliasManagerAwareTrait trait. Then you gain access via $this->siteAliasManager() . If an alias was used for the current request, it is available via $this->siteAliasManager()->getself(). The SAM generally deals in SiteAlias objects. That is how any given site alias is represented. See its methods for determining things like whether the alias points to a local host or remote host. An example site alias file . Dynamically alter site aliases . The SAM is also available for as a standalone Composer project . More information available in the README there.","title":"Site Alias Manager"},{"location":"usage/","text":"Drush can be run in your shell by typing drush from within your project root directory or anywhere within Drupal. $ drush [options] <command> [argument1] [argument2] Use the help command to get a list of available options and commands: $ drush help pm:list For even more documentation, use the topic command : $ drush topic Using the --uri option and --root options. \u00b6 For multi-site installations, use a site alias or the --uri option to target a particular site. $ drush --uri=http://example.com pm:enable If you are outside the Composer project and not using a site alias, you need to specify --root and --uri for Drush to locate and bootstrap the right Drupal site. Site Aliases \u00b6 Drush lets you run commands on a remote server. Once defined, aliases can be referenced with the @ nomenclature, i.e. # Run pending updates on staging site. $ drush @staging updatedb # Synchronize staging files to production $ drush rsync @staging:%files/ @live:%files # Synchronize database from production to local, excluding the cache table $ drush sql:sync --structure-tables-key = custom @live @self See example.site.yml for more information.","title":"Usage"},{"location":"usage/#using-the-uri-option-and-root-options","text":"For multi-site installations, use a site alias or the --uri option to target a particular site. $ drush --uri=http://example.com pm:enable If you are outside the Composer project and not using a site alias, you need to specify --root and --uri for Drush to locate and bootstrap the right Drupal site.","title":"Using the --uri option and --root options."},{"location":"usage/#site-aliases","text":"Drush lets you run commands on a remote server. Once defined, aliases can be referenced with the @ nomenclature, i.e. # Run pending updates on staging site. $ drush @staging updatedb # Synchronize staging files to production $ drush rsync @staging:%files/ @live:%files # Synchronize database from production to local, excluding the cache table $ drush sql:sync --structure-tables-key = custom @live @self See example.site.yml for more information.","title":"Site Aliases"},{"location":"using-drush-configuration/","text":"Drush Configuration \u00b6 Drush users may provide configuration via: yml files that are placed in specific directories. See our example file for more information. You may also add configuration to a site alias - see example site alias . Properly named environment variables are automatically used as configuration. To populate the options.uri config item, create an environment variable like so DRUSH_OPTIONS_URI=http://example.com . As you can see, variable names should be uppercased, prefixed with DRUSH_ , and periods replaced with dashes. If you are authoring a commandfile and wish to access the user's configuration, see Command Authoring . The Drush configuration system has been factored out of Drush and shared with the world at https://github.com/consolidation/config . Feel free to use it for your projects. Lots more usage information is there.","title":"Drush configuration"},{"location":"using-drush-configuration/#drush-configuration","text":"Drush users may provide configuration via: yml files that are placed in specific directories. See our example file for more information. You may also add configuration to a site alias - see example site alias . Properly named environment variables are automatically used as configuration. To populate the options.uri config item, create an environment variable like so DRUSH_OPTIONS_URI=http://example.com . As you can see, variable names should be uppercased, prefixed with DRUSH_ , and periods replaced with dashes. If you are authoring a commandfile and wish to access the user's configuration, see Command Authoring . The Drush configuration system has been factored out of Drush and shared with the world at https://github.com/consolidation/config . Feel free to use it for your projects. Lots more usage information is there.","title":"Drush Configuration"},{"location":"commands/10.x/all/","text":"All commands \u00b6 Tip Press the / key to Search for a command. Or use your browser's Find in Page feature. browse deploy drupal:directory generate help jn:get list mk:docs runserver updatedb updatedb:status version cache:clear cache:get cache:rebuild cache:set cache:tags config:delete config:edit config:export config:get config:import config:pull config:set config:status core:cron core:edit core:init core:requirements core:rsync core:status core:topic deploy:hook deploy:hook-status entity:delete entity:updates image:derive image:flush locale:check locale:export locale:import locale:update php:cli php:eval php:script pm:enable pm:list pm:security pm:security-php pm:uninstall queue:delete queue:list queue:run role:create role:delete role:list role:perm:add role:perm:remove site:alias site:alias-convert site:install site:set site:ssh sql:cli sql:connect sql:create sql:drop sql:dump sql:query sql:sanitize sql:sync state:delete state:get state:set theme:enable theme:uninstall twig:compile twig:unused user:block user:cancel user:create user:information user:login user:password user:role:add user:role:remove user:unblock views:analyze views:dev views:disable views:enable views:execute views:list watchdog:delete watchdog:list watchdog:show watchdog:show-one","title":"all"},{"location":"commands/10.x/all/#all-commands","text":"Tip Press the / key to Search for a command. Or use your browser's Find in Page feature. browse deploy drupal:directory generate help jn:get list mk:docs runserver updatedb updatedb:status version cache:clear cache:get cache:rebuild cache:set cache:tags config:delete config:edit config:export config:get config:import config:pull config:set config:status core:cron core:edit core:init core:requirements core:rsync core:status core:topic deploy:hook deploy:hook-status entity:delete entity:updates image:derive image:flush locale:check locale:export locale:import locale:update php:cli php:eval php:script pm:enable pm:list pm:security pm:security-php pm:uninstall queue:delete queue:list queue:run role:create role:delete role:list role:perm:add role:perm:remove site:alias site:alias-convert site:install site:set site:ssh sql:cli sql:connect sql:create sql:drop sql:dump sql:query sql:sanitize sql:sync state:delete state:get state:set theme:enable theme:uninstall twig:compile twig:unused user:block user:cancel user:create user:information user:login user:password user:role:add user:role:remove user:unblock views:analyze views:dev views:disable views:enable views:execute views:list watchdog:delete watchdog:list watchdog:show watchdog:show-one","title":"All commands"},{"location":"commands/10.x/browse/","text":"browse \u00b6 Display a link to a given path or open link in a browser. Examples \u00b6 drush browse . Open default web browser (if configured or detected) to the site front page. drush browse node/1 . Open web browser to the path node/1. drush @example.prod . Open a browser to the web site specified in a site alias. drush browse --browser=firefox admin . Open Firefox web browser to the path 'admin'. Arguments \u00b6 [--path] . Path to open. If omitted, the site front page will be opened. Options \u00b6 --browser=BROWSER . Specify a particular browser (defaults to OS default). Use --no-browser to suppress opening a browser. --redirect-port=REDIRECT-PORT . The port that the web server is redirected to (e.g. when running within a Vagrant environment). Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"browse"},{"location":"commands/10.x/browse/#browse","text":"Display a link to a given path or open link in a browser.","title":"browse"},{"location":"commands/10.x/browse/#examples","text":"drush browse . Open default web browser (if configured or detected) to the site front page. drush browse node/1 . Open web browser to the path node/1. drush @example.prod . Open a browser to the web site specified in a site alias. drush browse --browser=firefox admin . Open Firefox web browser to the path 'admin'.","title":"Examples"},{"location":"commands/10.x/browse/#arguments","text":"[--path] . Path to open. If omitted, the site front page will be opened.","title":"Arguments"},{"location":"commands/10.x/browse/#options","text":"--browser=BROWSER . Specify a particular browser (defaults to OS default). Use --no-browser to suppress opening a browser. --redirect-port=REDIRECT-PORT . The port that the web server is redirected to (e.g. when running within a Vagrant environment). Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Options"},{"location":"commands/10.x/cache_clear/","text":"cache:clear \u00b6 Clear a specific cache, or all Drupal caches. Examples \u00b6 drush cc bin entity,bootstrap . Clear the entity and bootstrap cache bins. Arguments \u00b6 --type . The particular cache to clear. Omit this argument to choose from available types. [--args]... . Additional arguments as might be expected (e.g. bin name). Options \u00b6 --cache-clear[=CACHE-CLEAR] . Set to 0 to suppress normal cache clearing; the caller should then clear if needed. [default: 1 ] --no-cache-clear . Negate --cache-clear option. Aliases \u00b6 cc cache-clear Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"cache:clear"},{"location":"commands/10.x/cache_clear/#cacheclear","text":"Clear a specific cache, or all Drupal caches.","title":"cache:clear"},{"location":"commands/10.x/cache_clear/#examples","text":"drush cc bin entity,bootstrap . Clear the entity and bootstrap cache bins.","title":"Examples"},{"location":"commands/10.x/cache_clear/#arguments","text":"--type . The particular cache to clear. Omit this argument to choose from available types. [--args]... . Additional arguments as might be expected (e.g. bin name).","title":"Arguments"},{"location":"commands/10.x/cache_clear/#options","text":"--cache-clear[=CACHE-CLEAR] . Set to 0 to suppress normal cache clearing; the caller should then clear if needed. [default: 1 ] --no-cache-clear . Negate --cache-clear option.","title":"Options"},{"location":"commands/10.x/cache_clear/#aliases","text":"cc cache-clear Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/cache_get/","text":"cache:get \u00b6 Fetch a cached object and display it. Examples \u00b6 drush cache:get hook_info bootstrap . Display the data for the cache id \"hook_info\" from the \"bootstrap\" bin. drush cache:get update_available_releases update . Display the data for the cache id \"update_available_releases\" from the \"update\" bin. Arguments \u00b6 --cid . The id of the object to fetch. [--bin] . The cache bin to fetch from. Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,table,tsv,var_dump,var_export,xml,yaml [default: json ] --fields=FIELDS . Available fields: Cache ID (cid), Data (data), Created (created), Expire (expire), Tags (tags), Checksum (checksum), Valid (valid) [default: cid,data,created,expire,tags ] --field=FIELD . Select just one field, and force format to 'string'. Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 cg cache-get Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"cache:get"},{"location":"commands/10.x/cache_get/#cacheget","text":"Fetch a cached object and display it.","title":"cache:get"},{"location":"commands/10.x/cache_get/#examples","text":"drush cache:get hook_info bootstrap . Display the data for the cache id \"hook_info\" from the \"bootstrap\" bin. drush cache:get update_available_releases update . Display the data for the cache id \"update_available_releases\" from the \"update\" bin.","title":"Examples"},{"location":"commands/10.x/cache_get/#arguments","text":"--cid . The id of the object to fetch. [--bin] . The cache bin to fetch from.","title":"Arguments"},{"location":"commands/10.x/cache_get/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,table,tsv,var_dump,var_export,xml,yaml [default: json ] --fields=FIELDS . Available fields: Cache ID (cid), Data (data), Created (created), Expire (expire), Tags (tags), Checksum (checksum), Valid (valid) [default: cid,data,created,expire,tags ] --field=FIELD . Select just one field, and force format to 'string'.","title":"Options"},{"location":"commands/10.x/cache_get/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/cache_get/#aliases","text":"cg cache-get Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/cache_rebuild/","text":"cache:rebuild \u00b6 Rebuild a Drupal 8 site. This is a copy of core/rebuild.php. Additionally it also clears Drush cache and Drupal's render cache. Options \u00b6 --cache-clear[=CACHE-CLEAR] . Set to 0 to suppress normal cache clearing; the caller should then clear if needed. [default: 1 ] --no-cache-clear . Negate --cache-clear option. Aliases \u00b6 cr rebuild cache-rebuild Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"cache:rebuild"},{"location":"commands/10.x/cache_rebuild/#cacherebuild","text":"Rebuild a Drupal 8 site. This is a copy of core/rebuild.php. Additionally it also clears Drush cache and Drupal's render cache.","title":"cache:rebuild"},{"location":"commands/10.x/cache_rebuild/#options","text":"--cache-clear[=CACHE-CLEAR] . Set to 0 to suppress normal cache clearing; the caller should then clear if needed. [default: 1 ] --no-cache-clear . Negate --cache-clear option.","title":"Options"},{"location":"commands/10.x/cache_rebuild/#aliases","text":"cr rebuild cache-rebuild Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/cache_set/","text":"cache:set \u00b6 Cache an object expressed in JSON or var_export() format. Arguments \u00b6 --cid . The id of the object to set. --data . The object to set in the cache. Use - to read the object from STDIN. [--bin] . The cache bin to store the object in. [--expire] . 'CACHE_PERMANENT', or a Unix timestamp. [--tags] . A comma delimited list of cache tags. Options \u00b6 --input-format[=INPUT-FORMAT] . The format of value. Use json for complex values. [default: string ] --cache-get . If the object is the result a previous fetch from the cache, only store the value in the 'data' property of the object in the cache. Aliases \u00b6 cs cache-set Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"cache:set"},{"location":"commands/10.x/cache_set/#cacheset","text":"Cache an object expressed in JSON or var_export() format.","title":"cache:set"},{"location":"commands/10.x/cache_set/#arguments","text":"--cid . The id of the object to set. --data . The object to set in the cache. Use - to read the object from STDIN. [--bin] . The cache bin to store the object in. [--expire] . 'CACHE_PERMANENT', or a Unix timestamp. [--tags] . A comma delimited list of cache tags.","title":"Arguments"},{"location":"commands/10.x/cache_set/#options","text":"--input-format[=INPUT-FORMAT] . The format of value. Use json for complex values. [default: string ] --cache-get . If the object is the result a previous fetch from the cache, only store the value in the 'data' property of the object in the cache.","title":"Options"},{"location":"commands/10.x/cache_set/#aliases","text":"cs cache-set Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/cache_tags/","text":"cache:tags \u00b6 Invalidate by cache tags. Examples \u00b6 drush cache:tag node:12,user:4 . Purge content associated with two cache tags. Arguments \u00b6 --tags . A comma delimited list of cache tags to clear. Aliases \u00b6 ct Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"cache:tags"},{"location":"commands/10.x/cache_tags/#cachetags","text":"Invalidate by cache tags.","title":"cache:tags"},{"location":"commands/10.x/cache_tags/#examples","text":"drush cache:tag node:12,user:4 . Purge content associated with two cache tags.","title":"Examples"},{"location":"commands/10.x/cache_tags/#arguments","text":"--tags . A comma delimited list of cache tags to clear.","title":"Arguments"},{"location":"commands/10.x/cache_tags/#aliases","text":"ct Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/config_delete/","text":"config:delete \u00b6 Delete a configuration key, or a whole object. Examples \u00b6 drush config:delete system.site . Delete the the system.site config object. drush config:delete system.site page.front . Delete the 'page.front' key from the system.site object. Arguments \u00b6 --config_name . The config object name, for example \"system.site\". [--key] . A config key to clear, for example \"page.front\". Aliases \u00b6 cdel config-delete Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"config:delete"},{"location":"commands/10.x/config_delete/#configdelete","text":"Delete a configuration key, or a whole object.","title":"config:delete"},{"location":"commands/10.x/config_delete/#examples","text":"drush config:delete system.site . Delete the the system.site config object. drush config:delete system.site page.front . Delete the 'page.front' key from the system.site object.","title":"Examples"},{"location":"commands/10.x/config_delete/#arguments","text":"--config_name . The config object name, for example \"system.site\". [--key] . A config key to clear, for example \"page.front\".","title":"Arguments"},{"location":"commands/10.x/config_delete/#aliases","text":"cdel config-delete Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/config_edit/","text":"config:edit \u00b6 Open a config file in a text editor. Edits are imported after closing editor. Examples \u00b6 drush config:edit image.style.large . Edit the image style configurations. drush config:edit . Choose a config file to edit. drush --bg config-edit image.style.large . Return to shell prompt as soon as the editor window opens. Arguments \u00b6 --config_name . The config object name, for example system.site . Options \u00b6 --editor[=EDITOR] . A string of bash which launches user's preferred text editor. Defaults to ${VISUAL-${EDITOR-vi}} . --bg . Launch editor in background process. Aliases \u00b6 cedit config-edit Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"config:edit"},{"location":"commands/10.x/config_edit/#configedit","text":"Open a config file in a text editor. Edits are imported after closing editor.","title":"config:edit"},{"location":"commands/10.x/config_edit/#examples","text":"drush config:edit image.style.large . Edit the image style configurations. drush config:edit . Choose a config file to edit. drush --bg config-edit image.style.large . Return to shell prompt as soon as the editor window opens.","title":"Examples"},{"location":"commands/10.x/config_edit/#arguments","text":"--config_name . The config object name, for example system.site .","title":"Arguments"},{"location":"commands/10.x/config_edit/#options","text":"--editor[=EDITOR] . A string of bash which launches user's preferred text editor. Defaults to ${VISUAL-${EDITOR-vi}} . --bg . Launch editor in background process.","title":"Options"},{"location":"commands/10.x/config_edit/#aliases","text":"cedit config-edit Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/config_export/","text":"config:export \u00b6 Export Drupal configuration to a directory. Examples \u00b6 drush config:export . Export configuration files to the site's config directory. drush config:export --destination . Export configuration; Save files in a backup directory named config-export. Arguments \u00b6 [--label] . A config directory label (i.e. a key in $config_directories array in settings.php). Options \u00b6 --add . Run git add -p after exporting. This lets you choose which config changes to sync for commit. --commit . Run git add -A and git commit after exporting. This commits everything that was exported without prompting. --message=MESSAGE . Commit comment for the exported configuration. Optional; may only be used with --commit. --destination[=DESTINATION] . An arbitrary directory that should receive the exported files. A backup directory is used when no value is provided. --diff . Show preview as a diff, instead of a change list. --format[=FORMAT] . Aliases \u00b6 cex config-export Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"config:export"},{"location":"commands/10.x/config_export/#configexport","text":"Export Drupal configuration to a directory.","title":"config:export"},{"location":"commands/10.x/config_export/#examples","text":"drush config:export . Export configuration files to the site's config directory. drush config:export --destination . Export configuration; Save files in a backup directory named config-export.","title":"Examples"},{"location":"commands/10.x/config_export/#arguments","text":"[--label] . A config directory label (i.e. a key in $config_directories array in settings.php).","title":"Arguments"},{"location":"commands/10.x/config_export/#options","text":"--add . Run git add -p after exporting. This lets you choose which config changes to sync for commit. --commit . Run git add -A and git commit after exporting. This commits everything that was exported without prompting. --message=MESSAGE . Commit comment for the exported configuration. Optional; may only be used with --commit. --destination[=DESTINATION] . An arbitrary directory that should receive the exported files. A backup directory is used when no value is provided. --diff . Show preview as a diff, instead of a change list. --format[=FORMAT] .","title":"Options"},{"location":"commands/10.x/config_export/#aliases","text":"cex config-export Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/config_get/","text":"config:get \u00b6 Display a config value, or a whole configuration object. Examples \u00b6 drush config:get system.site . Displays the system.site config. drush config:get system.site page.front . Gets system.site:page.front value. Arguments \u00b6 --config_name . The config object name, for example system.site . [--key] . The config key, for example page.front . Optional. Options \u00b6 --format[=FORMAT] . [default: yaml ] --source[=SOURCE] . The config storage source to read. Additional labels may be defined in settings.php. [default: active ] --include-overridden . Apply module and settings.php overrides to values. Aliases \u00b6 cget config-get Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"config:get"},{"location":"commands/10.x/config_get/#configget","text":"Display a config value, or a whole configuration object.","title":"config:get"},{"location":"commands/10.x/config_get/#examples","text":"drush config:get system.site . Displays the system.site config. drush config:get system.site page.front . Gets system.site:page.front value.","title":"Examples"},{"location":"commands/10.x/config_get/#arguments","text":"--config_name . The config object name, for example system.site . [--key] . The config key, for example page.front . Optional.","title":"Arguments"},{"location":"commands/10.x/config_get/#options","text":"--format[=FORMAT] . [default: yaml ] --source[=SOURCE] . The config storage source to read. Additional labels may be defined in settings.php. [default: active ] --include-overridden . Apply module and settings.php overrides to values.","title":"Options"},{"location":"commands/10.x/config_get/#aliases","text":"cget config-get Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/config_import/","text":"config:import \u00b6 Import config from a config directory. Arguments \u00b6 [--label] . A config directory label (i.e. a key in \\$config_directories array in settings.php). Options \u00b6 --preview[=PREVIEW] . Deprecated. Format for displaying proposed changes. Recognized values: list, diff. [default: list ] --source=SOURCE . An arbitrary directory that holds the configuration files. An alternative to label argument --partial . Allows for partial config imports from the source directory. Only updates and new configs will be processed with this flag (missing configs will not be deleted). No config transformation happens. --diff . Show preview as a diff. Aliases \u00b6 cim config-import Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"config:import"},{"location":"commands/10.x/config_import/#configimport","text":"Import config from a config directory.","title":"config:import"},{"location":"commands/10.x/config_import/#arguments","text":"[--label] . A config directory label (i.e. a key in \\$config_directories array in settings.php).","title":"Arguments"},{"location":"commands/10.x/config_import/#options","text":"--preview[=PREVIEW] . Deprecated. Format for displaying proposed changes. Recognized values: list, diff. [default: list ] --source=SOURCE . An arbitrary directory that holds the configuration files. An alternative to label argument --partial . Allows for partial config imports from the source directory. Only updates and new configs will be processed with this flag (missing configs will not be deleted). No config transformation happens. --diff . Show preview as a diff.","title":"Options"},{"location":"commands/10.x/config_import/#aliases","text":"cim config-import Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/config_pull/","text":"config:pull \u00b6 Export and transfer config from one environment to another. Examples \u00b6 drush config:pull @prod @stage . Export config from @prod and transfer to @stage. drush config:pull @prod @self --label=vcs . Export config from @prod and transfer to the vcs config directory of current site. drush config:pull @prod @self:../config/sync . Export config to a custom directory. Relative paths are calculated from Drupal root. Arguments \u00b6 --source . A site-alias or the name of a subdirectory within /sites whose config you want to copy from. --destination . A site-alias or the name of a subdirectory within /sites whose config you want to replace. Options \u00b6 --safe . Validate that there are no git uncommitted changes before proceeding --label[=LABEL] . A config directory label (i.e. a key in $config_directories array in settings.php). [default: sync ] --runner[=RUNNER] . Where to run the rsync command; defaults to the local site. Can also be source or destination . --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,table,tsv,var_dump,var_export,xml,yaml [default: null ] --fields=FIELDS . Available fields: Path (path) --field=FIELD . Select just one field, and force format to 'string'. Topics \u00b6 Creating site aliases for running Drush on remote sites. (docs:aliases) Drupal config export instructions, including customizing config by environment. (docs:config:exporting) Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 cpull config-pull Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"config:pull"},{"location":"commands/10.x/config_pull/#configpull","text":"Export and transfer config from one environment to another.","title":"config:pull"},{"location":"commands/10.x/config_pull/#examples","text":"drush config:pull @prod @stage . Export config from @prod and transfer to @stage. drush config:pull @prod @self --label=vcs . Export config from @prod and transfer to the vcs config directory of current site. drush config:pull @prod @self:../config/sync . Export config to a custom directory. Relative paths are calculated from Drupal root.","title":"Examples"},{"location":"commands/10.x/config_pull/#arguments","text":"--source . A site-alias or the name of a subdirectory within /sites whose config you want to copy from. --destination . A site-alias or the name of a subdirectory within /sites whose config you want to replace.","title":"Arguments"},{"location":"commands/10.x/config_pull/#options","text":"--safe . Validate that there are no git uncommitted changes before proceeding --label[=LABEL] . A config directory label (i.e. a key in $config_directories array in settings.php). [default: sync ] --runner[=RUNNER] . Where to run the rsync command; defaults to the local site. Can also be source or destination . --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,table,tsv,var_dump,var_export,xml,yaml [default: null ] --fields=FIELDS . Available fields: Path (path) --field=FIELD . Select just one field, and force format to 'string'.","title":"Options"},{"location":"commands/10.x/config_pull/#topics","text":"Creating site aliases for running Drush on remote sites. (docs:aliases) Drupal config export instructions, including customizing config by environment. (docs:config:exporting) Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/config_pull/#aliases","text":"cpull config-pull Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/config_set/","text":"config:set \u00b6 Set config value directly. Does not perform a config import. Examples \u00b6 drush config:set system.site page.front '/path/to/page' . Sets the given URL path as value for the config item with key page.front of system.site config object. Arguments \u00b6 --config_name . The config object name, for example system.site . --key . The config key, for example page.front . [--value] . The value to assign to the config key. Use - to read from STDIN. Options \u00b6 --input-format[=INPUT-FORMAT] . Format to parse the object. Recognized values: string , yaml [default: string ] --value=VALUE . The value to assign to the config key (if any). Aliases \u00b6 cset config-set Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"config:set"},{"location":"commands/10.x/config_set/#configset","text":"Set config value directly. Does not perform a config import.","title":"config:set"},{"location":"commands/10.x/config_set/#examples","text":"drush config:set system.site page.front '/path/to/page' . Sets the given URL path as value for the config item with key page.front of system.site config object.","title":"Examples"},{"location":"commands/10.x/config_set/#arguments","text":"--config_name . The config object name, for example system.site . --key . The config key, for example page.front . [--value] . The value to assign to the config key. Use - to read from STDIN.","title":"Arguments"},{"location":"commands/10.x/config_set/#options","text":"--input-format[=INPUT-FORMAT] . Format to parse the object. Recognized values: string , yaml [default: string ] --value=VALUE . The value to assign to the config key (if any).","title":"Options"},{"location":"commands/10.x/config_set/#aliases","text":"cset config-set Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/config_status/","text":"config:status \u00b6 Display status of configuration (differences between the filesystem configuration and database configuration). Examples \u00b6 drush config:status . Display configuration items that need to be synchronized. drush config:status --state=Identical . Display configuration items that are in default state. drush config:status --state='Only in sync dir' --prefix=node.type. . Display all content types that would be created in active storage on configuration import. drush config:status --state=Any --format=list . List all config names. Options \u00b6 --state[=STATE] . A comma-separated list of states to filter results. [default: Only in DB,Only in sync dir,Different ] --prefix=PREFIX . Prefix The config prefix. For example, system . No prefix will return all names in the system. --label=LABEL . A config directory label (i.e. a key in $config_directories array in settings.php). --format=FORMAT . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Name (name), State (state) [default: name,state ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 cst config-status Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"config:status"},{"location":"commands/10.x/config_status/#configstatus","text":"Display status of configuration (differences between the filesystem configuration and database configuration).","title":"config:status"},{"location":"commands/10.x/config_status/#examples","text":"drush config:status . Display configuration items that need to be synchronized. drush config:status --state=Identical . Display configuration items that are in default state. drush config:status --state='Only in sync dir' --prefix=node.type. . Display all content types that would be created in active storage on configuration import. drush config:status --state=Any --format=list . List all config names.","title":"Examples"},{"location":"commands/10.x/config_status/#options","text":"--state[=STATE] . A comma-separated list of states to filter results. [default: Only in DB,Only in sync dir,Different ] --prefix=PREFIX . Prefix The config prefix. For example, system . No prefix will return all names in the system. --label=LABEL . A config directory label (i.e. a key in $config_directories array in settings.php). --format=FORMAT . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Name (name), State (state) [default: name,state ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression","title":"Options"},{"location":"commands/10.x/config_status/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/config_status/#aliases","text":"cst config-status Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/core_cron/","text":"core:cron \u00b6 Run all cron hooks in all active modules for specified site. Topics \u00b6 Crontab instructions for running your Drupal cron tasks via drush cron . (docs:cron) Aliases \u00b6 cron core-cron Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"core:cron"},{"location":"commands/10.x/core_cron/#corecron","text":"Run all cron hooks in all active modules for specified site.","title":"core:cron"},{"location":"commands/10.x/core_cron/#topics","text":"Crontab instructions for running your Drupal cron tasks via drush cron . (docs:cron)","title":"Topics"},{"location":"commands/10.x/core_cron/#aliases","text":"cron core-cron Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/core_edit/","text":"core:edit \u00b6 Edit drushrc, site alias, and Drupal settings.php files. Examples \u00b6 drush core:config . Pick from a list of config/alias/settings files. Open selected in editor. drush --bg core-config . Return to shell prompt as soon as the editor window opens. drush core:config etc . Edit the global configuration file. drush core:config demo.alia . Edit a particular alias file. drush core:config sett . Edit settings.php for the current Drupal site. drush core:config --choice=2 . Edit the second file in the choice list. Arguments \u00b6 [--filter] . A substring for filtering the list of files. Omit this argument to choose from loaded files. Options \u00b6 --editor[=EDITOR] . A string of bash which launches user's preferred text editor. Defaults to ${VISUAL-${EDITOR-vi}} . --bg . Launch editor in background process. Aliases \u00b6 conf config core-edit Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"core:edit"},{"location":"commands/10.x/core_edit/#coreedit","text":"Edit drushrc, site alias, and Drupal settings.php files.","title":"core:edit"},{"location":"commands/10.x/core_edit/#examples","text":"drush core:config . Pick from a list of config/alias/settings files. Open selected in editor. drush --bg core-config . Return to shell prompt as soon as the editor window opens. drush core:config etc . Edit the global configuration file. drush core:config demo.alia . Edit a particular alias file. drush core:config sett . Edit settings.php for the current Drupal site. drush core:config --choice=2 . Edit the second file in the choice list.","title":"Examples"},{"location":"commands/10.x/core_edit/#arguments","text":"[--filter] . A substring for filtering the list of files. Omit this argument to choose from loaded files.","title":"Arguments"},{"location":"commands/10.x/core_edit/#options","text":"--editor[=EDITOR] . A string of bash which launches user's preferred text editor. Defaults to ${VISUAL-${EDITOR-vi}} . --bg . Launch editor in background process.","title":"Options"},{"location":"commands/10.x/core_edit/#aliases","text":"conf config core-edit Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/core_init/","text":"core:init \u00b6 Enrich the bash startup file with bash aliases and a smart command prompt. Examples \u00b6 core-init --edit . Enrich Bash and open drush config file in editor. core-init --edit --bg . Return to shell prompt as soon as the editor window opens Options \u00b6 --edit . Open the new config file in an editor. --add-path[=ADD-PATH] . Always add Drush to the $PATH in the user's .bashrc file, even if it is already in the $PATH. Use --no-add-path to skip updating .bashrc with the Drush $PATH. Default is to update .bashrc only if Drush is not already in the $PATH. --editor[=EDITOR] . A string of bash which launches user's preferred text editor. Defaults to ${VISUAL-${EDITOR-vi}} . --bg . Launch editor in background process. Aliases \u00b6 init core-init Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"core:init"},{"location":"commands/10.x/core_init/#coreinit","text":"Enrich the bash startup file with bash aliases and a smart command prompt.","title":"core:init"},{"location":"commands/10.x/core_init/#examples","text":"core-init --edit . Enrich Bash and open drush config file in editor. core-init --edit --bg . Return to shell prompt as soon as the editor window opens","title":"Examples"},{"location":"commands/10.x/core_init/#options","text":"--edit . Open the new config file in an editor. --add-path[=ADD-PATH] . Always add Drush to the $PATH in the user's .bashrc file, even if it is already in the $PATH. Use --no-add-path to skip updating .bashrc with the Drush $PATH. Default is to update .bashrc only if Drush is not already in the $PATH. --editor[=EDITOR] . A string of bash which launches user's preferred text editor. Defaults to ${VISUAL-${EDITOR-vi}} . --bg . Launch editor in background process.","title":"Options"},{"location":"commands/10.x/core_init/#aliases","text":"init core-init Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/core_requirements/","text":"core:requirements \u00b6 Information about things that may be wrong in your Drupal installation. Examples \u00b6 drush core:requirements . Show all status lines from the Status Report admin page. drush core:requirements --severity=2 . Show only the red lines from the Status Report admin page. Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --severity[=SEVERITY] . Only show status report messages with a severity greater than or equal to the specified value. [default: -1 ] --ignore[=IGNORE] . Comma-separated list of requirements to remove from output. Run with --format=yaml to see key values to use. --fields=FIELDS . Available fields: Title (title), Severity (severity), SID (sid), Description (description), Summary (value) [default: title,severity,value ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 status-report rq core-requirements Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"core:requirements"},{"location":"commands/10.x/core_requirements/#corerequirements","text":"Information about things that may be wrong in your Drupal installation.","title":"core:requirements"},{"location":"commands/10.x/core_requirements/#examples","text":"drush core:requirements . Show all status lines from the Status Report admin page. drush core:requirements --severity=2 . Show only the red lines from the Status Report admin page.","title":"Examples"},{"location":"commands/10.x/core_requirements/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --severity[=SEVERITY] . Only show status report messages with a severity greater than or equal to the specified value. [default: -1 ] --ignore[=IGNORE] . Comma-separated list of requirements to remove from output. Run with --format=yaml to see key values to use. --fields=FIELDS . Available fields: Title (title), Severity (severity), SID (sid), Description (description), Summary (value) [default: title,severity,value ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression","title":"Options"},{"location":"commands/10.x/core_requirements/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/core_requirements/#aliases","text":"status-report rq core-requirements Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/core_rsync/","text":"core:rsync \u00b6 Rsync Drupal code or files to/from another server using ssh. Examples \u00b6 drush rsync @dev @stage . Rsync Drupal root from Drush alias dev to the alias stage. drush rsync ./ @stage:%files/img . Rsync all files in the current directory to the img directory in the file storage folder on the Drush alias stage. drush rsync @dev @stage -- --exclude=*.sql --delete . Rsync Drupal root from the Drush alias dev to the alias stage, excluding all .sql files and delete all files on the destination that are no longer on the source. drush rsync @dev @stage --ssh-options=\"-o StrictHostKeyChecking=no\" -- --delete . Customize how rsync connects with remote host via SSH. rsync options like --delete are placed after a --. Arguments \u00b6 --source . A site alias and optional path. See rsync documentation and example.site.yml. --target . A site alias and optional path. See rsync documentation and example.site.yml. [--extra]... . Additional parameters after the ssh statement. Options \u00b6 --exclude-paths=EXCLUDE-PATHS . List of paths to exclude, seperated by : (Unix-based systems) or ; (Windows). --include-paths=INCLUDE-PATHS . List of paths to include, seperated by : (Unix-based systems) or ; (Windows). --mode[=MODE] . The unary flags to pass to rsync; --mode=rultz implies rsync -rultz. Default is -akz. [default: akz ] --ssh-options=SSH-OPTIONS . A string appended to ssh command during rsync, sql-sync, etc. Topics \u00b6 Creating site aliases for running Drush on remote sites. (docs:aliases) Aliases \u00b6 rsync core-rsync Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"core:rsync"},{"location":"commands/10.x/core_rsync/#corersync","text":"Rsync Drupal code or files to/from another server using ssh.","title":"core:rsync"},{"location":"commands/10.x/core_rsync/#examples","text":"drush rsync @dev @stage . Rsync Drupal root from Drush alias dev to the alias stage. drush rsync ./ @stage:%files/img . Rsync all files in the current directory to the img directory in the file storage folder on the Drush alias stage. drush rsync @dev @stage -- --exclude=*.sql --delete . Rsync Drupal root from the Drush alias dev to the alias stage, excluding all .sql files and delete all files on the destination that are no longer on the source. drush rsync @dev @stage --ssh-options=\"-o StrictHostKeyChecking=no\" -- --delete . Customize how rsync connects with remote host via SSH. rsync options like --delete are placed after a --.","title":"Examples"},{"location":"commands/10.x/core_rsync/#arguments","text":"--source . A site alias and optional path. See rsync documentation and example.site.yml. --target . A site alias and optional path. See rsync documentation and example.site.yml. [--extra]... . Additional parameters after the ssh statement.","title":"Arguments"},{"location":"commands/10.x/core_rsync/#options","text":"--exclude-paths=EXCLUDE-PATHS . List of paths to exclude, seperated by : (Unix-based systems) or ; (Windows). --include-paths=INCLUDE-PATHS . List of paths to include, seperated by : (Unix-based systems) or ; (Windows). --mode[=MODE] . The unary flags to pass to rsync; --mode=rultz implies rsync -rultz. Default is -akz. [default: akz ] --ssh-options=SSH-OPTIONS . A string appended to ssh command during rsync, sql-sync, etc.","title":"Options"},{"location":"commands/10.x/core_rsync/#topics","text":"Creating site aliases for running Drush on remote sites. (docs:aliases)","title":"Topics"},{"location":"commands/10.x/core_rsync/#aliases","text":"rsync core-rsync Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/core_status/","text":"core:status \u00b6 An overview of the environment - Drush and Drupal. Examples \u00b6 drush core-status --field=files . Emit just one field, not all the default fields. drush core-status --fields=* . Emit all fields, not just the default ones. Arguments \u00b6 [--filter] . A field to filter on. @deprecated - use --field option instead. Options \u00b6 --project=PROJECT . A comma delimited list of projects. Their paths will be added to path-aliases section. --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Drupal version (drupal-version), Site URI (uri), DB driver (db-driver), DB hostname (db-hostname), DB port (db-port), DB username (db-username), DB password (db-password), DB name (db-name), Database (db-status), Drupal bootstrap (bootstrap), Default theme (theme), Admin theme (admin-theme), PHP binary (php-bin), PHP config (php-conf), PHP OS (php-os), Drush script (drush-script), Drush version (drush-version), Drush temp (drush-temp), Drush cache folder (drush-cache-directory), Drush configs (drush-conf), Drush aliases (drush-alias-files), Alias search paths (alias-searchpaths), Install profile (install-profile), Drupal root (root), Drupal Settings (drupal-settings-file), Site path (site-path), Site path (site), Themes path (themes), Modules path (modules), Files, Public (files), Files, Private (private), Files, Temp (temp), Drupal config (config-sync), Files, Public (files-path), Files, Temp (temp-path), Other paths (%paths) [default: drupal-version,uri,db-driver,db-hostname,db-port,db-username,db-name,db-status,bootstrap,theme,admin-theme,php-bin,php-conf,php-os,drush-script,drush-version,drush-temp,drush-conf,install-profile,root,site,files,private,temp ] --field=FIELD . Select just one field, and force format to 'string'. Topics \u00b6 README.md (docs:readme) Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 status st core-status Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"core:status"},{"location":"commands/10.x/core_status/#corestatus","text":"An overview of the environment - Drush and Drupal.","title":"core:status"},{"location":"commands/10.x/core_status/#examples","text":"drush core-status --field=files . Emit just one field, not all the default fields. drush core-status --fields=* . Emit all fields, not just the default ones.","title":"Examples"},{"location":"commands/10.x/core_status/#arguments","text":"[--filter] . A field to filter on. @deprecated - use --field option instead.","title":"Arguments"},{"location":"commands/10.x/core_status/#options","text":"--project=PROJECT . A comma delimited list of projects. Their paths will be added to path-aliases section. --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Drupal version (drupal-version), Site URI (uri), DB driver (db-driver), DB hostname (db-hostname), DB port (db-port), DB username (db-username), DB password (db-password), DB name (db-name), Database (db-status), Drupal bootstrap (bootstrap), Default theme (theme), Admin theme (admin-theme), PHP binary (php-bin), PHP config (php-conf), PHP OS (php-os), Drush script (drush-script), Drush version (drush-version), Drush temp (drush-temp), Drush cache folder (drush-cache-directory), Drush configs (drush-conf), Drush aliases (drush-alias-files), Alias search paths (alias-searchpaths), Install profile (install-profile), Drupal root (root), Drupal Settings (drupal-settings-file), Site path (site-path), Site path (site), Themes path (themes), Modules path (modules), Files, Public (files), Files, Private (private), Files, Temp (temp), Drupal config (config-sync), Files, Public (files-path), Files, Temp (temp-path), Other paths (%paths) [default: drupal-version,uri,db-driver,db-hostname,db-port,db-username,db-name,db-status,bootstrap,theme,admin-theme,php-bin,php-conf,php-os,drush-script,drush-version,drush-temp,drush-conf,install-profile,root,site,files,private,temp ] --field=FIELD . Select just one field, and force format to 'string'.","title":"Options"},{"location":"commands/10.x/core_status/#topics","text":"README.md (docs:readme) Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/core_status/#aliases","text":"status st core-status Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/core_topic/","text":"core:topic \u00b6 Read detailed documentation on a given topic. Examples \u00b6 drush topic . Pick from all available topics. drush topic docs-repl . Show documentation for the Drush interactive shell drush docs:r . Filter topics for those starting with 'docs-r'. Arguments \u00b6 --topic_name . The name of the topic you wish to view. If omitted, list all topic descriptions (and names in parenthesis). Topics \u00b6 README.md (docs:readme) Aliases \u00b6 topic core-topic Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"core:topic"},{"location":"commands/10.x/core_topic/#coretopic","text":"Read detailed documentation on a given topic.","title":"core:topic"},{"location":"commands/10.x/core_topic/#examples","text":"drush topic . Pick from all available topics. drush topic docs-repl . Show documentation for the Drush interactive shell drush docs:r . Filter topics for those starting with 'docs-r'.","title":"Examples"},{"location":"commands/10.x/core_topic/#arguments","text":"--topic_name . The name of the topic you wish to view. If omitted, list all topic descriptions (and names in parenthesis).","title":"Arguments"},{"location":"commands/10.x/core_topic/#topics","text":"README.md (docs:readme)","title":"Topics"},{"location":"commands/10.x/core_topic/#aliases","text":"topic core-topic Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/deploy/","text":"deploy \u00b6 Run several commands after performing a code deployment. Examples \u00b6 drush deploy -v -y . Run updates with verbose logging and accept all prompts. Topics \u00b6 Deploy command for Drupal. (docs:deploy) Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"deploy"},{"location":"commands/10.x/deploy/#deploy","text":"Run several commands after performing a code deployment.","title":"deploy"},{"location":"commands/10.x/deploy/#examples","text":"drush deploy -v -y . Run updates with verbose logging and accept all prompts.","title":"Examples"},{"location":"commands/10.x/deploy/#topics","text":"Deploy command for Drupal. (docs:deploy) Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Topics"},{"location":"commands/10.x/deploy_hook-status/","text":"deploy:hook-status \u00b6 Prints information about pending deploy update hooks. Examples \u00b6 deploy:hook-status . Prints information about pending deploy hooks. Options \u00b6 --format=FORMAT . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Module (module), Hook (hook), Description (description) [default: module,hook,description ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression Topics \u00b6 Deploy command for Drupal. (docs:deploy) Output formatters and filters: control the command output (docs:output-formats-filters) Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"deploy:hook-status"},{"location":"commands/10.x/deploy_hook-status/#deployhook-status","text":"Prints information about pending deploy update hooks.","title":"deploy:hook-status"},{"location":"commands/10.x/deploy_hook-status/#examples","text":"deploy:hook-status . Prints information about pending deploy hooks.","title":"Examples"},{"location":"commands/10.x/deploy_hook-status/#options","text":"--format=FORMAT . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Module (module), Hook (hook), Description (description) [default: module,hook,description ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression","title":"Options"},{"location":"commands/10.x/deploy_hook-status/#topics","text":"Deploy command for Drupal. (docs:deploy) Output formatters and filters: control the command output (docs:output-formats-filters) Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Topics"},{"location":"commands/10.x/deploy_hook/","text":"deploy:hook \u00b6 Run pending deploy update hooks. Examples \u00b6 deploy:hook . Run pending deploy hooks. Topics \u00b6 Deploy command for Drupal. (docs:deploy) Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"deploy:hook"},{"location":"commands/10.x/deploy_hook/#deployhook","text":"Run pending deploy update hooks.","title":"deploy:hook"},{"location":"commands/10.x/deploy_hook/#examples","text":"deploy:hook . Run pending deploy hooks.","title":"Examples"},{"location":"commands/10.x/deploy_hook/#topics","text":"Deploy command for Drupal. (docs:deploy) Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Topics"},{"location":"commands/10.x/drupal_directory/","text":"drupal:directory \u00b6 Return the filesystem path for modules/themes and other key folders. Examples \u00b6 cd $(drush dd devel) . Navigate into the devel module directory cd $(drush dd) . Navigate to the root of your Drupal site cd $(drush dd files) . Navigate to the files directory. drush dd @alias:%files . Print the path to the files directory on the site @alias. edit $(drush dd devel)/devel.module . Open devel module in your editor Arguments \u00b6 [--target] . A module/theme name, or special names like root, files, private, or an alias:path string such as @alias:%files. Options \u00b6 --local-only . Reject any target that specifies a remote site. Aliases \u00b6 dd drupal-directory Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"drupal:directory"},{"location":"commands/10.x/drupal_directory/#drupaldirectory","text":"Return the filesystem path for modules/themes and other key folders.","title":"drupal:directory"},{"location":"commands/10.x/drupal_directory/#examples","text":"cd $(drush dd devel) . Navigate into the devel module directory cd $(drush dd) . Navigate to the root of your Drupal site cd $(drush dd files) . Navigate to the files directory. drush dd @alias:%files . Print the path to the files directory on the site @alias. edit $(drush dd devel)/devel.module . Open devel module in your editor","title":"Examples"},{"location":"commands/10.x/drupal_directory/#arguments","text":"[--target] . A module/theme name, or special names like root, files, private, or an alias:path string such as @alias:%files.","title":"Arguments"},{"location":"commands/10.x/drupal_directory/#options","text":"--local-only . Reject any target that specifies a remote site.","title":"Options"},{"location":"commands/10.x/drupal_directory/#aliases","text":"dd drupal-directory Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/entity_delete/","text":"entity:delete \u00b6 Delete content entities. To delete configuration entities, see config:delete command. Examples \u00b6 drush entity:delete node --bundle=article . Delete all article entities. drush entity:delete shortcut . Delete all shortcut entities. drush entity:delete node 22,24 . Delete nodes 22 and 24. drush entity:delete node --exclude=9,14,81 . Delete all nodes except node 9, 14 and 81. drush entity:delete user . Delete all users except uid=1. Arguments \u00b6 --entity_type . An entity machine name. [--ids] . A comma delimited list of Ids. Options \u00b6 --bundle=BUNDLE . Restrict deletion to the specified bundle. Ignored when ids is specified. --exclude=EXCLUDE . Exclude certain entities from deletion. Ignored when ids is specified. Aliases \u00b6 edel entity-delete Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"entity:delete"},{"location":"commands/10.x/entity_delete/#entitydelete","text":"Delete content entities. To delete configuration entities, see config:delete command.","title":"entity:delete"},{"location":"commands/10.x/entity_delete/#examples","text":"drush entity:delete node --bundle=article . Delete all article entities. drush entity:delete shortcut . Delete all shortcut entities. drush entity:delete node 22,24 . Delete nodes 22 and 24. drush entity:delete node --exclude=9,14,81 . Delete all nodes except node 9, 14 and 81. drush entity:delete user . Delete all users except uid=1.","title":"Examples"},{"location":"commands/10.x/entity_delete/#arguments","text":"--entity_type . An entity machine name. [--ids] . A comma delimited list of Ids.","title":"Arguments"},{"location":"commands/10.x/entity_delete/#options","text":"--bundle=BUNDLE . Restrict deletion to the specified bundle. Ignored when ids is specified. --exclude=EXCLUDE . Exclude certain entities from deletion. Ignored when ids is specified.","title":"Options"},{"location":"commands/10.x/entity_delete/#aliases","text":"edel entity-delete Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/entity_updates/","text":"entity:updates \u00b6 Apply pending entity schema updates. Examples \u00b6 drush updatedb:status --entity-updates | grep entity-update . Use updatedb:status to detect pending updates. Options \u00b6 --cache-clear[=CACHE-CLEAR] . Set to 0 to suppress normal cache clearing; the caller should then clear if needed. [default: 1 ] --no-cache-clear . Negate --cache-clear option. Aliases \u00b6 entup entity-updates Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"entity:updates"},{"location":"commands/10.x/entity_updates/#entityupdates","text":"Apply pending entity schema updates.","title":"entity:updates"},{"location":"commands/10.x/entity_updates/#examples","text":"drush updatedb:status --entity-updates | grep entity-update . Use updatedb:status to detect pending updates.","title":"Examples"},{"location":"commands/10.x/entity_updates/#options","text":"--cache-clear[=CACHE-CLEAR] . Set to 0 to suppress normal cache clearing; the caller should then clear if needed. [default: 1 ] --no-cache-clear . Negate --cache-clear option.","title":"Options"},{"location":"commands/10.x/entity_updates/#aliases","text":"entup entity-updates Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/generate/","text":"generate \u00b6 Generate boilerplate code for modules/plugins/services etc. Drush asks questions so that the generated code is as polished as possible. After generating, Drush lists the files that were created. Examples \u00b6 drush generate . Pick from available generators and then run it. drush generate controller . Generate a controller class for your module. drush generate drush-command-file . Generate a Drush commandfile for your module. Arguments \u00b6 [--generator] . A generator name. Omit to pick from available Generators. Options \u00b6 --answers=ANSWERS . A JSON string containing pairs of question and answers. --directory=DIRECTORY . Absolute path to a base directory for file writing. Topics \u00b6 Instructions on creating your own Drush Generators. (docs:generators) Aliases \u00b6 gen Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"generate"},{"location":"commands/10.x/generate/#generate","text":"Generate boilerplate code for modules/plugins/services etc. Drush asks questions so that the generated code is as polished as possible. After generating, Drush lists the files that were created.","title":"generate"},{"location":"commands/10.x/generate/#examples","text":"drush generate . Pick from available generators and then run it. drush generate controller . Generate a controller class for your module. drush generate drush-command-file . Generate a Drush commandfile for your module.","title":"Examples"},{"location":"commands/10.x/generate/#arguments","text":"[--generator] . A generator name. Omit to pick from available Generators.","title":"Arguments"},{"location":"commands/10.x/generate/#options","text":"--answers=ANSWERS . A JSON string containing pairs of question and answers. --directory=DIRECTORY . Absolute path to a base directory for file writing.","title":"Options"},{"location":"commands/10.x/generate/#topics","text":"Instructions on creating your own Drush Generators. (docs:generators)","title":"Topics"},{"location":"commands/10.x/generate/#aliases","text":"gen Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/help/","text":"help \u00b6 Display usage details for a command. Examples \u00b6 drush help pm-uninstall . Show help for a command. drush help pmu . Show help for a command using an alias. drush help --format=xml . Show all available commands in XML format. drush help --format=json . All available commands, in JSON format. Arguments \u00b6 [--command_name] . A command name Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,tsv,var_dump,var_export,xml,yaml [default: helpcli ] --include-field-labels . --table-style[=TABLE-STYLE] . [default: compact ] Topics \u00b6 README.md (docs:readme) Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"help"},{"location":"commands/10.x/help/#help","text":"Display usage details for a command.","title":"help"},{"location":"commands/10.x/help/#examples","text":"drush help pm-uninstall . Show help for a command. drush help pmu . Show help for a command using an alias. drush help --format=xml . Show all available commands in XML format. drush help --format=json . All available commands, in JSON format.","title":"Examples"},{"location":"commands/10.x/help/#arguments","text":"[--command_name] . A command name","title":"Arguments"},{"location":"commands/10.x/help/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,tsv,var_dump,var_export,xml,yaml [default: helpcli ] --include-field-labels . --table-style[=TABLE-STYLE] . [default: compact ]","title":"Options"},{"location":"commands/10.x/help/#topics","text":"README.md (docs:readme) Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Topics"},{"location":"commands/10.x/image_derive/","text":"image:derive \u00b6 Create an image derivative. Examples \u00b6 drush image:derive thumbnail core/themes/bartik/screenshot.png . Save thumbnail sized derivative of logo image. Arguments \u00b6 --style_name . An image style machine name. --source . Path to a source image. Optionally prepend stream wrapper scheme. Aliases \u00b6 id image-derive Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"image:derive"},{"location":"commands/10.x/image_derive/#imagederive","text":"Create an image derivative.","title":"image:derive"},{"location":"commands/10.x/image_derive/#examples","text":"drush image:derive thumbnail core/themes/bartik/screenshot.png . Save thumbnail sized derivative of logo image.","title":"Examples"},{"location":"commands/10.x/image_derive/#arguments","text":"--style_name . An image style machine name. --source . Path to a source image. Optionally prepend stream wrapper scheme.","title":"Arguments"},{"location":"commands/10.x/image_derive/#aliases","text":"id image-derive Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/image_flush/","text":"image:flush \u00b6 Flush all derived images for a given style. Examples \u00b6 drush image:flush . Pick an image style and then delete its derivatives. drush image:flush thumbnail,large . Delete all thumbnail and large derivatives. drush image:flush --all . Flush all derived images. They will be regenerated on demand. Arguments \u00b6 --style_names . A comma delimited list of image style machine names. If not provided, user may choose from a list of names. Options \u00b6 --all . Flush all derived images Aliases \u00b6 if image-flush Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"image:flush"},{"location":"commands/10.x/image_flush/#imageflush","text":"Flush all derived images for a given style.","title":"image:flush"},{"location":"commands/10.x/image_flush/#examples","text":"drush image:flush . Pick an image style and then delete its derivatives. drush image:flush thumbnail,large . Delete all thumbnail and large derivatives. drush image:flush --all . Flush all derived images. They will be regenerated on demand.","title":"Examples"},{"location":"commands/10.x/image_flush/#arguments","text":"--style_names . A comma delimited list of image style machine names. If not provided, user may choose from a list of names.","title":"Arguments"},{"location":"commands/10.x/image_flush/#options","text":"--all . Flush all derived images","title":"Options"},{"location":"commands/10.x/image_flush/#aliases","text":"if image-flush Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/jn_get/","text":"jn:get \u00b6 Execute a JSONAPI request. Examples \u00b6 drush jn:get jsonapi/node/article . Get a list of articles back as JSON. drush jn:get jsonapi/node/article | jq . Pretty print JSON by piping to jq. See https://stedolan.github.io/jq/ for lots more jq features. Arguments \u00b6 --url . The JSONAPI URL to request. Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,tsv,var_dump,var_export,xml,yaml [default: json ] --fields=FIELDS . Limit output to only the listed elements. Name top-level elements by key, e.g. \"--fields=name,date\", or use dot notation to select a nested element, e.g. \"--fields=a.b.c as example\". --field=FIELD . Select just one field, and force format to 'string'. Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"jn:get"},{"location":"commands/10.x/jn_get/#jnget","text":"Execute a JSONAPI request.","title":"jn:get"},{"location":"commands/10.x/jn_get/#examples","text":"drush jn:get jsonapi/node/article . Get a list of articles back as JSON. drush jn:get jsonapi/node/article | jq . Pretty print JSON by piping to jq. See https://stedolan.github.io/jq/ for lots more jq features.","title":"Examples"},{"location":"commands/10.x/jn_get/#arguments","text":"--url . The JSONAPI URL to request.","title":"Arguments"},{"location":"commands/10.x/jn_get/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,tsv,var_dump,var_export,xml,yaml [default: json ] --fields=FIELDS . Limit output to only the listed elements. Name top-level elements by key, e.g. \"--fields=name,date\", or use dot notation to select a nested element, e.g. \"--fields=a.b.c as example\". --field=FIELD . Select just one field, and force format to 'string'. Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Options"},{"location":"commands/10.x/list/","text":"list \u00b6 List available commands. Examples \u00b6 drush list . List all commands. drush list --filter=devel_generate . Show only commands starting with devel- drush list --format=xml . List all commands in Symfony compatible xml format. Options \u00b6 --format[=FORMAT] . [default: listcli ] --raw . Show a simple table of command names and descriptions. --filter=FILTER . Restrict command list to those commands defined in the specified file. Omit value to choose from a list of names. Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"list"},{"location":"commands/10.x/list/#list","text":"List available commands.","title":"list"},{"location":"commands/10.x/list/#examples","text":"drush list . List all commands. drush list --filter=devel_generate . Show only commands starting with devel- drush list --format=xml . List all commands in Symfony compatible xml format.","title":"Examples"},{"location":"commands/10.x/list/#options","text":"--format[=FORMAT] . [default: listcli ] --raw . Show a simple table of command names and descriptions. --filter=FILTER . Restrict command list to those commands defined in the specified file. Omit value to choose from a list of names. Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Options"},{"location":"commands/10.x/locale_check/","text":"locale:check \u00b6 Checks for available translation updates. Aliases \u00b6 locale-check Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"locale:check"},{"location":"commands/10.x/locale_check/#localecheck","text":"Checks for available translation updates.","title":"locale:check"},{"location":"commands/10.x/locale_check/#aliases","text":"locale-check Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/locale_export/","text":"locale:export \u00b6 Exports to a gettext translation file. See Drupal Core: \\Drupal\\locale\\Form\\ExportForm::submitForm Examples \u00b6 drush locale:export nl > nl.po . Export the Dutch translations with all types. drush locale:export nl --types=customized,not-customized > nl.po . Export the Dutch customized and not customized translations. drush locale:export --template > drupal.pot . Export the source strings only as template file for translation. Arguments \u00b6 [--langcode] . The language code of the exported translations. Options \u00b6 --template . POT file output of extracted source texts to be translated. --types=TYPES . String types to include, defaults to all types. Recognized values: not-customized , customized , not-translated . Aliases \u00b6 locale-export Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"locale:export"},{"location":"commands/10.x/locale_export/#localeexport","text":"Exports to a gettext translation file. See Drupal Core: \\Drupal\\locale\\Form\\ExportForm::submitForm","title":"locale:export"},{"location":"commands/10.x/locale_export/#examples","text":"drush locale:export nl > nl.po . Export the Dutch translations with all types. drush locale:export nl --types=customized,not-customized > nl.po . Export the Dutch customized and not customized translations. drush locale:export --template > drupal.pot . Export the source strings only as template file for translation.","title":"Examples"},{"location":"commands/10.x/locale_export/#arguments","text":"[--langcode] . The language code of the exported translations.","title":"Arguments"},{"location":"commands/10.x/locale_export/#options","text":"--template . POT file output of extracted source texts to be translated. --types=TYPES . String types to include, defaults to all types. Recognized values: not-customized , customized , not-translated .","title":"Options"},{"location":"commands/10.x/locale_export/#aliases","text":"locale-export Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/locale_import/","text":"locale:import \u00b6 Imports to a gettext translation file. Examples \u00b6 drush locale-import nl drupal-8.4.2.nl.po . Import the Dutch drupal core translation. drush locale-import --type=customized nl drupal-8.4.2.nl.po . Import the Dutch drupal core translation. Treat imported strings as custom translations. drush locale-import --override=none nl drupal-8.4.2.nl.po . Import the Dutch drupal core translation. Don't overwrite existing translations. Only append new translations. drush locale-import --override=not-customized nl drupal-8.4.2.nl.po . Import the Dutch drupal core translation. Only override non-customized translations, customized translations are kept. drush locale-import nl custom-translations.po --type=customized --override=all . Import customized Dutch translations and override any existing translation. Arguments \u00b6 --langcode . The language code of the imported translations. --file . Path and file name of the gettext file. Options \u00b6 --type[=TYPE] . The type of translations to be imported. Recognized values: customized , not-customized [default: not-customized ] --override=OVERRIDE . Whether and how imported strings will override existing translations. Defaults to the Import behavior configured in the admin interface. Recognized values: none , customized , not-customized , all , Aliases \u00b6 locale-import Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"locale:import"},{"location":"commands/10.x/locale_import/#localeimport","text":"Imports to a gettext translation file.","title":"locale:import"},{"location":"commands/10.x/locale_import/#examples","text":"drush locale-import nl drupal-8.4.2.nl.po . Import the Dutch drupal core translation. drush locale-import --type=customized nl drupal-8.4.2.nl.po . Import the Dutch drupal core translation. Treat imported strings as custom translations. drush locale-import --override=none nl drupal-8.4.2.nl.po . Import the Dutch drupal core translation. Don't overwrite existing translations. Only append new translations. drush locale-import --override=not-customized nl drupal-8.4.2.nl.po . Import the Dutch drupal core translation. Only override non-customized translations, customized translations are kept. drush locale-import nl custom-translations.po --type=customized --override=all . Import customized Dutch translations and override any existing translation.","title":"Examples"},{"location":"commands/10.x/locale_import/#arguments","text":"--langcode . The language code of the imported translations. --file . Path and file name of the gettext file.","title":"Arguments"},{"location":"commands/10.x/locale_import/#options","text":"--type[=TYPE] . The type of translations to be imported. Recognized values: customized , not-customized [default: not-customized ] --override=OVERRIDE . Whether and how imported strings will override existing translations. Defaults to the Import behavior configured in the admin interface. Recognized values: none , customized , not-customized , all ,","title":"Options"},{"location":"commands/10.x/locale_import/#aliases","text":"locale-import Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/locale_update/","text":"locale:update \u00b6 Imports the available translation updates. Options \u00b6 --langcodes=LANGCODES . A comma-separated list of language codes to update. If omitted, all translations will be updated. Aliases \u00b6 locale-update Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"locale:update"},{"location":"commands/10.x/locale_update/#localeupdate","text":"Imports the available translation updates.","title":"locale:update"},{"location":"commands/10.x/locale_update/#options","text":"--langcodes=LANGCODES . A comma-separated list of language codes to update. If omitted, all translations will be updated.","title":"Options"},{"location":"commands/10.x/locale_update/#aliases","text":"locale-update Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/mk_docs/","text":"mk:docs \u00b6 Build a Markdown document for each Drush command thats available on a site. This command is an early step when building the www.drush.org static site. Adapt it to build a similar site listing the commands that are available on your site. Also see Drush's Github Actions workflow . Examples \u00b6 drush mk:docs --destination=commands/10.x . Build many .md files in the docs/commands/10.x directory. Arguments \u00b6 --command . The command to execute Options \u00b6 --destination=DESTINATION . The path, relative to 'docs' dir, where command docs should be written. Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"mk:docs"},{"location":"commands/10.x/mk_docs/#mkdocs","text":"Build a Markdown document for each Drush command thats available on a site. This command is an early step when building the www.drush.org static site. Adapt it to build a similar site listing the commands that are available on your site. Also see Drush's Github Actions workflow .","title":"mk:docs"},{"location":"commands/10.x/mk_docs/#examples","text":"drush mk:docs --destination=commands/10.x . Build many .md files in the docs/commands/10.x directory.","title":"Examples"},{"location":"commands/10.x/mk_docs/#arguments","text":"--command . The command to execute","title":"Arguments"},{"location":"commands/10.x/mk_docs/#options","text":"--destination=DESTINATION . The path, relative to 'docs' dir, where command docs should be written. Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Options"},{"location":"commands/10.x/php_cli/","text":"php:cli \u00b6 Open an interactive shell on a Drupal site. Options \u00b6 --version-history . Use command history based on Drupal version (Default is per site). --cwd=CWD . A directory to change to before launching the shell. Default is the project root directory Topics \u00b6 Drush's PHP Shell. (docs:repl) Aliases \u00b6 php core:cli core-cli Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"php:cli"},{"location":"commands/10.x/php_cli/#phpcli","text":"Open an interactive shell on a Drupal site.","title":"php:cli"},{"location":"commands/10.x/php_cli/#options","text":"--version-history . Use command history based on Drupal version (Default is per site). --cwd=CWD . A directory to change to before launching the shell. Default is the project root directory","title":"Options"},{"location":"commands/10.x/php_cli/#topics","text":"Drush's PHP Shell. (docs:repl)","title":"Topics"},{"location":"commands/10.x/php_cli/#aliases","text":"php core:cli core-cli Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/php_eval/","text":"php:eval \u00b6 Evaluate arbitrary php code after bootstrapping Drupal (if available). Examples \u00b6 drush php:eval '$node = node_load(1); print $node->title;' . Loads node with nid 1 and then prints its title. drush php:eval \"file_unmanaged_copy(\\'$HOME/Pictures/image.jpg\\', \\'public://image.jpg\\');\" . Copies a file whose path is determined by an environment's variable. Use of double quotes so the variable $HOME gets replaced by its value. drush php:eval \"node_access_rebuild();\" . Rebuild node access permissions. Arguments \u00b6 --code . PHP code Options \u00b6 --format[=FORMAT] . [default: var_export ] Aliases \u00b6 eval ev php-eval Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"php:eval"},{"location":"commands/10.x/php_eval/#phpeval","text":"Evaluate arbitrary php code after bootstrapping Drupal (if available).","title":"php:eval"},{"location":"commands/10.x/php_eval/#examples","text":"drush php:eval '$node = node_load(1); print $node->title;' . Loads node with nid 1 and then prints its title. drush php:eval \"file_unmanaged_copy(\\'$HOME/Pictures/image.jpg\\', \\'public://image.jpg\\');\" . Copies a file whose path is determined by an environment's variable. Use of double quotes so the variable $HOME gets replaced by its value. drush php:eval \"node_access_rebuild();\" . Rebuild node access permissions.","title":"Examples"},{"location":"commands/10.x/php_eval/#arguments","text":"--code . PHP code","title":"Arguments"},{"location":"commands/10.x/php_eval/#options","text":"--format[=FORMAT] . [default: var_export ]","title":"Options"},{"location":"commands/10.x/php_eval/#aliases","text":"eval ev php-eval Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/php_script/","text":"php:script \u00b6 Run php a script after a full Drupal bootstrap. A useful alternative to eval command when your php is lengthy or you can't be bothered to figure out bash quoting. If you plan to share a script with others, consider making a full Drush command instead, since that's more self-documenting. Drush provides commandline options to the script via a variable called $extra . Examples \u00b6 drush php:script example --script-path=/path/to/scripts:/another/path . Run a script named example.php from specified paths drush php:script - . Run PHP code from standard input. drush php:script . List all available scripts. drush php:script foo -- apple --cider . Run foo.php script with argument apple and option cider . Note the -- separator. Arguments \u00b6 [--extra]... . Options \u00b6 --format[=FORMAT] . [default: var_export ] --script-path=SCRIPT-PATH . Additional paths to search for scripts, separated by : (Unix-based systems) or ; (Windows). Topics \u00b6 An example Drush script. (docs:script) Aliases \u00b6 scr php-script Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"php:script"},{"location":"commands/10.x/php_script/#phpscript","text":"Run php a script after a full Drupal bootstrap. A useful alternative to eval command when your php is lengthy or you can't be bothered to figure out bash quoting. If you plan to share a script with others, consider making a full Drush command instead, since that's more self-documenting. Drush provides commandline options to the script via a variable called $extra .","title":"php:script"},{"location":"commands/10.x/php_script/#examples","text":"drush php:script example --script-path=/path/to/scripts:/another/path . Run a script named example.php from specified paths drush php:script - . Run PHP code from standard input. drush php:script . List all available scripts. drush php:script foo -- apple --cider . Run foo.php script with argument apple and option cider . Note the -- separator.","title":"Examples"},{"location":"commands/10.x/php_script/#arguments","text":"[--extra]... .","title":"Arguments"},{"location":"commands/10.x/php_script/#options","text":"--format[=FORMAT] . [default: var_export ] --script-path=SCRIPT-PATH . Additional paths to search for scripts, separated by : (Unix-based systems) or ; (Windows).","title":"Options"},{"location":"commands/10.x/php_script/#topics","text":"An example Drush script. (docs:script)","title":"Topics"},{"location":"commands/10.x/php_script/#aliases","text":"scr php-script Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/pm_enable/","text":"pm:enable \u00b6 Enable one or more modules. Arguments \u00b6 [--modules]... . A comma delimited list of modules. Aliases \u00b6 en pm-enable Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"pm:enable"},{"location":"commands/10.x/pm_enable/#pmenable","text":"Enable one or more modules.","title":"pm:enable"},{"location":"commands/10.x/pm_enable/#arguments","text":"[--modules]... . A comma delimited list of modules.","title":"Arguments"},{"location":"commands/10.x/pm_enable/#aliases","text":"en pm-enable Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/pm_list/","text":"pm:list \u00b6 Show a list of available extensions (modules and themes). Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --type[=TYPE] . Only show extensions having a given type. Choices: module, theme. [default: module,theme ] --status[=STATUS] . Only show extensions having a given status. Choices: enabled or disabled. [default: enabled,disabled ] --package=PACKAGE . Only show extensions having a given project packages (e.g. Development). --core . Only show extensions that are in Drupal core. --no-core . Only show extensions that are not provided by Drupal core. --fields=FIELDS . Available fields: Package (package), Name (display_name), Name (name), Type (type), Path (path), Status (status), Version (version) [default: package,display_name,status,version ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 pml pm-list Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"pm:list"},{"location":"commands/10.x/pm_list/#pmlist","text":"Show a list of available extensions (modules and themes).","title":"pm:list"},{"location":"commands/10.x/pm_list/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --type[=TYPE] . Only show extensions having a given type. Choices: module, theme. [default: module,theme ] --status[=STATUS] . Only show extensions having a given status. Choices: enabled or disabled. [default: enabled,disabled ] --package=PACKAGE . Only show extensions having a given project packages (e.g. Development). --core . Only show extensions that are in Drupal core. --no-core . Only show extensions that are not provided by Drupal core. --fields=FIELDS . Available fields: Package (package), Name (display_name), Name (name), Type (type), Path (path), Status (status), Version (version) [default: package,display_name,status,version ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression","title":"Options"},{"location":"commands/10.x/pm_list/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/pm_list/#aliases","text":"pml pm-list Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/pm_security-php/","text":"pm:security-php \u00b6 Check non-Drupal PHP packages for pending security updates. Packages are discovered via composer.lock file. Thanks to https://github.com/FriendsOfPHP/security-advisories and Symfony for providing this service. Examples \u00b6 drush pm:security-php --format=json . Get security data in JSON format. HTTP_PROXY=tcp://localhost:8125 pm:security . Proxy Guzzle requests through an http proxy. Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,tsv,var_dump,var_export,xml,yaml [default: yaml ] --fields=FIELDS . Limit output to only the listed elements. Name top-level elements by key, e.g. \"--fields=name,date\", or use dot notation to select a nested element, e.g. \"--fields=a.b.c as example\". --field=FIELD . Select just one field, and force format to 'string'. Aliases \u00b6 sec-php pm-security-php Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"pm:security-php"},{"location":"commands/10.x/pm_security-php/#pmsecurity-php","text":"Check non-Drupal PHP packages for pending security updates. Packages are discovered via composer.lock file. Thanks to https://github.com/FriendsOfPHP/security-advisories and Symfony for providing this service.","title":"pm:security-php"},{"location":"commands/10.x/pm_security-php/#examples","text":"drush pm:security-php --format=json . Get security data in JSON format. HTTP_PROXY=tcp://localhost:8125 pm:security . Proxy Guzzle requests through an http proxy.","title":"Examples"},{"location":"commands/10.x/pm_security-php/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,tsv,var_dump,var_export,xml,yaml [default: yaml ] --fields=FIELDS . Limit output to only the listed elements. Name top-level elements by key, e.g. \"--fields=name,date\", or use dot notation to select a nested element, e.g. \"--fields=a.b.c as example\". --field=FIELD . Select just one field, and force format to 'string'.","title":"Options"},{"location":"commands/10.x/pm_security-php/#aliases","text":"sec-php pm-security-php Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/pm_security/","text":"pm:security \u00b6 Check Drupal Composer packages for pending security updates. This uses the Drupal security advisories package to determine if updates are available. Examples \u00b6 drush pm:security --format=json . Get security data in JSON format. HTTP_PROXY=tcp://localhost:8125 pm:security . Proxy Guzzle requests through an http proxy. Options \u00b6 --format=FORMAT . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Name (name), Installed Version (version) [default: name,version ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 sec pm-security Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"pm:security"},{"location":"commands/10.x/pm_security/#pmsecurity","text":"Check Drupal Composer packages for pending security updates. This uses the Drupal security advisories package to determine if updates are available.","title":"pm:security"},{"location":"commands/10.x/pm_security/#examples","text":"drush pm:security --format=json . Get security data in JSON format. HTTP_PROXY=tcp://localhost:8125 pm:security . Proxy Guzzle requests through an http proxy.","title":"Examples"},{"location":"commands/10.x/pm_security/#options","text":"--format=FORMAT . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Name (name), Installed Version (version) [default: name,version ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression","title":"Options"},{"location":"commands/10.x/pm_security/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/pm_security/#aliases","text":"sec pm-security Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/pm_uninstall/","text":"pm:uninstall \u00b6 Uninstall one or more modules and their dependent modules. Arguments \u00b6 [--modules]... . A comma delimited list of modules. Aliases \u00b6 pmu pm-uninstall Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"pm:uninstall"},{"location":"commands/10.x/pm_uninstall/#pmuninstall","text":"Uninstall one or more modules and their dependent modules.","title":"pm:uninstall"},{"location":"commands/10.x/pm_uninstall/#arguments","text":"[--modules]... . A comma delimited list of modules.","title":"Arguments"},{"location":"commands/10.x/pm_uninstall/#aliases","text":"pmu pm-uninstall Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/queue_delete/","text":"queue:delete \u00b6 Delete all items in a specific queue. Arguments \u00b6 --name . The name of the queue to run, as defined in either hook_queue_info or hook_cron_queue_info. Aliases \u00b6 queue-delete Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"queue:delete"},{"location":"commands/10.x/queue_delete/#queuedelete","text":"Delete all items in a specific queue.","title":"queue:delete"},{"location":"commands/10.x/queue_delete/#arguments","text":"--name . The name of the queue to run, as defined in either hook_queue_info or hook_cron_queue_info.","title":"Arguments"},{"location":"commands/10.x/queue_delete/#aliases","text":"queue-delete Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/queue_list/","text":"queue:list \u00b6 Returns a list of all defined queues. Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Queue (queue), Items (items), Class (class) --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 queue-list Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"queue:list"},{"location":"commands/10.x/queue_list/#queuelist","text":"Returns a list of all defined queues.","title":"queue:list"},{"location":"commands/10.x/queue_list/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Queue (queue), Items (items), Class (class) --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression","title":"Options"},{"location":"commands/10.x/queue_list/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/queue_list/#aliases","text":"queue-list Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/queue_run/","text":"queue:run \u00b6 Run a specific queue by name. Arguments \u00b6 --name . The name of the queue to run, as defined in either hook_queue_info or hook_cron_queue_info. Options \u00b6 --time-limit=TIME-LIMIT . The maximum number of seconds allowed to run the queue. --items-limit=ITEMS-LIMIT . The maximum number of items allowed to run the queue. --lease-time=LEASE-TIME . The maximum number of seconds that an item remains claimed. Aliases \u00b6 queue-run Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"queue:run"},{"location":"commands/10.x/queue_run/#queuerun","text":"Run a specific queue by name.","title":"queue:run"},{"location":"commands/10.x/queue_run/#arguments","text":"--name . The name of the queue to run, as defined in either hook_queue_info or hook_cron_queue_info.","title":"Arguments"},{"location":"commands/10.x/queue_run/#options","text":"--time-limit=TIME-LIMIT . The maximum number of seconds allowed to run the queue. --items-limit=ITEMS-LIMIT . The maximum number of items allowed to run the queue. --lease-time=LEASE-TIME . The maximum number of seconds that an item remains claimed.","title":"Options"},{"location":"commands/10.x/queue_run/#aliases","text":"queue-run Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/role_create/","text":"role:create \u00b6 Create a new role. Examples \u00b6 drush role:create 'test role' . Create a new role 'test role'. On D8, the human-readable name will be 'Test role'. drush role:create 'test role' 'Test role' . Create a new role with a machine name of 'test role', and a human-readable name of 'Test role'. Arguments \u00b6 --machine_name . The symbolic machine name for the role. [--human_readable_name] . A descriptive name for the role. Aliases \u00b6 rcrt role-create Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"role:create"},{"location":"commands/10.x/role_create/#rolecreate","text":"Create a new role.","title":"role:create"},{"location":"commands/10.x/role_create/#examples","text":"drush role:create 'test role' . Create a new role 'test role'. On D8, the human-readable name will be 'Test role'. drush role:create 'test role' 'Test role' . Create a new role with a machine name of 'test role', and a human-readable name of 'Test role'.","title":"Examples"},{"location":"commands/10.x/role_create/#arguments","text":"--machine_name . The symbolic machine name for the role. [--human_readable_name] . A descriptive name for the role.","title":"Arguments"},{"location":"commands/10.x/role_create/#aliases","text":"rcrt role-create Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/role_delete/","text":"role:delete \u00b6 Delete a new role. Examples \u00b6 drush role:delete 'test role' . Delete the role 'test role'. Arguments \u00b6 --machine_name . The symbolic machine name for the role. Aliases \u00b6 rdel role-delete Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"role:delete"},{"location":"commands/10.x/role_delete/#roledelete","text":"Delete a new role.","title":"role:delete"},{"location":"commands/10.x/role_delete/#examples","text":"drush role:delete 'test role' . Delete the role 'test role'.","title":"Examples"},{"location":"commands/10.x/role_delete/#arguments","text":"--machine_name . The symbolic machine name for the role.","title":"Arguments"},{"location":"commands/10.x/role_delete/#aliases","text":"rdel role-delete Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/role_list/","text":"role:list \u00b6 Display a list of all roles defined on the system. If a role name is provided as an argument, then all of the permissions of that role will be listed. If a permission name is provided as an option, then all of the roles that have been granted that permission will be listed. Examples \u00b6 drush role:list --filter='administer nodes' . Display a list of roles that have the administer nodes permission assigned. Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: yaml ] --fields=FIELDS . Available fields: ID (rid), Role Label (label), Permissions (perms) --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 rls role-list Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"role:list"},{"location":"commands/10.x/role_list/#rolelist","text":"Display a list of all roles defined on the system. If a role name is provided as an argument, then all of the permissions of that role will be listed. If a permission name is provided as an option, then all of the roles that have been granted that permission will be listed.","title":"role:list"},{"location":"commands/10.x/role_list/#examples","text":"drush role:list --filter='administer nodes' . Display a list of roles that have the administer nodes permission assigned.","title":"Examples"},{"location":"commands/10.x/role_list/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: yaml ] --fields=FIELDS . Available fields: ID (rid), Role Label (label), Permissions (perms) --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression","title":"Options"},{"location":"commands/10.x/role_list/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/role_list/#aliases","text":"rls role-list Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/role_perm_add/","text":"role:perm:add \u00b6 Grant specified permission(s) to a role. Examples \u00b6 drush role-add-perm anonymous 'post comments' . Allow anon users to post comments. drush role:add-perm anonymous \"'post comments','access content'\" . Allow anon users to post comments and access content. drush pm:info --fields=permissions --format=csv aggregator . Discover the permissions associated with given module (then use this command as needed). Arguments \u00b6 --machine_name . The role to modify. --permissions . The list of permission to grant, delimited by commas. Aliases \u00b6 rap role-add-perm Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"role:perm:add"},{"location":"commands/10.x/role_perm_add/#rolepermadd","text":"Grant specified permission(s) to a role.","title":"role:perm:add"},{"location":"commands/10.x/role_perm_add/#examples","text":"drush role-add-perm anonymous 'post comments' . Allow anon users to post comments. drush role:add-perm anonymous \"'post comments','access content'\" . Allow anon users to post comments and access content. drush pm:info --fields=permissions --format=csv aggregator . Discover the permissions associated with given module (then use this command as needed).","title":"Examples"},{"location":"commands/10.x/role_perm_add/#arguments","text":"--machine_name . The role to modify. --permissions . The list of permission to grant, delimited by commas.","title":"Arguments"},{"location":"commands/10.x/role_perm_add/#aliases","text":"rap role-add-perm Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/role_perm_remove/","text":"role:perm:remove \u00b6 Remove specified permission(s) from a role. Examples \u00b6 drush role:remove-perm anonymous 'access content' . Hide content from anon users. Arguments \u00b6 --machine_name . The role to modify. --permissions . The list of permission to grant, delimited by commas. Aliases \u00b6 rmp role-remove-perm Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"role:perm:remove"},{"location":"commands/10.x/role_perm_remove/#rolepermremove","text":"Remove specified permission(s) from a role.","title":"role:perm:remove"},{"location":"commands/10.x/role_perm_remove/#examples","text":"drush role:remove-perm anonymous 'access content' . Hide content from anon users.","title":"Examples"},{"location":"commands/10.x/role_perm_remove/#arguments","text":"--machine_name . The role to modify. --permissions . The list of permission to grant, delimited by commas.","title":"Arguments"},{"location":"commands/10.x/role_perm_remove/#aliases","text":"rmp role-remove-perm Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/runserver/","text":"runserver \u00b6 Runs PHP's built-in http server for development. Don't use this for production, it is neither scalable nor secure for this use. If you run multiple servers simultaneously, you will need to assign each a unique port. Use Ctrl-C or equivalent to stop the server when complete. Examples \u00b6 drush rs 8080 . Start a web server on 127.0.0.1, port 8080. drush rs 10.0.0.28:80 . Start runserver on 10.0.0.28, port 80. drush rs [::1]:80 . Start runserver on IPv6 localhost ::1, port 80. drush rs --dns localhost:8888/user . Start runserver on localhost (using rDNS to determine binding IP), port 8888, and open /user in browser. drush rs / . Start runserver on default IP/port (127.0.0.1, port 8888), and open / in browser. drush rs :9000/admin . Start runserver on 127.0.0.1, port 9000, and open /admin in browser. Note that you need a colon when you specify port and path, but no IP. drush --quiet rs . Silence logging the printing of web requests to the console. Arguments \u00b6 [--uri] . Host IP address and port number to bind to and path to open in web browser. Format is addr:port/path. Only opens a browser if a path is specified. Options \u00b6 --default-server=DEFAULT-SERVER . A default addr:port/path to use for any values not specified as an argument. --browser[=BROWSER] . If opening a web browser, which browser to use (defaults to operating system default). Use --no-browser to avoid opening a browser. [default: 1 ] --dns . Resolve hostnames/IPs using DNS/rDNS (if possible) to determine binding IPs and/or human friendly hostnames for URLs and browser. --no-browser . Negate --browser option. Aliases \u00b6 rs serve Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"runserver"},{"location":"commands/10.x/runserver/#runserver","text":"Runs PHP's built-in http server for development. Don't use this for production, it is neither scalable nor secure for this use. If you run multiple servers simultaneously, you will need to assign each a unique port. Use Ctrl-C or equivalent to stop the server when complete.","title":"runserver"},{"location":"commands/10.x/runserver/#examples","text":"drush rs 8080 . Start a web server on 127.0.0.1, port 8080. drush rs 10.0.0.28:80 . Start runserver on 10.0.0.28, port 80. drush rs [::1]:80 . Start runserver on IPv6 localhost ::1, port 80. drush rs --dns localhost:8888/user . Start runserver on localhost (using rDNS to determine binding IP), port 8888, and open /user in browser. drush rs / . Start runserver on default IP/port (127.0.0.1, port 8888), and open / in browser. drush rs :9000/admin . Start runserver on 127.0.0.1, port 9000, and open /admin in browser. Note that you need a colon when you specify port and path, but no IP. drush --quiet rs . Silence logging the printing of web requests to the console.","title":"Examples"},{"location":"commands/10.x/runserver/#arguments","text":"[--uri] . Host IP address and port number to bind to and path to open in web browser. Format is addr:port/path. Only opens a browser if a path is specified.","title":"Arguments"},{"location":"commands/10.x/runserver/#options","text":"--default-server=DEFAULT-SERVER . A default addr:port/path to use for any values not specified as an argument. --browser[=BROWSER] . If opening a web browser, which browser to use (defaults to operating system default). Use --no-browser to avoid opening a browser. [default: 1 ] --dns . Resolve hostnames/IPs using DNS/rDNS (if possible) to determine binding IPs and/or human friendly hostnames for URLs and browser. --no-browser . Negate --browser option.","title":"Options"},{"location":"commands/10.x/runserver/#aliases","text":"rs serve Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/site_alias-convert/","text":"site:alias-convert \u00b6 Convert legacy site alias files to the new yml format. Examples \u00b6 drush site:alias-convert . Find legacy alias files and convert them to yml. You will be prompted for a destination directory. drush site:alias-convert --simulate . List the files to be converted but do not actually do anything. Arguments \u00b6 --destination . An absolute path to a directory for writing new alias files.If omitted, user will be prompted. Options \u00b6 --format[=FORMAT] . [default: yaml ] --sources=SOURCES . A comma delimited list of paths to search. Overrides the default paths. Aliases \u00b6 sa-convert sac Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"site:alias-convert"},{"location":"commands/10.x/site_alias-convert/#sitealias-convert","text":"Convert legacy site alias files to the new yml format.","title":"site:alias-convert"},{"location":"commands/10.x/site_alias-convert/#examples","text":"drush site:alias-convert . Find legacy alias files and convert them to yml. You will be prompted for a destination directory. drush site:alias-convert --simulate . List the files to be converted but do not actually do anything.","title":"Examples"},{"location":"commands/10.x/site_alias-convert/#arguments","text":"--destination . An absolute path to a directory for writing new alias files.If omitted, user will be prompted.","title":"Arguments"},{"location":"commands/10.x/site_alias-convert/#options","text":"--format[=FORMAT] . [default: yaml ] --sources=SOURCES . A comma delimited list of paths to search. Overrides the default paths.","title":"Options"},{"location":"commands/10.x/site_alias-convert/#aliases","text":"sa-convert sac Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/site_alias/","text":"site:alias \u00b6 Show site alias details, or a list of available site aliases. Examples \u00b6 drush site:alias . List all alias records known to drush. drush site:alias @dev . Print an alias record for the alias 'dev'. Arguments \u00b6 [--site] . Site alias or site specification. Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,tsv,var_dump,var_export,xml,yaml [default: yaml ] --fields=FIELDS . Limit output to only the listed elements. Name top-level elements by key, e.g. \"--fields=name,date\", or use dot notation to select a nested element, e.g. \"--fields=a.b.c as example\". --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression Topics \u00b6 Creating site aliases for running Drush on remote sites. (docs:aliases) Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 sa Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"site:alias"},{"location":"commands/10.x/site_alias/#sitealias","text":"Show site alias details, or a list of available site aliases.","title":"site:alias"},{"location":"commands/10.x/site_alias/#examples","text":"drush site:alias . List all alias records known to drush. drush site:alias @dev . Print an alias record for the alias 'dev'.","title":"Examples"},{"location":"commands/10.x/site_alias/#arguments","text":"[--site] . Site alias or site specification.","title":"Arguments"},{"location":"commands/10.x/site_alias/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,tsv,var_dump,var_export,xml,yaml [default: yaml ] --fields=FIELDS . Limit output to only the listed elements. Name top-level elements by key, e.g. \"--fields=name,date\", or use dot notation to select a nested element, e.g. \"--fields=a.b.c as example\". --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression","title":"Options"},{"location":"commands/10.x/site_alias/#topics","text":"Creating site aliases for running Drush on remote sites. (docs:aliases) Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/site_alias/#aliases","text":"sa Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/site_install/","text":"site:install \u00b6 Install Drupal along with modules/themes/configuration/profile. Examples \u00b6 drush si expert --locale=uk . (Re)install using the expert install profile. Set default language to Ukrainian. drush si --db-url=mysql://root:pass@localhost:port/dbname . Install using the specified DB params. drush si --db-url=sqlite://sites/example.com/files/.ht.sqlite . Install using SQLite drush si --account-pass=mom . Re-install with specified uid1 password. drush si --existing-config . Install based on the yml files stored in the config export/import directory. drush si standard install_configure_form.enable_update_status_emails=NULL . Disable email notification during install and later. If your server has no mail transfer agent, this gets rid of an error during install. Arguments \u00b6 [--profile]... . An install profile name. Defaults to standard unless an install profile is marked as a distribution. Additional info for the install profile may also be provided with additional arguments. The key is in the form [form name].[parameter name] Options \u00b6 --db-url=DB-URL . A Drupal 6 style database URL. Required for initial install, not re-install. If omitted and required, Drush prompts for this item. --db-prefix=DB-PREFIX . An optional table prefix to use for initial install. --db-su=DB-SU . Account to use when creating a new database. Must have Grant permission (mysql only). Optional. --db-su-pw=DB-SU-PW . Password for the db-su account. Optional. --account-name[=ACCOUNT-NAME] . uid1 name. [default: admin ] --account-mail[=ACCOUNT-MAIL] . uid1 email. [default: admin@example.com ] --site-mail[=SITE-MAIL] . From: for system mailings. [default: admin@example.com ] --account-pass=ACCOUNT-PASS . uid1 pass. Defaults to a randomly generated password. If desired, set a fixed password in config.yml. --locale[=LOCALE] . A short language code. Sets the default site language. Language files must already be present. [default: en ] --site-name[=SITE-NAME] . [default: Drush Site-Install ] --site-pass=SITE-PASS . --sites-subdir=SITES-SUBDIR . Name of directory under sites which should be created. --config-dir=CONFIG-DIR . Deprecated - only use with Drupal 8.5-. A path pointing to a full set of configuration which should be installed during installation. --existing-config . Configuration from sync directory should be imported during installation. Use with Drupal 8.6+. Aliases \u00b6 si sin site-install Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"site:install"},{"location":"commands/10.x/site_install/#siteinstall","text":"Install Drupal along with modules/themes/configuration/profile.","title":"site:install"},{"location":"commands/10.x/site_install/#examples","text":"drush si expert --locale=uk . (Re)install using the expert install profile. Set default language to Ukrainian. drush si --db-url=mysql://root:pass@localhost:port/dbname . Install using the specified DB params. drush si --db-url=sqlite://sites/example.com/files/.ht.sqlite . Install using SQLite drush si --account-pass=mom . Re-install with specified uid1 password. drush si --existing-config . Install based on the yml files stored in the config export/import directory. drush si standard install_configure_form.enable_update_status_emails=NULL . Disable email notification during install and later. If your server has no mail transfer agent, this gets rid of an error during install.","title":"Examples"},{"location":"commands/10.x/site_install/#arguments","text":"[--profile]... . An install profile name. Defaults to standard unless an install profile is marked as a distribution. Additional info for the install profile may also be provided with additional arguments. The key is in the form [form name].[parameter name]","title":"Arguments"},{"location":"commands/10.x/site_install/#options","text":"--db-url=DB-URL . A Drupal 6 style database URL. Required for initial install, not re-install. If omitted and required, Drush prompts for this item. --db-prefix=DB-PREFIX . An optional table prefix to use for initial install. --db-su=DB-SU . Account to use when creating a new database. Must have Grant permission (mysql only). Optional. --db-su-pw=DB-SU-PW . Password for the db-su account. Optional. --account-name[=ACCOUNT-NAME] . uid1 name. [default: admin ] --account-mail[=ACCOUNT-MAIL] . uid1 email. [default: admin@example.com ] --site-mail[=SITE-MAIL] . From: for system mailings. [default: admin@example.com ] --account-pass=ACCOUNT-PASS . uid1 pass. Defaults to a randomly generated password. If desired, set a fixed password in config.yml. --locale[=LOCALE] . A short language code. Sets the default site language. Language files must already be present. [default: en ] --site-name[=SITE-NAME] . [default: Drush Site-Install ] --site-pass=SITE-PASS . --sites-subdir=SITES-SUBDIR . Name of directory under sites which should be created. --config-dir=CONFIG-DIR . Deprecated - only use with Drupal 8.5-. A path pointing to a full set of configuration which should be installed during installation. --existing-config . Configuration from sync directory should be imported during installation. Use with Drupal 8.6+.","title":"Options"},{"location":"commands/10.x/site_install/#aliases","text":"si sin site-install Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/site_set/","text":"site:set \u00b6 Set a site alias that will persist for the current session. Stores the site alias being used in the current session in a temporary file. Examples \u00b6 drush site:set @dev . Set the current session to use the @dev alias. drush site:set user@server/path/to/drupal#sitename . Set the current session to use a remote site via site specification. drush site:set /path/to/drupal#sitename . Set the current session to use a local site via site specification. drush site:set - . Go back to the previously-set site (like cd - ). drush site:set . Without an argument, any existing site becomes unset. Arguments \u00b6 [--site] . Site specification to use, or - for previous site. Omit this argument to unset. Aliases \u00b6 use site-set Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"site:set"},{"location":"commands/10.x/site_set/#siteset","text":"Set a site alias that will persist for the current session. Stores the site alias being used in the current session in a temporary file.","title":"site:set"},{"location":"commands/10.x/site_set/#examples","text":"drush site:set @dev . Set the current session to use the @dev alias. drush site:set user@server/path/to/drupal#sitename . Set the current session to use a remote site via site specification. drush site:set /path/to/drupal#sitename . Set the current session to use a local site via site specification. drush site:set - . Go back to the previously-set site (like cd - ). drush site:set . Without an argument, any existing site becomes unset.","title":"Examples"},{"location":"commands/10.x/site_set/#arguments","text":"[--site] . Site specification to use, or - for previous site. Omit this argument to unset.","title":"Arguments"},{"location":"commands/10.x/site_set/#aliases","text":"use site-set Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/site_ssh/","text":"site:ssh \u00b6 Connect to a Drupal site's server via SSH, and optionally run a shell command. Examples \u00b6 drush @mysite ssh . Open an interactive shell on @mysite's server. drush @prod ssh ls /tmp . Run ls /tmp on @prod site. drush @prod ssh git pull . Run git pull on the Drupal root directory on the @prod site. drush ssh git pull . Run git pull on the local Drupal root directory. Arguments \u00b6 [--code]... . Code which should run at remote host. Options \u00b6 --cd=CD . Directory to change to. Defaults to Drupal root. --tty . Create a tty (e.g. to run an interactive program). --ssh-options=SSH-OPTIONS . A string of extra options that will be passed to the ssh command (e.g. -p 100 ) Topics \u00b6 Creating site aliases for running Drush on remote sites. (docs:aliases) Aliases \u00b6 ssh site-ssh Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"site:ssh"},{"location":"commands/10.x/site_ssh/#sitessh","text":"Connect to a Drupal site's server via SSH, and optionally run a shell command.","title":"site:ssh"},{"location":"commands/10.x/site_ssh/#examples","text":"drush @mysite ssh . Open an interactive shell on @mysite's server. drush @prod ssh ls /tmp . Run ls /tmp on @prod site. drush @prod ssh git pull . Run git pull on the Drupal root directory on the @prod site. drush ssh git pull . Run git pull on the local Drupal root directory.","title":"Examples"},{"location":"commands/10.x/site_ssh/#arguments","text":"[--code]... . Code which should run at remote host.","title":"Arguments"},{"location":"commands/10.x/site_ssh/#options","text":"--cd=CD . Directory to change to. Defaults to Drupal root. --tty . Create a tty (e.g. to run an interactive program). --ssh-options=SSH-OPTIONS . A string of extra options that will be passed to the ssh command (e.g. -p 100 )","title":"Options"},{"location":"commands/10.x/site_ssh/#topics","text":"Creating site aliases for running Drush on remote sites. (docs:aliases)","title":"Topics"},{"location":"commands/10.x/site_ssh/#aliases","text":"ssh site-ssh Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/sql_cli/","text":"sql:cli \u00b6 Open a SQL command-line interface using Drupal's credentials. Examples \u00b6 drush sql:cli . Open a SQL command-line interface using Drupal's credentials. drush sql:cli --extra=--progress-reports . Open a SQL CLI and skip reading table information. drush sql:cli < example.sql . Import sql statements from a file into the current database. Options \u00b6 --extra=EXTRA . Add custom options to the connect string --database[=DATABASE] . The DB connection key if using multiple connections in settings.php. [default: default ] --target[=TARGET] . The name of a target within the specified database connection. [default: default ] --db-url=DB-URL . A Drupal 6 style database URL. For example mysql://root:pass@localhost:port/dbname --show-passwords . Show password on the CLI. Useful for debugging. Aliases \u00b6 sqlc sql-cli Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"sql:cli"},{"location":"commands/10.x/sql_cli/#sqlcli","text":"Open a SQL command-line interface using Drupal's credentials.","title":"sql:cli"},{"location":"commands/10.x/sql_cli/#examples","text":"drush sql:cli . Open a SQL command-line interface using Drupal's credentials. drush sql:cli --extra=--progress-reports . Open a SQL CLI and skip reading table information. drush sql:cli < example.sql . Import sql statements from a file into the current database.","title":"Examples"},{"location":"commands/10.x/sql_cli/#options","text":"--extra=EXTRA . Add custom options to the connect string --database[=DATABASE] . The DB connection key if using multiple connections in settings.php. [default: default ] --target[=TARGET] . The name of a target within the specified database connection. [default: default ] --db-url=DB-URL . A Drupal 6 style database URL. For example mysql://root:pass@localhost:port/dbname --show-passwords . Show password on the CLI. Useful for debugging.","title":"Options"},{"location":"commands/10.x/sql_cli/#aliases","text":"sqlc sql-cli Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/sql_connect/","text":"sql:connect \u00b6 A string for connecting to the DB. Examples \u00b6 $(drush sql-connect) < example.sql . Bash: Import SQL statements from a file into the current database. eval (drush sql-connect) < example.sql . Fish: Import SQL statements from a file into the current database. Options \u00b6 --extra=EXTRA . Add custom options to the connect string (e.g. --extra=--skip-column-names) --database[=DATABASE] . The DB connection key if using multiple connections in settings.php. [default: default ] --target[=TARGET] . The name of a target within the specified database connection. [default: default ] --db-url=DB-URL . A Drupal 6 style database URL. For example mysql://root:pass@localhost:port/dbname --show-passwords . Show password on the CLI. Useful for debugging. Aliases \u00b6 sql-connect Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"sql:connect"},{"location":"commands/10.x/sql_connect/#sqlconnect","text":"A string for connecting to the DB.","title":"sql:connect"},{"location":"commands/10.x/sql_connect/#examples","text":"$(drush sql-connect) < example.sql . Bash: Import SQL statements from a file into the current database. eval (drush sql-connect) < example.sql . Fish: Import SQL statements from a file into the current database.","title":"Examples"},{"location":"commands/10.x/sql_connect/#options","text":"--extra=EXTRA . Add custom options to the connect string (e.g. --extra=--skip-column-names) --database[=DATABASE] . The DB connection key if using multiple connections in settings.php. [default: default ] --target[=TARGET] . The name of a target within the specified database connection. [default: default ] --db-url=DB-URL . A Drupal 6 style database URL. For example mysql://root:pass@localhost:port/dbname --show-passwords . Show password on the CLI. Useful for debugging.","title":"Options"},{"location":"commands/10.x/sql_connect/#aliases","text":"sql-connect Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/sql_create/","text":"sql:create \u00b6 Create a database. Examples \u00b6 drush sql:create . Create the database for the current site. drush @site.test sql-create . Create the database as specified for @site.test. drush sql:create --db-su=root --db-su-pw=rootpassword --db-url=\"mysql://drupal_db_user:drupal_db_password@127.0.0.1/drupal_db\" . Create the database as specified in the db-url option. Options \u00b6 --db-su=DB-SU . Account to use when creating a new database. --db-su-pw=DB-SU-PW . Password for the db-su account. --database[=DATABASE] . The DB connection key if using multiple connections in settings.php. [default: default ] --target[=TARGET] . The name of a target within the specified database connection. [default: default ] --db-url=DB-URL . A Drupal 6 style database URL. For example mysql://root:pass@localhost:port/dbname --show-passwords . Show password on the CLI. Useful for debugging. Aliases \u00b6 sql-create Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"sql:create"},{"location":"commands/10.x/sql_create/#sqlcreate","text":"Create a database.","title":"sql:create"},{"location":"commands/10.x/sql_create/#examples","text":"drush sql:create . Create the database for the current site. drush @site.test sql-create . Create the database as specified for @site.test. drush sql:create --db-su=root --db-su-pw=rootpassword --db-url=\"mysql://drupal_db_user:drupal_db_password@127.0.0.1/drupal_db\" . Create the database as specified in the db-url option.","title":"Examples"},{"location":"commands/10.x/sql_create/#options","text":"--db-su=DB-SU . Account to use when creating a new database. --db-su-pw=DB-SU-PW . Password for the db-su account. --database[=DATABASE] . The DB connection key if using multiple connections in settings.php. [default: default ] --target[=TARGET] . The name of a target within the specified database connection. [default: default ] --db-url=DB-URL . A Drupal 6 style database URL. For example mysql://root:pass@localhost:port/dbname --show-passwords . Show password on the CLI. Useful for debugging.","title":"Options"},{"location":"commands/10.x/sql_create/#aliases","text":"sql-create Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/sql_drop/","text":"sql:drop \u00b6 Drop all tables in a given database. Options \u00b6 --database[=DATABASE] . The DB connection key if using multiple connections in settings.php. [default: default ] --target[=TARGET] . The name of a target within the specified database connection. [default: default ] --db-url=DB-URL . A Drupal 6 style database URL. For example mysql://root:pass@localhost:port/dbname --show-passwords . Show password on the CLI. Useful for debugging. Topics \u00b6 Example policy file. (docs:policy) Aliases \u00b6 sql-drop Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"sql:drop"},{"location":"commands/10.x/sql_drop/#sqldrop","text":"Drop all tables in a given database.","title":"sql:drop"},{"location":"commands/10.x/sql_drop/#options","text":"--database[=DATABASE] . The DB connection key if using multiple connections in settings.php. [default: default ] --target[=TARGET] . The name of a target within the specified database connection. [default: default ] --db-url=DB-URL . A Drupal 6 style database URL. For example mysql://root:pass@localhost:port/dbname --show-passwords . Show password on the CLI. Useful for debugging.","title":"Options"},{"location":"commands/10.x/sql_drop/#topics","text":"Example policy file. (docs:policy)","title":"Topics"},{"location":"commands/10.x/sql_drop/#aliases","text":"sql-drop Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/sql_dump/","text":"sql:dump \u00b6 Exports the Drupal DB as SQL using mysqldump or equivalent. Examples \u00b6 drush sql:dump --result-file=../18.sql . Save SQL dump to the directory above Drupal root. drush sql:dump --skip-tables-key=common . Skip standard tables. See examples/example.drush.yml drush sql:dump --extra-dump=--no-data . Pass extra option to mysqldump command. Options \u00b6 --result-file=RESULT-FILE . Save to a file. The file should be relative to Drupal root. If --result-file is provided with the value 'auto', a date-based filename will be created under ~/drush-backups directory. --create-db . Omit DROP TABLE statements. Used by Postgres and Oracle only. --data-only . Dump data without statements to create any of the schema. --ordered-dump . Order by primary key and add line breaks for efficient diffs. Slows down the dump. Mysql only. --gzip . Compress the dump using the gzip program which must be in your $PATH . --extra=EXTRA . Add custom arguments/options when connecting to database (used internally to list tables). --extra-dump=EXTRA-DUMP . Add custom arguments/options to the dumping of the database (e.g. mysqldump command). --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,table,tsv,var_dump,var_export,xml,yaml [default: null ] --fields=FIELDS . Available fields: Path (path) --field=FIELD . Select just one field, and force format to 'string'. --database[=DATABASE] . The DB connection key if using multiple connections in settings.php. [default: default ] --target[=TARGET] . The name of a target within the specified database connection. [default: default ] --db-url=DB-URL . A Drupal 6 style database URL. For example mysql://root:pass@localhost:port/dbname --show-passwords . Show password on the CLI. Useful for debugging. --skip-tables-key=SKIP-TABLES-KEY . A key in the $skip_tables array. @see example.drush.yml --structure-tables-key=STRUCTURE-TABLES-KEY . A key in the $structure_tables array. @see example.drush.yml --tables-key=TABLES-KEY . A key in the $tables array. --skip-tables-list=SKIP-TABLES-LIST . A comma-separated list of tables to exclude completely. --structure-tables-list=STRUCTURE-TABLES-LIST . A comma-separated list of tables to include for structure, but not data. --tables-list=TABLES-LIST . A comma-separated list of tables to transfer. Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 sql-dump Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"sql:dump"},{"location":"commands/10.x/sql_dump/#sqldump","text":"Exports the Drupal DB as SQL using mysqldump or equivalent.","title":"sql:dump"},{"location":"commands/10.x/sql_dump/#examples","text":"drush sql:dump --result-file=../18.sql . Save SQL dump to the directory above Drupal root. drush sql:dump --skip-tables-key=common . Skip standard tables. See examples/example.drush.yml drush sql:dump --extra-dump=--no-data . Pass extra option to mysqldump command.","title":"Examples"},{"location":"commands/10.x/sql_dump/#options","text":"--result-file=RESULT-FILE . Save to a file. The file should be relative to Drupal root. If --result-file is provided with the value 'auto', a date-based filename will be created under ~/drush-backups directory. --create-db . Omit DROP TABLE statements. Used by Postgres and Oracle only. --data-only . Dump data without statements to create any of the schema. --ordered-dump . Order by primary key and add line breaks for efficient diffs. Slows down the dump. Mysql only. --gzip . Compress the dump using the gzip program which must be in your $PATH . --extra=EXTRA . Add custom arguments/options when connecting to database (used internally to list tables). --extra-dump=EXTRA-DUMP . Add custom arguments/options to the dumping of the database (e.g. mysqldump command). --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,table,tsv,var_dump,var_export,xml,yaml [default: null ] --fields=FIELDS . Available fields: Path (path) --field=FIELD . Select just one field, and force format to 'string'. --database[=DATABASE] . The DB connection key if using multiple connections in settings.php. [default: default ] --target[=TARGET] . The name of a target within the specified database connection. [default: default ] --db-url=DB-URL . A Drupal 6 style database URL. For example mysql://root:pass@localhost:port/dbname --show-passwords . Show password on the CLI. Useful for debugging. --skip-tables-key=SKIP-TABLES-KEY . A key in the $skip_tables array. @see example.drush.yml --structure-tables-key=STRUCTURE-TABLES-KEY . A key in the $structure_tables array. @see example.drush.yml --tables-key=TABLES-KEY . A key in the $tables array. --skip-tables-list=SKIP-TABLES-LIST . A comma-separated list of tables to exclude completely. --structure-tables-list=STRUCTURE-TABLES-LIST . A comma-separated list of tables to include for structure, but not data. --tables-list=TABLES-LIST . A comma-separated list of tables to transfer.","title":"Options"},{"location":"commands/10.x/sql_dump/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/sql_dump/#aliases","text":"sql-dump Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/sql_query/","text":"sql:query \u00b6 Execute a query against a database. Examples \u00b6 drush sql:query \"SELECT * FROM users WHERE uid=1\" . Browse user record. Table prefixes, if used, must be added to table names by hand. drush sql:query --db-prefix \"SELECT * FROM {users}\" . Browse user record. Table prefixes are honored. Caution: All curly-braces will be stripped. $(drush sql-connect) < example.sql . Import sql statements from a file into the current database. drush sql:query --file=example.sql . Alternate way to import sql statements from a file. drush @d8 ev \"return db_query('SELECT * FROM users')->fetchAll()\" --format=json . Get data back in JSON format. See https://github.com/drush-ops/drush/issues/3071#issuecomment-347929777 . Arguments \u00b6 [--query] . An SQL query. Ignored if --file is provided. Options \u00b6 --result-file[=RESULT-FILE] . Save to a file. The file should be relative to Drupal root. --file=FILE . Path to a file containing the SQL to be run. Gzip files are accepted. --file-delete . Delete the --file after running it. --extra=EXTRA . Add custom options to the connect string (e.g. --extra=--skip-column-names) --db-prefix . Enable replacement of braces in your query. --database[=DATABASE] . The DB connection key if using multiple connections in settings.php. [default: default ] --target[=TARGET] . The name of a target within the specified database connection. [default: default ] --db-url=DB-URL . A Drupal 6 style database URL. For example mysql://root:pass@localhost:port/dbname --show-passwords . Show password on the CLI. Useful for debugging. Aliases \u00b6 sqlq sql-query Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"sql:query"},{"location":"commands/10.x/sql_query/#sqlquery","text":"Execute a query against a database.","title":"sql:query"},{"location":"commands/10.x/sql_query/#examples","text":"drush sql:query \"SELECT * FROM users WHERE uid=1\" . Browse user record. Table prefixes, if used, must be added to table names by hand. drush sql:query --db-prefix \"SELECT * FROM {users}\" . Browse user record. Table prefixes are honored. Caution: All curly-braces will be stripped. $(drush sql-connect) < example.sql . Import sql statements from a file into the current database. drush sql:query --file=example.sql . Alternate way to import sql statements from a file. drush @d8 ev \"return db_query('SELECT * FROM users')->fetchAll()\" --format=json . Get data back in JSON format. See https://github.com/drush-ops/drush/issues/3071#issuecomment-347929777 .","title":"Examples"},{"location":"commands/10.x/sql_query/#arguments","text":"[--query] . An SQL query. Ignored if --file is provided.","title":"Arguments"},{"location":"commands/10.x/sql_query/#options","text":"--result-file[=RESULT-FILE] . Save to a file. The file should be relative to Drupal root. --file=FILE . Path to a file containing the SQL to be run. Gzip files are accepted. --file-delete . Delete the --file after running it. --extra=EXTRA . Add custom options to the connect string (e.g. --extra=--skip-column-names) --db-prefix . Enable replacement of braces in your query. --database[=DATABASE] . The DB connection key if using multiple connections in settings.php. [default: default ] --target[=TARGET] . The name of a target within the specified database connection. [default: default ] --db-url=DB-URL . A Drupal 6 style database URL. For example mysql://root:pass@localhost:port/dbname --show-passwords . Show password on the CLI. Useful for debugging.","title":"Options"},{"location":"commands/10.x/sql_query/#aliases","text":"sqlq sql-query Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/sql_sanitize/","text":"sql:sanitize \u00b6 Sanitize the database by removing or obfuscating user data. Commandfiles may add custom operations by implementing: @hook_on-event sql-sanitize-message . Display summary to user before confirmation. @hook post-command sql-sanitize . Run queries or call APIs to perform sanitizing Examples \u00b6 drush sql:sanitize --sanitize-password=no . Sanitize database without modifying any passwords. drush sql:sanitize --allowlist-fields=field_biography,field_phone_number . Sanitizes database but exempts two user fields from modification. Options \u00b6 --whitelist-fields[=WHITELIST-FIELDS] . Deprecated. Use allowlist-fields instead. --allowlist-fields[=ALLOWLIST-FIELDS] . A comma delimited list of fields exempt from sanitization. --sanitize-email[=SANITIZE-EMAIL] . The pattern for test email addresses in the sanitization operation, or no to keep email addresses unchanged. May contain replacement patterns %uid , %mail or %name . [default: user+% uid@localhost.localdomain ] --sanitize-password[=SANITIZE-PASSWORD] . By default, passwords are randomized. Specify no to disable that. Specify any other value to set all passwords to that value. Topics \u00b6 Drush hooks. (docs:hooks) Aliases \u00b6 sqlsan sql-sanitize Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"sql:sanitize"},{"location":"commands/10.x/sql_sanitize/#sqlsanitize","text":"Sanitize the database by removing or obfuscating user data. Commandfiles may add custom operations by implementing: @hook_on-event sql-sanitize-message . Display summary to user before confirmation. @hook post-command sql-sanitize . Run queries or call APIs to perform sanitizing","title":"sql:sanitize"},{"location":"commands/10.x/sql_sanitize/#examples","text":"drush sql:sanitize --sanitize-password=no . Sanitize database without modifying any passwords. drush sql:sanitize --allowlist-fields=field_biography,field_phone_number . Sanitizes database but exempts two user fields from modification.","title":"Examples"},{"location":"commands/10.x/sql_sanitize/#options","text":"--whitelist-fields[=WHITELIST-FIELDS] . Deprecated. Use allowlist-fields instead. --allowlist-fields[=ALLOWLIST-FIELDS] . A comma delimited list of fields exempt from sanitization. --sanitize-email[=SANITIZE-EMAIL] . The pattern for test email addresses in the sanitization operation, or no to keep email addresses unchanged. May contain replacement patterns %uid , %mail or %name . [default: user+% uid@localhost.localdomain ] --sanitize-password[=SANITIZE-PASSWORD] . By default, passwords are randomized. Specify no to disable that. Specify any other value to set all passwords to that value.","title":"Options"},{"location":"commands/10.x/sql_sanitize/#topics","text":"Drush hooks. (docs:hooks)","title":"Topics"},{"location":"commands/10.x/sql_sanitize/#aliases","text":"sqlsan sql-sanitize Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/sql_sync/","text":"sql:sync \u00b6 Copy DB data from a source site to a target site. Transfers data via rsync. Examples \u00b6 drush sql:sync @source @self . Copy the database from the site with the alias 'source' to the local site. drush sql:sync @self @target . Copy the database from the local site to the site with the alias 'target'. drush sql:sync #prod #dev . Copy the database from the site in /sites/prod to the site in /sites/dev (multisite installation). Arguments \u00b6 --source . A site-alias or the name of a subdirectory within /sites whose database you want to copy from. --target . A site-alias or the name of a subdirectory within /sites whose database you want to replace. Options \u00b6 --no-dump . Do not dump the sql database; always use an existing dump file. --no-sync . Do not rsync the database dump file from source to target. --runner=RUNNER . Where to run the rsync command; defaults to the local site. Can also be source or target . --create-db . Create a new database before importing the database dump on the target machine. --db-su=DB-SU . Account to use when creating a new database (e.g. root ). --db-su-pw=DB-SU-PW . Password for the db-su account. --target-dump=TARGET-DUMP . The path for storing the sql-dump on target machine. --source-dump[=SOURCE-DUMP] . The path for retrieving the sql-dump on source machine. --extra-dump[=EXTRA-DUMP] . Add custom arguments/options to the dumping of the database (e.g. mysqldump command). --skip-tables-key=SKIP-TABLES-KEY . A key in the $skip_tables array. @see example.drush.yml --structure-tables-key=STRUCTURE-TABLES-KEY . A key in the $structure_tables array. @see example.drush.yml --tables-key=TABLES-KEY . A key in the $tables array. --skip-tables-list=SKIP-TABLES-LIST . A comma-separated list of tables to exclude completely. --structure-tables-list=STRUCTURE-TABLES-LIST . A comma-separated list of tables to include for structure, but not data. --tables-list=TABLES-LIST . A comma-separated list of tables to transfer. Topics \u00b6 Creating site aliases for running Drush on remote sites. (docs:aliases) Example policy file. (docs:policy) Drush configuration example. (docs:configuration) Extend sql-sync to allow transfer of the sql dump file via http. (docs:example-sync-via-http) Aliases \u00b6 sql-sync Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"sql:sync"},{"location":"commands/10.x/sql_sync/#sqlsync","text":"Copy DB data from a source site to a target site. Transfers data via rsync.","title":"sql:sync"},{"location":"commands/10.x/sql_sync/#examples","text":"drush sql:sync @source @self . Copy the database from the site with the alias 'source' to the local site. drush sql:sync @self @target . Copy the database from the local site to the site with the alias 'target'. drush sql:sync #prod #dev . Copy the database from the site in /sites/prod to the site in /sites/dev (multisite installation).","title":"Examples"},{"location":"commands/10.x/sql_sync/#arguments","text":"--source . A site-alias or the name of a subdirectory within /sites whose database you want to copy from. --target . A site-alias or the name of a subdirectory within /sites whose database you want to replace.","title":"Arguments"},{"location":"commands/10.x/sql_sync/#options","text":"--no-dump . Do not dump the sql database; always use an existing dump file. --no-sync . Do not rsync the database dump file from source to target. --runner=RUNNER . Where to run the rsync command; defaults to the local site. Can also be source or target . --create-db . Create a new database before importing the database dump on the target machine. --db-su=DB-SU . Account to use when creating a new database (e.g. root ). --db-su-pw=DB-SU-PW . Password for the db-su account. --target-dump=TARGET-DUMP . The path for storing the sql-dump on target machine. --source-dump[=SOURCE-DUMP] . The path for retrieving the sql-dump on source machine. --extra-dump[=EXTRA-DUMP] . Add custom arguments/options to the dumping of the database (e.g. mysqldump command). --skip-tables-key=SKIP-TABLES-KEY . A key in the $skip_tables array. @see example.drush.yml --structure-tables-key=STRUCTURE-TABLES-KEY . A key in the $structure_tables array. @see example.drush.yml --tables-key=TABLES-KEY . A key in the $tables array. --skip-tables-list=SKIP-TABLES-LIST . A comma-separated list of tables to exclude completely. --structure-tables-list=STRUCTURE-TABLES-LIST . A comma-separated list of tables to include for structure, but not data. --tables-list=TABLES-LIST . A comma-separated list of tables to transfer.","title":"Options"},{"location":"commands/10.x/sql_sync/#topics","text":"Creating site aliases for running Drush on remote sites. (docs:aliases) Example policy file. (docs:policy) Drush configuration example. (docs:configuration) Extend sql-sync to allow transfer of the sql dump file via http. (docs:example-sync-via-http)","title":"Topics"},{"location":"commands/10.x/sql_sync/#aliases","text":"sql-sync Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/state_delete/","text":"state:delete \u00b6 Delete a state entry. Examples \u00b6 drush state:del system.cron_last . Delete state entry for system.cron_last. Arguments \u00b6 --key . The state key, for example system.cron_last . Aliases \u00b6 sdel state-delete Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"state:delete"},{"location":"commands/10.x/state_delete/#statedelete","text":"Delete a state entry.","title":"state:delete"},{"location":"commands/10.x/state_delete/#examples","text":"drush state:del system.cron_last . Delete state entry for system.cron_last.","title":"Examples"},{"location":"commands/10.x/state_delete/#arguments","text":"--key . The state key, for example system.cron_last .","title":"Arguments"},{"location":"commands/10.x/state_delete/#aliases","text":"sdel state-delete Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/state_get/","text":"state:get \u00b6 Display a state value. Examples \u00b6 drush state:get system.cron_last . Displays last cron run timestamp drush state:get drupal_css_cache_files --format=yaml . Displays an array of css files in yaml format. Arguments \u00b6 --key . The key name. Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,table,tsv,var_dump,var_export,xml,yaml [default: string ] --fields=FIELDS . Limit output to only the listed elements. Name top-level elements by key, e.g. \"--fields=name,date\", or use dot notation to select a nested element, e.g. \"--fields=a.b.c as example\". --field=FIELD . Select just one field, and force format to 'string'. Aliases \u00b6 sget state-get Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"state:get"},{"location":"commands/10.x/state_get/#stateget","text":"Display a state value.","title":"state:get"},{"location":"commands/10.x/state_get/#examples","text":"drush state:get system.cron_last . Displays last cron run timestamp drush state:get drupal_css_cache_files --format=yaml . Displays an array of css files in yaml format.","title":"Examples"},{"location":"commands/10.x/state_get/#arguments","text":"--key . The key name.","title":"Arguments"},{"location":"commands/10.x/state_get/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,table,tsv,var_dump,var_export,xml,yaml [default: string ] --fields=FIELDS . Limit output to only the listed elements. Name top-level elements by key, e.g. \"--fields=name,date\", or use dot notation to select a nested element, e.g. \"--fields=a.b.c as example\". --field=FIELD . Select just one field, and force format to 'string'.","title":"Options"},{"location":"commands/10.x/state_get/#aliases","text":"sget state-get Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/state_set/","text":"state:set \u00b6 Set a state value. Examples \u00b6 drush sset system.maintenance_mode 1 --input-format=integer . Put site into Maintenance mode. drush state:set system.cron_last 1406682882 --input-format=integer . Sets a timestamp for last cron run. php -r \"print json_encode(array(\\'drupal\\', \\'simpletest\\'));\" | drush state-set --input-format=json foo.name - . Set a key to a complex value (e.g. array) Arguments \u00b6 --key . The state key, for example: system.cron_last . --value . The value to assign to the state key. Use - to read from STDIN. Options \u00b6 --input-format[=INPUT-FORMAT] . Type for the value. Other recognized values: string, integer, float, boolean, json, yaml. [default: auto ] --value=VALUE . For internal use only. Aliases \u00b6 sset state-set Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"state:set"},{"location":"commands/10.x/state_set/#stateset","text":"Set a state value.","title":"state:set"},{"location":"commands/10.x/state_set/#examples","text":"drush sset system.maintenance_mode 1 --input-format=integer . Put site into Maintenance mode. drush state:set system.cron_last 1406682882 --input-format=integer . Sets a timestamp for last cron run. php -r \"print json_encode(array(\\'drupal\\', \\'simpletest\\'));\" | drush state-set --input-format=json foo.name - . Set a key to a complex value (e.g. array)","title":"Examples"},{"location":"commands/10.x/state_set/#arguments","text":"--key . The state key, for example: system.cron_last . --value . The value to assign to the state key. Use - to read from STDIN.","title":"Arguments"},{"location":"commands/10.x/state_set/#options","text":"--input-format[=INPUT-FORMAT] . Type for the value. Other recognized values: string, integer, float, boolean, json, yaml. [default: auto ] --value=VALUE . For internal use only.","title":"Options"},{"location":"commands/10.x/state_set/#aliases","text":"sset state-set Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/theme_enable/","text":"theme:enable \u00b6 Enable one or more themes. Arguments \u00b6 [--themes]... . A comma delimited list of themes. Aliases \u00b6 then theme-enable Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"theme:enable"},{"location":"commands/10.x/theme_enable/#themeenable","text":"Enable one or more themes.","title":"theme:enable"},{"location":"commands/10.x/theme_enable/#arguments","text":"[--themes]... . A comma delimited list of themes.","title":"Arguments"},{"location":"commands/10.x/theme_enable/#aliases","text":"then theme-enable Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/theme_uninstall/","text":"theme:uninstall \u00b6 Uninstall theme. Arguments \u00b6 [--themes]... . A comma delimited list of themes. Aliases \u00b6 thun theme-uninstall Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"theme:uninstall"},{"location":"commands/10.x/theme_uninstall/#themeuninstall","text":"Uninstall theme.","title":"theme:uninstall"},{"location":"commands/10.x/theme_uninstall/#arguments","text":"[--themes]... . A comma delimited list of themes.","title":"Arguments"},{"location":"commands/10.x/theme_uninstall/#aliases","text":"thun theme-uninstall Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/twig_compile/","text":"twig:compile \u00b6 Compile all Twig template(s). Aliases \u00b6 twigc twig-compile Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"twig:compile"},{"location":"commands/10.x/twig_compile/#twigcompile","text":"Compile all Twig template(s).","title":"twig:compile"},{"location":"commands/10.x/twig_compile/#aliases","text":"twigc twig-compile Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/twig_unused/","text":"twig:unused \u00b6 Find potentially unused Twig templates. Immediately before running this command, web crawl your entire web site. Or use your Production PHPStorage dir for comparison. Examples \u00b6 drush twig:unused --field=template /var/www/mass.local/docroot/modules/custom,/var/www/mass.local/docroot/themes/custom . Output a simple list of potentially unused templates. Arguments \u00b6 --searchpaths . A comma delimited list of paths to recursively search Options \u00b6 --format=FORMAT . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Template (template), Compiled (compiled) [default: template,compiled ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"twig:unused"},{"location":"commands/10.x/twig_unused/#twigunused","text":"Find potentially unused Twig templates. Immediately before running this command, web crawl your entire web site. Or use your Production PHPStorage dir for comparison.","title":"twig:unused"},{"location":"commands/10.x/twig_unused/#examples","text":"drush twig:unused --field=template /var/www/mass.local/docroot/modules/custom,/var/www/mass.local/docroot/themes/custom . Output a simple list of potentially unused templates.","title":"Examples"},{"location":"commands/10.x/twig_unused/#arguments","text":"--searchpaths . A comma delimited list of paths to recursively search","title":"Arguments"},{"location":"commands/10.x/twig_unused/#options","text":"--format=FORMAT . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Template (template), Compiled (compiled) [default: template,compiled ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression","title":"Options"},{"location":"commands/10.x/twig_unused/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters) Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Topics"},{"location":"commands/10.x/updatedb/","text":"updatedb \u00b6 Apply any database updates required (as with running update.php). Options \u00b6 --cache-clear[=CACHE-CLEAR] . Clear caches upon completion. [default: 1 ] --entity-updates . Run automatic entity schema updates at the end of any update hooks. Not supported in Drupal >= 8.7.0. --post-updates[=POST-UPDATES] . Run post updates after hook_update_n and entity updates. [default: 1 ] --no-cache-clear . Negate --cache-clear option. --no-post-updates . Negate --post-updates option. Aliases \u00b6 updb Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"updatedb"},{"location":"commands/10.x/updatedb/#updatedb","text":"Apply any database updates required (as with running update.php).","title":"updatedb"},{"location":"commands/10.x/updatedb/#options","text":"--cache-clear[=CACHE-CLEAR] . Clear caches upon completion. [default: 1 ] --entity-updates . Run automatic entity schema updates at the end of any update hooks. Not supported in Drupal >= 8.7.0. --post-updates[=POST-UPDATES] . Run post updates after hook_update_n and entity updates. [default: 1 ] --no-cache-clear . Negate --cache-clear option. --no-post-updates . Negate --post-updates option.","title":"Options"},{"location":"commands/10.x/updatedb/#aliases","text":"updb Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/updatedb_status/","text":"updatedb:status \u00b6 List any pending database updates. Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --entity-updates[=ENTITY-UPDATES] . Show entity schema updates. [default: 1 ] --post-updates[=POST-UPDATES] . Show post updates. [default: 1 ] --no-entity-updates . Negate --entity-updates option. --no-post-updates . Negate --post-updates option. --fields=FIELDS . Available fields: Module (module), Update ID (update_id), Description (description), Type (type) [default: module,update_id,type,description ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 updbst updatedb-status Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"updatedb:status"},{"location":"commands/10.x/updatedb_status/#updatedbstatus","text":"List any pending database updates.","title":"updatedb:status"},{"location":"commands/10.x/updatedb_status/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --entity-updates[=ENTITY-UPDATES] . Show entity schema updates. [default: 1 ] --post-updates[=POST-UPDATES] . Show post updates. [default: 1 ] --no-entity-updates . Negate --entity-updates option. --no-post-updates . Negate --post-updates option. --fields=FIELDS . Available fields: Module (module), Update ID (update_id), Description (description), Type (type) [default: module,update_id,type,description ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression","title":"Options"},{"location":"commands/10.x/updatedb_status/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/updatedb_status/#aliases","text":"updbst updatedb-status Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/user_block/","text":"user:block \u00b6 Block the specified user(s). Examples \u00b6 drush user:block user3 . Block the users whose name is user3 Arguments \u00b6 --names . A comma delimited list of user names. Aliases \u00b6 ublk user-block Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"user:block"},{"location":"commands/10.x/user_block/#userblock","text":"Block the specified user(s).","title":"user:block"},{"location":"commands/10.x/user_block/#examples","text":"drush user:block user3 . Block the users whose name is user3","title":"Examples"},{"location":"commands/10.x/user_block/#arguments","text":"--names . A comma delimited list of user names.","title":"Arguments"},{"location":"commands/10.x/user_block/#aliases","text":"ublk user-block Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/user_cancel/","text":"user:cancel \u00b6 Cancel user account(s) with the specified name(s). Examples \u00b6 drush user:cancel username . Cancel the user account with the name username and anonymize all content created by that user. drush user:cancel --delete-content username . Delete the user account with the name username and delete all content created by that user. Arguments \u00b6 --names . A comma delimited list of user names. Options \u00b6 --delete-content . Delete the user, and all content created by the user Aliases \u00b6 ucan user-cancel Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"user:cancel"},{"location":"commands/10.x/user_cancel/#usercancel","text":"Cancel user account(s) with the specified name(s).","title":"user:cancel"},{"location":"commands/10.x/user_cancel/#examples","text":"drush user:cancel username . Cancel the user account with the name username and anonymize all content created by that user. drush user:cancel --delete-content username . Delete the user account with the name username and delete all content created by that user.","title":"Examples"},{"location":"commands/10.x/user_cancel/#arguments","text":"--names . A comma delimited list of user names.","title":"Arguments"},{"location":"commands/10.x/user_cancel/#options","text":"--delete-content . Delete the user, and all content created by the user","title":"Options"},{"location":"commands/10.x/user_cancel/#aliases","text":"ucan user-cancel Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/user_create/","text":"user:create \u00b6 Create a user account. Examples \u00b6 drush user:create newuser --mail=\" person@example.com \" --password=\"letmein\" . Create a new user account with the name newuser, the email address person@example.com , and the password letmein Arguments \u00b6 --name . The name of the account to add Options \u00b6 --password=PASSWORD . The password for the new account --mail=MAIL . The email address for the new account Aliases \u00b6 ucrt user-create Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"user:create"},{"location":"commands/10.x/user_create/#usercreate","text":"Create a user account.","title":"user:create"},{"location":"commands/10.x/user_create/#examples","text":"drush user:create newuser --mail=\" person@example.com \" --password=\"letmein\" . Create a new user account with the name newuser, the email address person@example.com , and the password letmein","title":"Examples"},{"location":"commands/10.x/user_create/#arguments","text":"--name . The name of the account to add","title":"Arguments"},{"location":"commands/10.x/user_create/#options","text":"--password=PASSWORD . The password for the new account --mail=MAIL . The email address for the new account","title":"Options"},{"location":"commands/10.x/user_create/#aliases","text":"ucrt user-create Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/user_information/","text":"user:information \u00b6 Print information about the specified user(s). Examples \u00b6 drush user:information someguy,somegal . Display information about the someguy and somegal user accounts. drush user:information --mail= someguy@somegal.com . Display information for a given email account. drush user:information --uid=5 . Display information for a given user id. drush uinf --uid=$(drush sqlq \"SELECT GROUP_CONCAT(entity_id) FROM user__roles WHERE roles_target_id = 'administrator'\") . Display information for all administrators. Arguments \u00b6 [--names] . A comma delimited list of user names. Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --uid=UID . A comma delimited list of user ids to lookup (an alternative to names). --mail=MAIL . A comma delimited list of emails to lookup (an alternative to names). --fields=FIELDS . Available fields: User ID (uid), User name (name), Password (pass), User mail (mail), User theme (theme), Signature (signature), Signature format (signature_format), User created (user_created), Created (created), User last access (user_access), Last access (access), User last login (user_login), Last login (login), User status (user_status), Status (status), Time zone (timezone), User picture (picture), Initial user mail (init), User roles (roles), Group Audience (group_audience), Language code (langcode), Uuid (uuid) [default: uid,name,mail,roles,user_status ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 uinf user-information Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"user:information"},{"location":"commands/10.x/user_information/#userinformation","text":"Print information about the specified user(s).","title":"user:information"},{"location":"commands/10.x/user_information/#examples","text":"drush user:information someguy,somegal . Display information about the someguy and somegal user accounts. drush user:information --mail= someguy@somegal.com . Display information for a given email account. drush user:information --uid=5 . Display information for a given user id. drush uinf --uid=$(drush sqlq \"SELECT GROUP_CONCAT(entity_id) FROM user__roles WHERE roles_target_id = 'administrator'\") . Display information for all administrators.","title":"Examples"},{"location":"commands/10.x/user_information/#arguments","text":"[--names] . A comma delimited list of user names.","title":"Arguments"},{"location":"commands/10.x/user_information/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --uid=UID . A comma delimited list of user ids to lookup (an alternative to names). --mail=MAIL . A comma delimited list of emails to lookup (an alternative to names). --fields=FIELDS . Available fields: User ID (uid), User name (name), Password (pass), User mail (mail), User theme (theme), Signature (signature), Signature format (signature_format), User created (user_created), Created (created), User last access (user_access), Last access (access), User last login (user_login), Last login (login), User status (user_status), Status (status), Time zone (timezone), User picture (picture), Initial user mail (init), User roles (roles), Group Audience (group_audience), Language code (langcode), Uuid (uuid) [default: uid,name,mail,roles,user_status ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression","title":"Options"},{"location":"commands/10.x/user_information/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/user_information/#aliases","text":"uinf user-information Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/user_login/","text":"user:login \u00b6 Display a one time login link for user ID 1, or another user. Examples \u00b6 drush user:login . Open default web browser and browse to homepage, logged in as uid=1. drush user:login --name=ryan node/add/blog . Open default web browser (if configured or detected) for a one-time login link for username ryan that redirects to node/add/blog. drush user:login --uid=123 . Open default web browser and login as user with uid \"123\". drush user:login --mail= foo@bar.com . Open default web browser and login as user with mail \" foo@bar.com \". drush user:login --browser=firefox --name=$(drush user:information --mail=\" drush@example.org \" --fields=name --format=string) . Open firefox web browser, and login as the user with the e-mail address drush@example.org . Arguments \u00b6 [--path] . Optional path to redirect to after logging in. Options \u00b6 --name[=NAME] . A user name to log in as. --uid[=UID] . A uid to log in as. --mail[=MAIL] . A user mail address to log in as. --browser[=BROWSER] . Optional value denotes which browser to use (defaults to operating system default). Use --no-browser to suppress opening a browser. [default: 1 ] --redirect-port=REDIRECT-PORT . A custom port for redirecting to (e.g., when running within a Vagrant environment) --no-browser . Negate --browser option. Aliases \u00b6 uli user-login Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"user:login"},{"location":"commands/10.x/user_login/#userlogin","text":"Display a one time login link for user ID 1, or another user.","title":"user:login"},{"location":"commands/10.x/user_login/#examples","text":"drush user:login . Open default web browser and browse to homepage, logged in as uid=1. drush user:login --name=ryan node/add/blog . Open default web browser (if configured or detected) for a one-time login link for username ryan that redirects to node/add/blog. drush user:login --uid=123 . Open default web browser and login as user with uid \"123\". drush user:login --mail= foo@bar.com . Open default web browser and login as user with mail \" foo@bar.com \". drush user:login --browser=firefox --name=$(drush user:information --mail=\" drush@example.org \" --fields=name --format=string) . Open firefox web browser, and login as the user with the e-mail address drush@example.org .","title":"Examples"},{"location":"commands/10.x/user_login/#arguments","text":"[--path] . Optional path to redirect to after logging in.","title":"Arguments"},{"location":"commands/10.x/user_login/#options","text":"--name[=NAME] . A user name to log in as. --uid[=UID] . A uid to log in as. --mail[=MAIL] . A user mail address to log in as. --browser[=BROWSER] . Optional value denotes which browser to use (defaults to operating system default). Use --no-browser to suppress opening a browser. [default: 1 ] --redirect-port=REDIRECT-PORT . A custom port for redirecting to (e.g., when running within a Vagrant environment) --no-browser . Negate --browser option.","title":"Options"},{"location":"commands/10.x/user_login/#aliases","text":"uli user-login Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/user_password/","text":"user:password \u00b6 Set the password for the user account with the specified name. Examples \u00b6 drush user:password someuser \"correct horse battery staple\" . Set the password for the username someuser. See https://xkcd.com/936 Arguments \u00b6 --name . The name of the account to modify. --password . The new password for the account. Aliases \u00b6 upwd user-password Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"user:password"},{"location":"commands/10.x/user_password/#userpassword","text":"Set the password for the user account with the specified name.","title":"user:password"},{"location":"commands/10.x/user_password/#examples","text":"drush user:password someuser \"correct horse battery staple\" . Set the password for the username someuser. See https://xkcd.com/936","title":"Examples"},{"location":"commands/10.x/user_password/#arguments","text":"--name . The name of the account to modify. --password . The new password for the account.","title":"Arguments"},{"location":"commands/10.x/user_password/#aliases","text":"upwd user-password Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/user_role_add/","text":"user:role:add \u00b6 Add a role to the specified user accounts. Examples \u00b6 drush user-add-role \"editor\" user3 . Add the editor role to user3 Arguments \u00b6 --role . The machine name of the role to add. --names . A comma delimited list of user names. Aliases \u00b6 urol user-add-role Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"user:role:add"},{"location":"commands/10.x/user_role_add/#userroleadd","text":"Add a role to the specified user accounts.","title":"user:role:add"},{"location":"commands/10.x/user_role_add/#examples","text":"drush user-add-role \"editor\" user3 . Add the editor role to user3","title":"Examples"},{"location":"commands/10.x/user_role_add/#arguments","text":"--role . The machine name of the role to add. --names . A comma delimited list of user names.","title":"Arguments"},{"location":"commands/10.x/user_role_add/#aliases","text":"urol user-add-role Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/user_role_remove/","text":"user:role:remove \u00b6 Remove a role from the specified user accounts. Examples \u00b6 drush user:remove-role \"power user\" user3 . Remove the \"power user\" role from user3 Arguments \u00b6 --role . The name of the role to add --names . A comma delimited list of user names. Aliases \u00b6 urrol user-remove-role Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"user:role:remove"},{"location":"commands/10.x/user_role_remove/#userroleremove","text":"Remove a role from the specified user accounts.","title":"user:role:remove"},{"location":"commands/10.x/user_role_remove/#examples","text":"drush user:remove-role \"power user\" user3 . Remove the \"power user\" role from user3","title":"Examples"},{"location":"commands/10.x/user_role_remove/#arguments","text":"--role . The name of the role to add --names . A comma delimited list of user names.","title":"Arguments"},{"location":"commands/10.x/user_role_remove/#aliases","text":"urrol user-remove-role Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/user_unblock/","text":"user:unblock \u00b6 UnBlock the specified user(s). Examples \u00b6 drush user:unblock user3 . Unblock the users with name user3 Arguments \u00b6 --names . A comma delimited list of user names. Aliases \u00b6 uublk user-unblock Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"user:unblock"},{"location":"commands/10.x/user_unblock/#userunblock","text":"UnBlock the specified user(s).","title":"user:unblock"},{"location":"commands/10.x/user_unblock/#examples","text":"drush user:unblock user3 . Unblock the users with name user3","title":"Examples"},{"location":"commands/10.x/user_unblock/#arguments","text":"--names . A comma delimited list of user names.","title":"Arguments"},{"location":"commands/10.x/user_unblock/#aliases","text":"uublk user-unblock Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/version/","text":"version \u00b6 Show Drush version. Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Drush version (drush-version) --field=FIELD . Select just one field, and force format to 'string'. Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"version"},{"location":"commands/10.x/version/#version","text":"Show Drush version.","title":"version"},{"location":"commands/10.x/version/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Drush version (drush-version) --field=FIELD . Select just one field, and force format to 'string'.","title":"Options"},{"location":"commands/10.x/version/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters) Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Topics"},{"location":"commands/10.x/views_analyze/","text":"views:analyze \u00b6 Get a list of all Views and analyze warnings. Options \u00b6 --format=FORMAT . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Type (type), Message (message) --field=FIELD . Select just one field, and force format to 'string'. Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 va views-analyze Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"views:analyze"},{"location":"commands/10.x/views_analyze/#viewsanalyze","text":"Get a list of all Views and analyze warnings.","title":"views:analyze"},{"location":"commands/10.x/views_analyze/#options","text":"--format=FORMAT . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Type (type), Message (message) --field=FIELD . Select just one field, and force format to 'string'.","title":"Options"},{"location":"commands/10.x/views_analyze/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/views_analyze/#aliases","text":"va views-analyze Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/views_dev/","text":"views:dev \u00b6 Set several Views settings to more developer-oriented values. Aliases \u00b6 vd views-dev Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"views:dev"},{"location":"commands/10.x/views_dev/#viewsdev","text":"Set several Views settings to more developer-oriented values.","title":"views:dev"},{"location":"commands/10.x/views_dev/#aliases","text":"vd views-dev Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/views_disable/","text":"views:disable \u00b6 Disable the specified views. Examples \u00b6 drush vdis frontpage taxonomy_term . Disable the frontpage and taxonomy_term views. Arguments \u00b6 --views . A comma delimited list of view names. Aliases \u00b6 vdis views-disable Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"views:disable"},{"location":"commands/10.x/views_disable/#viewsdisable","text":"Disable the specified views.","title":"views:disable"},{"location":"commands/10.x/views_disable/#examples","text":"drush vdis frontpage taxonomy_term . Disable the frontpage and taxonomy_term views.","title":"Examples"},{"location":"commands/10.x/views_disable/#arguments","text":"--views . A comma delimited list of view names.","title":"Arguments"},{"location":"commands/10.x/views_disable/#aliases","text":"vdis views-disable Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/views_enable/","text":"views:enable \u00b6 Enable the specified views. Examples \u00b6 drush ven frontpage,taxonomy_term . Enable the frontpage and taxonomy_term views. Arguments \u00b6 --views . A comma delimited list of view names. Aliases \u00b6 ven views-enable Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"views:enable"},{"location":"commands/10.x/views_enable/#viewsenable","text":"Enable the specified views.","title":"views:enable"},{"location":"commands/10.x/views_enable/#examples","text":"drush ven frontpage,taxonomy_term . Enable the frontpage and taxonomy_term views.","title":"Examples"},{"location":"commands/10.x/views_enable/#arguments","text":"--views . A comma delimited list of view names.","title":"Arguments"},{"location":"commands/10.x/views_enable/#aliases","text":"ven views-enable Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/views_execute/","text":"views:execute \u00b6 Execute a view and show a count of the results, or the rendered HTML. Examples \u00b6 drush views:execute my_view . Show the rendered HTML for the default display for the my_view View. drush views:execute my_view page_1 3 --count . Show a count of my_view:page_1 where the first contextual filter value is 3. drush views:execute my_view page_1 3,foo . Show the rendered HTML of my_view:page_1 where the first two contextual filter values are 3 and 'foo' respectively. Arguments \u00b6 --view_name . The name of the view to execute. [--display] . The display ID to execute. If none specified, the default display will be used. [--view_args] . A comma delimited list of values, corresponding to contextual filters. Options \u00b6 --count[=COUNT] . Display a count of the results instead of each row. --show-admin-links . Show contextual admin links in the rendered markup. Aliases \u00b6 vex views-execute Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"views:execute"},{"location":"commands/10.x/views_execute/#viewsexecute","text":"Execute a view and show a count of the results, or the rendered HTML.","title":"views:execute"},{"location":"commands/10.x/views_execute/#examples","text":"drush views:execute my_view . Show the rendered HTML for the default display for the my_view View. drush views:execute my_view page_1 3 --count . Show a count of my_view:page_1 where the first contextual filter value is 3. drush views:execute my_view page_1 3,foo . Show the rendered HTML of my_view:page_1 where the first two contextual filter values are 3 and 'foo' respectively.","title":"Examples"},{"location":"commands/10.x/views_execute/#arguments","text":"--view_name . The name of the view to execute. [--display] . The display ID to execute. If none specified, the default display will be used. [--view_args] . A comma delimited list of values, corresponding to contextual filters.","title":"Arguments"},{"location":"commands/10.x/views_execute/#options","text":"--count[=COUNT] . Display a count of the results instead of each row. --show-admin-links . Show contextual admin links in the rendered markup.","title":"Options"},{"location":"commands/10.x/views_execute/#aliases","text":"vex views-execute Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/views_list/","text":"views:list \u00b6 Get a list of all views in the system. Examples \u00b6 drush vl . Show a list of all available views. drush vl --name=blog . Show a list of views which names contain 'blog'. drush vl --tags=tag1,tag2 . Show a list of views tagged with 'tag1' or 'tag2'. drush vl --status=enabled . Show a list of enabled views. Options \u00b6 --name=NAME . A string contained in the view's name to filter the results with. --tags=TAGS . A comma-separated list of views tags by which to filter the results. --status=STATUS . Filter views by status. Choices: enabled, disabled. --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Machine name (machine-name), Name (label), Description (description), Status (status), Tag (tag) [default: machine-name,label,description,status ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 vl views-list Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"views:list"},{"location":"commands/10.x/views_list/#viewslist","text":"Get a list of all views in the system.","title":"views:list"},{"location":"commands/10.x/views_list/#examples","text":"drush vl . Show a list of all available views. drush vl --name=blog . Show a list of views which names contain 'blog'. drush vl --tags=tag1,tag2 . Show a list of views tagged with 'tag1' or 'tag2'. drush vl --status=enabled . Show a list of enabled views.","title":"Examples"},{"location":"commands/10.x/views_list/#options","text":"--name=NAME . A string contained in the view's name to filter the results with. --tags=TAGS . A comma-separated list of views tags by which to filter the results. --status=STATUS . Filter views by status. Choices: enabled, disabled. --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --fields=FIELDS . Available fields: Machine name (machine-name), Name (label), Description (description), Status (status), Tag (tag) [default: machine-name,label,description,status ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression","title":"Options"},{"location":"commands/10.x/views_list/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/views_list/#aliases","text":"vl views-list Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/watchdog_delete/","text":"watchdog:delete \u00b6 Delete watchdog log records. Examples \u00b6 drush watchdog:delete all . Delete all messages. drush watchdog:delete 64 . Delete messages with id 64. drush watchdog:delete \"cron run succesful\" . Delete messages containing the string \"cron run succesful\". drush watchdog:delete --severity=notice . Delete all messages with a severity of notice. drush watchdog:delete --type=cron . Delete all messages of type cron. Arguments \u00b6 [--substring] . Delete all log records with this text in the messages. Options \u00b6 --severity=SEVERITY . Delete messages of a given severity level. --type=TYPE . Delete messages of a given type. Aliases \u00b6 wd-del wd-delete wd watchdog-delete Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"watchdog:delete"},{"location":"commands/10.x/watchdog_delete/#watchdogdelete","text":"Delete watchdog log records.","title":"watchdog:delete"},{"location":"commands/10.x/watchdog_delete/#examples","text":"drush watchdog:delete all . Delete all messages. drush watchdog:delete 64 . Delete messages with id 64. drush watchdog:delete \"cron run succesful\" . Delete messages containing the string \"cron run succesful\". drush watchdog:delete --severity=notice . Delete all messages with a severity of notice. drush watchdog:delete --type=cron . Delete all messages of type cron.","title":"Examples"},{"location":"commands/10.x/watchdog_delete/#arguments","text":"[--substring] . Delete all log records with this text in the messages.","title":"Arguments"},{"location":"commands/10.x/watchdog_delete/#options","text":"--severity=SEVERITY . Delete messages of a given severity level. --type=TYPE . Delete messages of a given type.","title":"Options"},{"location":"commands/10.x/watchdog_delete/#aliases","text":"wd-del wd-delete wd watchdog-delete Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/watchdog_list/","text":"watchdog:list \u00b6 Interactively filter the watchdog message listing. Examples \u00b6 drush watchdog:list . Prompt for message type or severity, then run watchdog-show. Arguments \u00b6 [--substring] . A substring to look search in error messages. Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --count[=COUNT] . The number of messages to show. [default: 10 ] --extended . Return extended information about each message. --severity[=SEVERITY] . Restrict to messages of a given severity level. --type[=TYPE] . Restrict to messages of a given type. --fields=FIELDS . Available fields: ID (wid), Type (type), Message (message), Severity (severity), Location (location), Hostname (hostname), Date (date), Username (username) [default: wid,date,type,severity,message ] --field=FIELD . Select just one field, and force format to 'string'. Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 wd-list watchdog-list Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"watchdog:list"},{"location":"commands/10.x/watchdog_list/#watchdoglist","text":"Interactively filter the watchdog message listing.","title":"watchdog:list"},{"location":"commands/10.x/watchdog_list/#examples","text":"drush watchdog:list . Prompt for message type or severity, then run watchdog-show.","title":"Examples"},{"location":"commands/10.x/watchdog_list/#arguments","text":"[--substring] . A substring to look search in error messages.","title":"Arguments"},{"location":"commands/10.x/watchdog_list/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --count[=COUNT] . The number of messages to show. [default: 10 ] --extended . Return extended information about each message. --severity[=SEVERITY] . Restrict to messages of a given severity level. --type[=TYPE] . Restrict to messages of a given type. --fields=FIELDS . Available fields: ID (wid), Type (type), Message (message), Severity (severity), Location (location), Hostname (hostname), Date (date), Username (username) [default: wid,date,type,severity,message ] --field=FIELD . Select just one field, and force format to 'string'.","title":"Options"},{"location":"commands/10.x/watchdog_list/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/watchdog_list/#aliases","text":"wd-list watchdog-list Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/watchdog_show-one/","text":"watchdog:show-one \u00b6 Show one log record by ID. Arguments \u00b6 --id . Watchdog Id Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,table,tsv,var_dump,var_export,xml,yaml [default: yaml ] --fields=FIELDS . Limit output to only the listed elements. Name top-level elements by key, e.g. \"--fields=name,date\", or use dot notation to select a nested element, e.g. \"--fields=a.b.c as example\". --field=FIELD . Select just one field, and force format to 'string'. Aliases \u00b6 wd-one watchdog-show-one Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"watchdog:show-one"},{"location":"commands/10.x/watchdog_show-one/#watchdogshow-one","text":"Show one log record by ID.","title":"watchdog:show-one"},{"location":"commands/10.x/watchdog_show-one/#arguments","text":"--id . Watchdog Id","title":"Arguments"},{"location":"commands/10.x/watchdog_show-one/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,string,table,tsv,var_dump,var_export,xml,yaml [default: yaml ] --fields=FIELDS . Limit output to only the listed elements. Name top-level elements by key, e.g. \"--fields=name,date\", or use dot notation to select a nested element, e.g. \"--fields=a.b.c as example\". --field=FIELD . Select just one field, and force format to 'string'.","title":"Options"},{"location":"commands/10.x/watchdog_show-one/#aliases","text":"wd-one watchdog-show-one Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"commands/10.x/watchdog_show/","text":"watchdog:show \u00b6 Show watchdog messages. Examples \u00b6 drush watchdog:show . Show a listing of most recent 10 messages. drush watchdog:show \"cron run successful\" . Show a listing of most recent 10 messages containing the string cron run successful . drush watchdog:show --count=46 . Show a listing of most recent 46 messages. drush watchdog:show --severity=Notice . Show a listing of most recent 10 messages with a severity of notice. drush watchdog:show --type=php . Show a listing of most recent 10 messages of type php while sleep 2; do drush watchdog:show; done . Every 2 seconds, show the most recent 10 messages. Arguments \u00b6 [--substring] . A substring to look search in error messages. Options \u00b6 --format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --count[=COUNT] . The number of messages to show. [default: 10 ] --severity=SEVERITY . Restrict to messages of a given severity level. --type=TYPE . Restrict to messages of a given type. --extended . Return extended information about each message. --fields=FIELDS . Available fields: ID (wid), Type (type), Message (message), Severity (severity), Location (location), Hostname (hostname), Date (date), Username (username) [default: wid,date,type,severity,message ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression Topics \u00b6 Output formatters and filters: control the command output (docs:output-formats-filters) Aliases \u00b6 wd-show ws watchdog-show Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"watchdog:show"},{"location":"commands/10.x/watchdog_show/#watchdogshow","text":"Show watchdog messages.","title":"watchdog:show"},{"location":"commands/10.x/watchdog_show/#examples","text":"drush watchdog:show . Show a listing of most recent 10 messages. drush watchdog:show \"cron run successful\" . Show a listing of most recent 10 messages containing the string cron run successful . drush watchdog:show --count=46 . Show a listing of most recent 46 messages. drush watchdog:show --severity=Notice . Show a listing of most recent 10 messages with a severity of notice. drush watchdog:show --type=php . Show a listing of most recent 10 messages of type php while sleep 2; do drush watchdog:show; done . Every 2 seconds, show the most recent 10 messages.","title":"Examples"},{"location":"commands/10.x/watchdog_show/#arguments","text":"[--substring] . A substring to look search in error messages.","title":"Arguments"},{"location":"commands/10.x/watchdog_show/#options","text":"--format[=FORMAT] . Format the result data. Available formats: csv,json,list,null,php,print-r,sections,string,table,tsv,var_dump,var_export,xml,yaml [default: table ] --count[=COUNT] . The number of messages to show. [default: 10 ] --severity=SEVERITY . Restrict to messages of a given severity level. --type=TYPE . Restrict to messages of a given type. --extended . Return extended information about each message. --fields=FIELDS . Available fields: ID (wid), Type (type), Message (message), Severity (severity), Location (location), Hostname (hostname), Date (date), Username (username) [default: wid,date,type,severity,message ] --field=FIELD . Select just one field, and force format to 'string'. --filter[=FILTER] . Filter output based on provided expression","title":"Options"},{"location":"commands/10.x/watchdog_show/#topics","text":"Output formatters and filters: control the command output (docs:output-formats-filters)","title":"Topics"},{"location":"commands/10.x/watchdog_show/#aliases","text":"wd-show ws watchdog-show Legend An argument or option with square brackets is optional. Any default value is listed at end of arg/option description. An ellipsis indicates that an argument accepts multiple values separated by a space.","title":"Aliases"},{"location":"contribute/","text":"Drush's test suite (aka Unish) is based on PHPUnit . In order to maintain high quality, our tests are run on every push. See CircleCi . Usage \u00b6 git clone https://github.com/drush-ops/drush.git cd drush composer install Review the configuration settings in tests/phpunit.xml.dist . If customization is needed, copy phpunit.xml.dist to phpunit.xml and edit away. Run all test suites: composer test Docker \u00b6 Drush's own tests may be run within provided Docker containers (see docker-compose.yml): Start containers: docker-compose up -d Run a test: docker-compose exec drupal composer functional -- --filter testUserRole To change configuration, copy .env.example to .env, edit to taste, and run docker-compose up -d again See the .env.example file for help on enabling Xdebug. Advanced usage \u00b6 Run only one test suite composer unit composer integration composer functional Run only tests matching a regex: composer functional -- --filter testUserRole Skip slow tests (usually those with network usage): composer functional -- --exclude-group slow XML results: composer functional -- --log-junit results.xml Ad-hoc testing with the SUT UNISH_DIRTY=1 composer functional -- --filter testUserRole ./drush @sut.dev status About the Test Suites \u00b6 Unit tests operate on functions that take values and return results without creating side effects. No database connection is required to run these tests, and no Drupal site is set up. Integration tests set up a test dependency injection container and operate by calling the Symfony Application APIs directly. A Drupal site called the System Under Test is set up and used for the tests. The SUT is set up and installed only once, and then is re-used for all tests. Integration tests therefore cannot make destructive changes to the SUT database. Also, Drupal is bootstrapped only once (always using the standard Drupal kernel, never the install or update kernel). This means that all commands run at BOOTSTRAP_FULL, and it is not possible to test loading different Drush configuration files and so on. It is not possible to test argument / option parsing. The shutdown and error handlers are not installed, so PHP deprecation warnings will be evidenced in the integration tests. Functional tests operate by exec ing the Drush executable. All functional tests therefore run in their own separate processes. The Drupal System Under Test is set up every time it is needed by any functional test. It is therefore okay if a functional test changes the state of the SUT. The codebase is re-used, so no destructive changes should be made to the code. Drush Test Traits \u00b6 Drush provides test traits that may be used to test your own Drush extensions. Adding the traits varies slightly depending how you package your Drush extension. An extension that ships inside a contributed module - DevelCommandsTest for an example. More examples are SchedulerDrushTest and Views Bulk Operations . Remember to add drush/drush to the your modules composer.json ( require-dev section). A standalone Drush extension or one that ships inside a custom module - example drush extension Once you have included the Drush Test Traits, you will be able to write simple tests that call your extension's commands and makes assertions against the output. public function testMyCommand () { $this -> drush ( 'my:command' , [ 'param' ], [ 'flag' => 'value' ]); $this -> assertOutputEquals ( 'The parameter is \"param\" and the \"flag\" option is \"value\"' ); }","title":"Unish"},{"location":"contribute/#usage","text":"git clone https://github.com/drush-ops/drush.git cd drush composer install Review the configuration settings in tests/phpunit.xml.dist . If customization is needed, copy phpunit.xml.dist to phpunit.xml and edit away. Run all test suites: composer test","title":"Usage"},{"location":"contribute/#docker","text":"Drush's own tests may be run within provided Docker containers (see docker-compose.yml): Start containers: docker-compose up -d Run a test: docker-compose exec drupal composer functional -- --filter testUserRole To change configuration, copy .env.example to .env, edit to taste, and run docker-compose up -d again See the .env.example file for help on enabling Xdebug.","title":"Docker"},{"location":"contribute/#advanced-usage","text":"Run only one test suite composer unit composer integration composer functional Run only tests matching a regex: composer functional -- --filter testUserRole Skip slow tests (usually those with network usage): composer functional -- --exclude-group slow XML results: composer functional -- --log-junit results.xml Ad-hoc testing with the SUT UNISH_DIRTY=1 composer functional -- --filter testUserRole ./drush @sut.dev status","title":"Advanced usage"},{"location":"contribute/#about-the-test-suites","text":"Unit tests operate on functions that take values and return results without creating side effects. No database connection is required to run these tests, and no Drupal site is set up. Integration tests set up a test dependency injection container and operate by calling the Symfony Application APIs directly. A Drupal site called the System Under Test is set up and used for the tests. The SUT is set up and installed only once, and then is re-used for all tests. Integration tests therefore cannot make destructive changes to the SUT database. Also, Drupal is bootstrapped only once (always using the standard Drupal kernel, never the install or update kernel). This means that all commands run at BOOTSTRAP_FULL, and it is not possible to test loading different Drush configuration files and so on. It is not possible to test argument / option parsing. The shutdown and error handlers are not installed, so PHP deprecation warnings will be evidenced in the integration tests. Functional tests operate by exec ing the Drush executable. All functional tests therefore run in their own separate processes. The Drupal System Under Test is set up every time it is needed by any functional test. It is therefore okay if a functional test changes the state of the SUT. The codebase is re-used, so no destructive changes should be made to the code.","title":"About the Test Suites"},{"location":"contribute/#drush-test-traits","text":"Drush provides test traits that may be used to test your own Drush extensions. Adding the traits varies slightly depending how you package your Drush extension. An extension that ships inside a contributed module - DevelCommandsTest for an example. More examples are SchedulerDrushTest and Views Bulk Operations . Remember to add drush/drush to the your modules composer.json ( require-dev section). A standalone Drush extension or one that ships inside a custom module - example drush extension Once you have included the Drush Test Traits, you will be able to write simple tests that call your extension's commands and makes assertions against the output. public function testMyCommand () { $this -> drush ( 'my:command' , [ 'param' ], [ 'flag' => 'value' ]); $this -> assertOutputEquals ( 'The parameter is \"param\" and the \"flag\" option is \"value\"' ); }","title":"Drush Test Traits"},{"location":"contribute/CONTRIBUTING/","text":"Drush is built by people like you! Please join us . Git and Pull requests \u00b6 Contributions are submitted, reviewed, and accepted using GitHub pull requests. The latest changes are in the 10.x branch. PR's should initially target this branch. Try to make clean commits that are easily readable (including descriptive commit messages!) See the test-specific README.md for instructions on running the test suite. Test before you push. Get familiar with Unish, our test suite. Optionally run tests in the provided Docker containers. We maintain branches named 10.x, 9.x, etc. These are release branches. From these branches, we make new tags for patch and minor versions. Development Environment \u00b6 You may choose to use the docker-compose file in root directory for an optimized environment. See composer run-script -l for a list of helper scripts. Coding style \u00b6 Do write comments. You don't have to comment every line, but if you come up with something that's a bit complex/weird, just leave a comment. Bear in mind that you will probably leave the project at some point and that other people will read your code. Undocumented huge amounts of code are nearly worthless! We use PSR-2 in the /src directory. Drupal's coding standards are still used in the includes directory (deprecated code). Keep it compatible. Do not introduce changes to the public API, or configurations too casually. Don't make incompatible changes without good reasons! Documentation \u00b6 The docs are on our web site . You may also read these from within Drush, with the drush topic command. Documentation should be kept up-to-date. This means, whenever you add a new API method, add a new hook or change the database model, pack the relevant changes to the docs in the same pull request.","title":"Guidelines"},{"location":"contribute/CONTRIBUTING/#git-and-pull-requests","text":"Contributions are submitted, reviewed, and accepted using GitHub pull requests. The latest changes are in the 10.x branch. PR's should initially target this branch. Try to make clean commits that are easily readable (including descriptive commit messages!) See the test-specific README.md for instructions on running the test suite. Test before you push. Get familiar with Unish, our test suite. Optionally run tests in the provided Docker containers. We maintain branches named 10.x, 9.x, etc. These are release branches. From these branches, we make new tags for patch and minor versions.","title":"Git and Pull requests"},{"location":"contribute/CONTRIBUTING/#development-environment","text":"You may choose to use the docker-compose file in root directory for an optimized environment. See composer run-script -l for a list of helper scripts.","title":"Development Environment"},{"location":"contribute/CONTRIBUTING/#coding-style","text":"Do write comments. You don't have to comment every line, but if you come up with something that's a bit complex/weird, just leave a comment. Bear in mind that you will probably leave the project at some point and that other people will read your code. Undocumented huge amounts of code are nearly worthless! We use PSR-2 in the /src directory. Drupal's coding standards are still used in the includes directory (deprecated code). Keep it compatible. Do not introduce changes to the public API, or configurations too casually. Don't make incompatible changes without good reasons!","title":"Coding style"},{"location":"contribute/CONTRIBUTING/#documentation","text":"The docs are on our web site . You may also read these from within Drush, with the drush topic command. Documentation should be kept up-to-date. This means, whenever you add a new API method, add a new hook or change the database model, pack the relevant changes to the docs in the same pull request.","title":"Documentation"},{"location":"examples/ArtCommands.php/","text":"<? php namespace Drush\\Commands ; use Consolidation\\AnnotatedCommand\\AnnotationData ; use Consolidation\\AnnotatedCommand\\CommandData ; use Consolidation\\AnnotatedCommand\\Events\\CustomEventAwareInterface ; use Consolidation\\AnnotatedCommand\\Events\\CustomEventAwareTrait ; use Consolidation\\OutputFormatters\\StructuredData\\RowsOfFields ; use Symfony\\Component\\Console\\Input\\InputInterface ; use Symfony\\Component\\Console\\Output\\OutputInterface ; use Symfony\\Component\\Console\\Style\\SymfonyStyle ; use Drush\\Style\\DrushStyle ; use Drush\\Utils\\StringUtils ; /** * Run these commands using the --include option - e.g. `drush --include=/path/to/drush/examples art sandwich` * * For an example of a Drupal module implementing commands, see * - http://cgit.drupalcode.org/devel/tree/devel_generate/src/Commands * - http://cgit.drupalcode.org/devel/tree/devel_generate/drush.services.yml * * This file is a good example of the first of those bullets (a commandfile) but * since it isn't part of a module, it does not implement drush.services.yml. * * See [Drush Test Traits](https://github.com/drush-ops/drush/blob/10.x/tests/README.md#about-the-test-suites) for info on testing Drush commands. */ class ArtCommands extends DrushCommands implements CustomEventAwareInterface { use CustomEventAwareTrait ; /** @var string[] */ protected $arts ; /** * Show a fabulous picture. * * @command artwork:show * @aliases arts * @param $art The name of the art to display * @usage drush art sandwich * Show a marvelous picture of a sandwich with pickles. */ public function art ( $art = '' ) { $data = $this -> getArt (); $name = $data [ $art ][ 'name' ]; $description = $data [ $art ][ 'description' ]; $path = $data [ $art ][ 'path' ]; $msg = dt ( 'Okay. Here is {art}: {description}' , [ 'art' => $name , 'description' => $description ] ); $this -> output () -> writeln ( \" \\n \" . $msg . \" \\n \" ); $this -> printFile ( $path ); } /** * Show a table of information about available art. * * @command artwork:list * @aliases artls * @field-labels * name: Name * description: Description * path: Path * @default-fields name,description * * @filter-default-field name * @return \\Consolidation\\OutputFormatters\\StructuredData\\RowsOfFields */ public function listArt ( $options = [ 'format' => 'table' ]) { $data = $this -> getArt (); return new RowsOfFields ( $data ); } /** * Commandfiles may also add topics. These will appear in * the list of topics when `drush topic` is executed. * To view the topic below, run `drush --include=/full/path/to/examples topic` */ /** * Ruminations on the true meaning and philosophy of artwork. * * @command artwork:explain * @hidden * @topic */ public function ruminate () { self :: printFile ( __DIR__ . '/art-topic.md' ); } /** * Return the available built-in art. Any Drush commandfile may provide * more art by implementing a 'drush-art' on-event hook. This on-event * hook is defined in the 'findArt' method beolw. * * @hook on-event drush-art */ public function builtInArt () { return [ 'drush' => [ 'name' => 'Drush' , 'description' => 'The Drush logo.' , 'path' => __DIR__ . '/art/drush-nocolor.txt' , ], 'sandwich' => [ 'name' => 'Sandwich' , 'description' => 'A tasty meal with bread often consumed at lunchtime.' , 'path' => __DIR__ . '/art/sandwich-nocolor.txt' , ], ]; } /** * @hook interact artwork:show */ public function interact ( InputInterface $input , OutputInterface $output , AnnotationData $annotationData ) { $io = new DrushStyle ( $input , $output ); // If the user did not specify any artwork, then prompt for one. $art = $input -> getArgument ( 'art' ); if ( empty ( $art )) { $data = $this -> getArt (); $selections = $this -> convertArtListToKeyValue ( $data ); $selection = $io -> choice ( 'Select art to display' , $selections ); $input -> setArgument ( 'art' , $selection ); } } /** * @hook validate artwork:show */ public function artValidate ( CommandData $commandData ) { $art = $commandData -> input () -> getArgument ( 'art' ); $data = $this -> getArt (); if ( ! isset ( $data [ $art ])) { throw new \\Exception ( dt ( 'I do not have any art called \"{name}\".' , [ 'name' => $art ])); } } /** * Get a list of available artwork. Cache result for future fast access. */ protected function getArt () { if ( ! isset ( $this -> arts )) { $this -> arts = $this -> findArt (); } return $this -> arts ; } /** * Use custom defined on-event hook 'drush-art' to find available artwork. */ protected function findArt () { $arts = []; $handlers = $this -> getCustomEventHandlers ( 'drush-art' ); foreach ( $handlers as $handler ) { $handlerResult = $handler (); $arts = array_merge ( $arts , $handlerResult ); } return $arts ; } /** * Given a list of artwork, converte to a 'key' => 'Name: Description' array. * @param array $data * @return array */ protected function convertArtListToKeyValue ( $data ) { $result = []; foreach ( $data as $key => $item ) { $result [ $key ] = $item [ 'name' ] . ': ' . $item [ 'description' ]; } return $result ; } }","title":"ArtCommands.php"},{"location":"examples/PolicyCommands.php/","text":"<? php namespace Drush\\Commands ; use Consolidation\\AnnotatedCommand\\CommandData ; use Drush\\Commands\\DrushCommands ; use Symfony\\Component\\Console\\Input\\InputOption ; /** * Load this commandfile using the --include option - e.g. `drush --include=/path/to/drush/examples` * * See [Drush Test Traits](https://github.com/drush-ops/drush/blob/10.x/tests/README.md#about-the-test-suites) for info on testing Drush commands. */ class PolicyCommands extends DrushCommands { /** * Prevent catastrophic braino. Note that this file has to be local to the * machine that initiates the sql:sync command. * * @hook validate sql:sync * @throws \\Exception */ public function sqlSyncValidate ( CommandData $commandData ) { if ( $commandData -> input () -> getArgument ( 'destination' ) == '@prod' ) { throw new \\Exception ( dt ( 'Per !file, you may never overwrite the production database.' , [ '!file' => __FILE__ ])); } } /** * Limit rsync operations to production site. * * @hook validate core:rsync */ public function rsyncValidate ( CommandData $commandData ) { if ( preg_match ( \"/^@prod/\" , $commandData -> input () -> getArgument ( 'destination' ))) { throw new \\Exception ( dt ( 'Per !file, you may never rsync to the production site.' , [ '!file' => __FILE__ ])); } } /** * Unauthorized may not execute updates. * * @hook validate updatedb */ public function validateUpdateDb ( CommandData $commandData ) { if ( ! $commandData -> input () -> getOption ( 'secret' ) == 'mysecret' ) { throw new \\Exception ( dt ( 'UpdateDb command requires a secret token per site policy.' )); } } /** * @hook option updatedb * @option secret A required token else user may not run updatedb command. */ public function optionsetUpdateDb ( $options = [ 'secret' => self :: REQ ]) { } }","title":"PolicyCommands.php"},{"location":"examples/SiteAliasAlterCommands.php/","text":"<? php namespace Drush\\Commands ; use Consolidation\\AnnotatedCommand\\AnnotationData ; use Consolidation\\SiteAlias\\SiteAliasManagerAwareInterface ; use Consolidation\\SiteAlias\\SiteAliasManagerAwareTrait ; use Symfony\\Component\\Console\\Input\\InputInterface ; /** * Load this example by using the --include option - e.g. `drush --include=/path/to/drush/examples` */ class SiteAliasAlterCommands extends DrushCommands implements SiteAliasManagerAwareInterface { use SiteAliasManagerAwareTrait ; /** * A few example alterations to site aliases. * * @hook pre-init * * * @param \\Symfony\\Component\\Console\\Input\\InputInterface $input * @param \\Consolidation\\AnnotatedCommand\\AnnotationData $annotationData */ public function alter ( InputInterface $input , AnnotationData $annotationData ) { $self = $this -> siteAliasManager () -> getSelf (); if ( $self -> isRemote ()) { // Always pass along ssh keys. if ( ! $self -> has ( 'ssh.options' )) { // Don't edit the alias - edit the general config service instead. $this -> getConfig () -> set ( 'ssh.options' , '-o ForwardAgent=yes' ); } // Change the SSH user. $input -> setOption ( 'remote-user' , 'mw2' ); // Test to see if specific environment really exists in wildcard // aliases, but only if the target is a specific host. $host = $self -> get ( 'host' ); if ( preg_match ( '#\\.myserver.com$#' , $host )) { $ip = gethostbyname ( $host ); // If the return value of gethostbyname equals its input parameter, // that indicates failure. if ( $host == $ip ) { $aliasName = $self -> name (); throw new \\Exception ( \"The alias $aliasName refers to an environment that does not exist.\" ); } } } } }","title":"SiteAliasAlterCommands.php"},{"location":"examples/SyncViaHttpCommands.php/","text":"<? php namespace Drush\\Commands ; use Consolidation\\AnnotatedCommand\\CommandData ; use Drush\\Commands\\DrushCommands ; use Drush\\Drush ; use Drush\\Exec\\ExecTrait ; use Symfony\\Component\\Filesystem\\Filesystem ; /** * Load this commandfile using the --include option - e.g. `drush --include=/path/to/drush/examples` */ class SyncViaHttpCommands extends DrushCommands { /** * When a hook extends a command with additional options, it must * implement declare those option(s) in a @hook option like this one. Doing so will add * the option to the help text for the modified command, and will also * allow the new option to be specified on the command line. Without * this, Drush will fail with an error when a user attempts to use * an unknown option. * * @hook option sql-sync * @option http-sync Copy the database via http instead of rsync. Value is the url that the existing database dump can be found at. * @option http-sync-user Username for the protected directory containing the sql dump. * @option http-sync-password Password for the same directory. */ public function optionsetSqlSync () { } /** * During the pre hook, determine if the http-sync option has been * specified. If it has been, then disable the normal ssh + rsync * dump-and-transfer that sql-sync usually does, and transfer the * database dump via an http download. * * @hook pre-command sql-sync */ public function preSqlSync ( CommandData $commandData ) { $sql_dump_download_url = $commandData -> input () -> getOption ( 'http-sync' ); if ( ! empty ( $sql_dump_download_url )) { $user = $commandData -> input () -> getOption ( 'http-sync-user' ); $password = $commandData -> input () -> getOption ( 'http-sync-password' ); $source_dump_file = $this -> downloadFile ( $sql_dump_download_url , $user , $password ); $commandData -> input () -> setOption ( 'target-dump' , $source_dump_file ); $commandData -> input () -> setOption ( 'no-dump' , true ); $commandData -> input () -> setOption ( 'no-sync' , true ); } } /** * Downloads a file. * * Optionally uses user authentication, using either wget or curl, as available. */ protected function downloadFile ( $url , $user = false , $password = false , $destination = false , $overwrite = true ) { static $use_wget ; if ( $use_wget === null ) { $use_wget = ExecTrait :: programExists ( 'wget' ); } $destination_tmp = drush_tempnam ( 'download_file' ); if ( $use_wget ) { $args = [ 'wget' , '-q' , '--timeout=30' ]; if ( $user && $password ) { $args = array_merge ( $args , [ \"--user= $user \" , \"--password= $password \" , '-O' , $destination_tmp , $url ]); } else { $args = array_merge ( $args , [ '-O' , $destination_tmp , $url ]); } } else { $args = [ 'curl' , '-s' , '-L' , '--connect-timeout 30' ]; if ( $user && $password ) { $args = array_merge ( $args , [ '--user' , \" $user : $password \" , '-o' , $destination_tmp , $url ]); } else { $args = array_merge ( $args , [ '-o' , $destination_tmp , $url ]); } } $process = Drush :: process ( $args ); $process -> mustRun (); if ( ! Drush :: simulate ()) { if ( ! drush_file_not_empty ( $destination_tmp ) && $file = @ file_get_contents ( $url )) { @ file_put_contents ( $destination_tmp , $file ); } if ( ! drush_file_not_empty ( $destination_tmp )) { // Download failed. throw new \\Exception ( dt ( \"The URL !url could not be downloaded.\" , [ '!url' => $url ])); } } if ( $destination ) { $fs = new Filesystem (); $fs -> rename ( $destination_tmp , $destination , $overwrite ); return $destination ; } return $destination_tmp ; } }","title":"SyncViaHttpCommands.php"},{"location":"examples/XkcdCommands.php/","text":"<? php namespace Drush\\Commands ; use Drush\\Exec\\ExecTrait ; /** * Run these commands using the --include option - e.g. `drush --include=/path/to/drush/examples xkcd` * * For an example of a Drush extension with tests for Drush 9 and Drush 8: * - https://github.com/drush-ops/example-drush-extension */ class XkcdCommands extends DrushCommands { use ExecTrait ; /** * Retrieve and display xkcd cartoons. * * @command xkcd:fetch * @param $search Optional argument to retrieve the cartoons matching an index number, keyword search or \"random\". If omitted the latest cartoon will be retrieved. * @option image-viewer Command to use to view images (e.g. xv, firefox). Defaults to \"display\" (from ImageMagick). * @option google-custom-search-api-key Google Custom Search API Key, available from https://code.google.com/apis/console/. Default key limited to 100 queries/day globally. * @usage drush xkcd * Retrieve and display the latest cartoon. * @usage drush xkcd sandwich * Retrieve and display cartoons about sandwiches. * @usage drush xkcd 123 --image-viewer=eog * Retrieve and display cartoon #123 in eog. * @usage drush xkcd random --image-viewer=firefox * Retrieve and display a random cartoon in Firefox. * @aliases xkcd */ public function fetch ( $search = null , $options = [ 'image-viewer' => 'open' , 'google-custom-search-api-key' => 'AIzaSyDpE01VDNNT73s6CEeJRdSg5jukoG244ek' ]) { if ( empty ( $search )) { $this -> startBrowser ( 'http://xkcd.com' ); } elseif ( is_numeric ( $search )) { $this -> startBrowser ( 'http://xkcd.com/' . $search ); } elseif ( $search == 'random' ) { $xkcd_response = @ json_decode ( file_get_contents ( 'http://xkcd.com/info.0.json' )); if ( ! empty ( $xkcd_response -> num )) { $this -> startBrowser ( 'http://xkcd.com/' . rand ( 1 , $xkcd_response -> num )); } } else { // This uses an API key with a limited number of searches per. $search_response = @ json_decode ( file_get_contents ( 'https://www.googleapis.com/customsearch/v1?key=' . $options [ 'google-custom-search-api-key' ] . '&cx=012652707207066138651:zudjtuwe28q&q=' . $search )); if ( ! empty ( $search_response -> items )) { foreach ( $search_response -> items as $item ) { $this -> startBrowser ( $item -> link ); } } else { throw new \\Exception ( dt ( 'The search failed or produced no results.' )); } } } }","title":"XkcdCommands.php"},{"location":"examples/example.bashrc/","text":"# -*- mode: shell-script; mode: flyspell-prog; ispell-local-dictionary: \"american\" -*- # # Example bash aliases to improve your Drush experience with bash. # Use `drush init` to copy this file to your home directory, rename and # customize it to suit, and source it from your ~/.bashrc file. # # Creates aliases to common Drush commands that work in a global context: # # dr - drush # ddd - drush drupal-directory # ev - drush php-eval # sa - drush site-alias # sa - drush site-alias --local-only (show local site aliases) # st - drush core-status # use - drush site-set # # Aliases for Drush commands that work on the current drupal site: # # cr - drush cache-rebuild # en - drush pm-enable # pml - drush pm-list # unin - drush pm-uninstall # updb - drush updatedb # q - drush sql-query # # Provides several common shell commands to work better with Drush: # # ddd @dev - print the path to the root directory of @dev # cdd @dev - change the current working directory to @dev # lsd @dev - ls root folder of @dev # lsd %files - ls \"files\" directory of current site # lsd @dev:%devel - ls devel module directory in @dev # @dev st - drush @dev core-status # dssh @live - ssh to the remote server @live points at # gitd @live pull - run `git pull` on the drupal root of @live # # Drush site alias expansion is also done for the cpd command: # # cpd -R @site1:%files @site2:%files # # Note that the 'cpd' alias only works for local sites. Use # `drush rsync` or gitd` to move files between remote sites. # # Aliases are also possible for the following standard # commands. Uncomment their definitions below as desired. # # cd - cddl [*] # ls - lsd # cp - cpd # ssh - dssh # git - gitd # # These standard commands behave exactly the same as they always # do, unless a Drush site specification such as @dev or @live:%files # is used in one of the arguments. # Aliases for common Drush commands that work in a global context. alias dr = 'drush' alias ddd = 'drush drupal:directory' alias ev = 'drush php:eval' alias sa = 'drush site:alias' alias st = 'drush core:status' alias use = 'drush site:set' # Aliases for Drush commands that work on the current drupal site alias cr = 'drush cache:rebuild' alias en = 'drush pm:enable' alias pml = 'drush pm:list' alias unin = 'drush pm:uninstall' alias updb = 'drush updatedb' alias q = 'drush sql:query' # Overrides for standard shell commands. Uncomment to enable. Alias # cd='cdd' if you want to be able to use cd @remote to ssh to a # remote site. # alias cd='cddl' # alias ls='lsd' # alias cp='cpd' # alias ssh='dssh' # alias git='gitd' # We extend the cd command to allow convenient # shorthand notations, such as: # cd @site1 # cd %modules # cd %devel # cd @site2:%files # You must use 'cddl' instead of 'cd' if you are not using # the optional 'cd' alias from above. # This is the \"local-only\" version of the function; # see the cdd function, below, for an expanded implementation # that will ssh to the remote server when a remote site # specification is used. function cddl () { fastcddl \" $1 \" use @self } # Use this function instead of 'cddl' if you have a very large number # of alias files, and the 'cddl' function is getting too slow as a result. # This function does not automatically set your prompt to the site that # you 'cd' to, as 'cddl' does. function fastcddl () { s = \" $1 \" if [ -z \" $s \" ] then builtin cd elif [ \" ${ s : 0 : 1 } \" == \"@\" ] || [ \" ${ s : 0 : 1 } \" == \"%\" ] then d = \" $( drush drupal:directory $1 --local-only 2 >/dev/null ) \" if [ $? == 0 ] then echo \"cd $d \" ; builtin cd \" $d \" ; else t = \" $( drush site-alias $1 >/dev/null 2 >/dev/null ) \" if [ $? == 0 ] then echo \"Cannot cd to remote site $s \" else echo \"Cannot cd to $s \" fi fi else builtin cd \" $s \" ; fi } # Works just like the `cddl` shell alias above, with one additional # feature: `cdd @remote-site` works like `ssh @remote-site`, # whereas cd above will fail unless the site alias is local. If # you prefer this behavior, you can add `alias cd='cdd'` to your .bashrc function cdd () { s = \" $1 \" if [ -z \" $s \" ] then builtin cd elif [ \" ${ s : 0 : 1 } \" == \"@\" ] || [ \" ${ s : 0 : 1 } \" == \"%\" ] then d = \" $( drush drupal:directory $s 2 >/dev/null ) \" rh = \" $( drush sa ${ s %%:* } --fields = host --format = list ) \" if [ -z \" $rh \" ] then echo \"cd $d \" builtin cd \" $d \" else if [ -n \" $d \" ] then c = \"cd \\\" $d \\\" \\; bash\" drush -s ${ s %%:* } ssh --tty drush ${ s %%:* } ssh --tty else drush ssh ${ s %%:* } fi fi else builtin cd \" $s \" fi } # Allow `git @site gitcommand` as a shortcut for `cd @site; git gitcommand`. # Also works on remote sites, though. function gitd () { s = \" $1 \" if [ -n \" $s \" ] && [ ${ s : 0 : 1 } == \"@\" ] || [ ${ s : 0 : 1 } == \"%\" ] then d = \" $( drush drupal-directory $s 2 >/dev/null ) \" rh = \" $( drush sa ${ s %%:* } --fields = host --format = list ) \" if [ -n \" $rh \" ] then drush ${ s %%:* } ssh \"cd ' $d ' ; git ${ @: 2 } \" else echo cd \" $d \" \\; git \" ${ @: 2 } \" ( cd \" $d \" \"git\" \" ${ @: 2 } \" ) fi else \"git\" \" $@ \" fi } # Get a directory listing on @site or @site:%files, etc, for local or remote sites. function lsd () { p =() r = for a in \" $@ \" ; do if [ ${ a : 0 : 1 } == \"@\" ] || [ ${ a : 0 : 1 } == \"%\" ] then p [ ${# p [@] } ]= \" $( drush drupal:directory $a 2 >/dev/null ) \" if [ ${ a : 0 : 1 } == \"@\" ] then rh = \" $( drush sa ${ a %:* } --fields = host --format = list ) \" if [ -n \" $rh \" ] then r = ${ a %:* } fi fi elif [ -n \" $a \" ] then p [ ${# p [@] } ]= \" $a \" fi done if [ -n \" $r \" ] then drush $r ssh 'ls \"${p[@]}\"' else \"ls\" \" ${ p [@] } \" fi } # Copy files from or to @site or @site:%files, etc; local sites only. function cpd () { p =() for a in \" $@ \" ; do if [ ${ a : 0 : 1 } == \"@\" ] || [ ${ a : 0 : 1 } == \"%\" ] then p [ ${# p [@] } ]= \" $( drush drupal:directory $a --local-only 2 >/dev/null ) \" elif [ -n \" $a \" ] then p [ ${# p [@] } ]= \" $a \" fi done \"cp\" \" ${ p [@] } \" } # This alias allows `dssh @site` to work like `drush @site ssh`. # Ssh commands, such as `dssh @site ls /tmp`, are also supported. function dssh () { d = \" $1 \" if [ ${ d : 0 : 1 } == \"@\" ] then drush \" $d \" ssh \" ${ @: 2 } \" else \"ssh\" \" $@ \" fi }","title":".bashrc"},{"location":"examples/example.drush.yml/","text":"# # Examples of valid statements for a Drush runtime config (drush.yml) file. # # Use this file to cut down on typing out lengthy and repetitive command line # options in the Drush commands you use and to avoid mistakes. # # The Drush configuration system has been factored out and shared with # the world at https://github.com/consolidation/config. Feel free to use it # for your projects. Lots more usage information is there. # Directories and Discovery # # Rename this file to drush.yml and copy it to one of the places listed below # in order of precedence: # # 1. Drupal site folder (e.g. sites/{default|example.com}/drush.yml). # 2. Drupal /drush and sites/all/drush folders, or the /drush folder # in the directory above the Drupal root. # 3. In any location, as specified by the --config (-c) option. # 4. User's .drush folder (i.e. ~/.drush/drush.yml). # 5. System wide configuration folder (e.g. /etc/drush/drush.yml or C:\\ProgramData\\Drush\\drush.yml). # # If a configuration file is found in any of the above locations, it will be # loaded and merged with other configuration files in the search list. # # Version-specific configuration # # Drush started using yml files for configuration in version 9; earlier versions # of Drush will never attempt to load a drush.yml file. It is also possible # to limit the version of Drush that will load a configuration file by placing # the Drush major version number in the filename, e.g. drush10.yml. # Environment variables # # Your Drush config file may reference environment variables using a syntax like ${env.HOME}. # For example see the drush.paths examples below. # # An alternative way to populate Drush configuration is to define environment variables that # correspond to config keys. For example, to populate the options.uri config item, # create an environment variable `DRUSH_OPTIONS_URI=http://example.com`. # As you can see, variable names should be uppercased, prefixed with `DRUSH_`, and periods # replaced with dashes. drush : paths : # Specify config files to load. config : # Load any personal config files. Is silently skipped if not found. Filename must be drush.yml - ${env.HOME}/.drush/config/drush.yml # Specify folders to search for Drush command files. These locations # are always merged with include paths defined on the command line or # in other configuration files. On the command line, paths may be separated # by a colon (:) on Unix-based systems or a semi-colon (;) on Windows, # or multiple --include options may be provided. Drush 8 and earlier did # a deep search in ~/.drush and /usr/share/drush/commands when loading # command files. # # For testing, specify the namespace component in the key. e.g.: # # drush: # include: # 'Commands/example_drush_extension': '${env.PWD}' include : - '${env.HOME}/.drush/commands' - /usr/share/drush/commands # Specify the folders to search for Drush alias files (*.site.yml). These # locations are always merged with alias paths defined on the command line # or in other configuration files. On the command line, paths may be # separated by a colon (:) on Unix-based systems or a semi-colon (;) on # Windows, or multiple --alias-path options may be provided. Note that # Drush 8 and earlier did a deep search in ~/.drush and /etc/drush when # loading alias files. alias-path : - '${env.HOME}/.drush/sites' - /etc/drush/sites # Specify a folder where Drush should store its file based caches. If unspecified, defaults to $HOME/.drush. #cache-directory: /tmp/.drush # Specify a folder where Drush should store backup files, including # temporary sql dump files created during sql:sync. If unspecified, # defaults to $HOME/drush-backups # backup-dir: /tmp/drush-backups # This section is for setting global options. options : # Specify the base_url that should be used when generating links. # Not recommended if you have more than one Drupal site on your system. # uri: 'http://example.com/subdir' # Specify your Drupal core base directory (useful if you use symlinks). # Not recommended if you have more than one Drupal root on your system. # root: '/home/USER/workspace/drupal-6' # Enable verbose mode. # verbose: true # This section is for setting command-specific options. command : sql : dump : options : # Uncomment to omit cache and similar tables (including during a sql:sync). # structure-tables-key: common php : script : options : # Additional folders to search for scripts. # script-path: 'sites/all/scripts:profiles/myprofile/scripts' core : rsync : options : # Ensure all rsync commands use verbose output. # verbose: true site : install : options : # Set a predetermined username and password when using site-install. # account-name: 'alice' # account-pass: 'secret' # # The sections below are configuration thats consulted by various commands, outside # of the option system. # sql : # An explicit list of tables which should be included in sql-dump and sql-sync. tables : common : - user - permissions - role_permissions - role # List of tables whose *data* is skipped by the 'sql-dump' and 'sql-sync' # commands when the \"--structure-tables-key=common\" option is provided. # You may add specific tables to the existing array or add a new element. structure-tables : common : - cache - 'cache_*' - history - 'search_*' - 'sessions' - 'watchdog' # List of tables to be omitted entirely from SQL dumps made by the 'sql-dump' # and 'sql-sync' commands when the \"--skip-tables-key=common\" option is # provided on the command line. This is useful if your database contains # non-Drupal tables used by some other application or during a migration for # example. You may add new tables to the existing array or add a new element. skip-tables : common : - 'migration_*' ssh : # Specify options to pass to ssh in backend invoke. The default is to prohibit # password authentication, and is included here, so you may add additional # parameters without losing the default configuration. options : '-o PasswordAuthentication=no' # This string is valid for Bash shell. Override in case you need something different. See https://github.com/drush-ops/drush/issues/3816. pipefail : 'set -o pipefail; ' notify : # Notify when command takes more than 30 seconds. # duration: 30 # Specify a command to run. Defaults to Notification Center (OSX) or libnotify (Linux) # cmd: /path/to/program # See src/Commands/core/NotifyCommands.php for more configuration settings. xh : # Start profiling via xhprof/tideways and show a link to the run report. # link: http://xhprof.local # See src/Commands/core/XhprofCommands.php for more configuration settings.","title":"drush.yml"},{"location":"examples/example.prompt.sh/","text":"# -*- mode: shell-script; mode: flyspell-prog; ispell-local-dictionary: \"american\" -*- # # Example PS1 prompt. # # Note: This file does a lot, and is designed for Bash. If you want to show the # currently set alias in your prompt, use the first 2 values below as an example. # This example can be used directly for the POWERLEVEL9K theme for Oh My Zsh. #FILE=\"${TMPDIR:-/tmp/}/drush-env-${USER}/drush-drupal-site-$$\" #POWERLEVEL9K_CUSTOM_DRUSH=\"[ -r $FILE ] && cat $FILE\" #POWERLEVEL9K_CUSTOM_DRUSH_BACKGROUND=\"green\" #POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir vcs custom_drush) # # Use `drush init` to copy this to ~/.drush/drush.prompt.sh, and source it in # ~/.bashrc or ~/.bash_profile. # # Note that your Bash session must already have the __git_ps1 function available. # Typically this is provided by git-prompt.sh, see instructions for downloading # and including this file here: # https://github.com/git/git/blob/10.x/contrib/completion/git-prompt.sh # # Features: # # Displays Git repository and Drush alias status in your prompt. __drush_ps1 () { f = \" ${ TMPDIR :- /tmp/ } /drush-env- ${ USER } /drush-drupal-site- $$ \" if [ -f $f ] then __DRUPAL_SITE = $( cat \" $f \" ) else __DRUPAL_SITE = \" $DRUPAL_SITE \" fi # Set DRUSH_PS1_SHOWCOLORHINTS to a non-empty value and define a # __drush_ps1_colorize_alias() function for color hints in your Drush PS1 # prompt. See example.prompt.sh for an example implementation. if [ -n \" ${ __DRUPAL_SITE - } \" ] && [ -n \" ${ DRUSH_PS1_SHOWCOLORHINTS - } \" ] ; then __drush_ps1_colorize_alias fi [[ -n \" $__DRUPAL_SITE \" ]] && printf \" ${ 1 :- (%s) } \" \" $__DRUPAL_SITE \" } if [ -n \" $( type -t __git_ps1 ) \" ] && [ \" $( type -t __git_ps1 ) \" = function ] && [ \" $( type -t __drush_ps1 ) \" ] && [ \" $( type -t __drush_ps1 ) \" = function ] ; then # This line enables color hints in your Drush prompt. Modify the below # __drush_ps1_colorize_alias() to customize your color theme. DRUSH_PS1_SHOWCOLORHINTS = true # Git offers various prompt customization options as well as seen in # https://github.com/git/git/blob/10.x/contrib/completion/git-prompt.sh. # Adjust the following lines to enable the corresponding features: # GIT_PS1_SHOWDIRTYSTATE = true GIT_PS1_SHOWUPSTREAM = auto # GIT_PS1_SHOWSTASHSTATE=true # GIT_PS1_SHOWUNTRACKEDFILES=true GIT_PS1_SHOWCOLORHINTS = true # The following line sets your bash prompt according to this example: # # username@hostname ~/working-directory (git-branch)[@drush-alias] $ # # See http://ss64.com/bash/syntax-prompt.html for customization options. export PROMPT_COMMAND = '__git_ps1 \"\\u@\\h \\w\" \"$(__drush_ps1 \"[%s]\") \\\\\\$ \"' # PROMPT_COMMAND is used in the example above rather than PS1 because neither # Git nor Drush color hints are compatible with PS1. If you don't want color # hints, however, and prefer to use PS1, you can still do so by commenting out # the PROMPT_COMMAND line above and uncommenting the PS1 line below: # # export PS1='\\u@\\h \\w$(__git_ps1 \" (%s)\")$(__drush_ps1 \"[%s]\")\\$ ' __drush_ps1_colorize_alias () { if [[ -n ${ ZSH_VERSION - } ]] ; then local COLOR_BLUE = '%F{blue}' local COLOR_CYAN = '%F{cyan}' local COLOR_GREEN = '%F{green}' local COLOR_MAGENTA = '%F{magenta}' local COLOR_RED = '%F{red}' local COLOR_WHITE = '%F{white}' local COLOR_YELLOW = '%F{yellow}' local COLOR_NONE = '%f' else # Using \\[ and \\] around colors is necessary to prevent issues with # command line editing/browsing/completion. local COLOR_BLUE = '\\[\\e[94m\\]' local COLOR_CYAN = '\\[\\e[36m\\]' local COLOR_GREEN = '\\[\\e[32m\\]' local COLOR_MAGENTA = '\\[\\e[35m\\]' local COLOR_RED = '\\[\\e[91m\\]' local COLOR_WHITE = '\\[\\e[37m\\]' local COLOR_YELLOW = '\\[\\e[93m\\]' local COLOR_NONE = '\\[\\e[0m\\]' fi # Customize your color theme below. case \" $__DRUPAL_SITE \" in *.live | *.prod ) local ENV_COLOR = \" $COLOR_RED \" ;; *.stage | *.test ) local ENV_COLOR = \" $COLOR_YELLOW \" ;; *.local ) local ENV_COLOR = \" $COLOR_GREEN \" ;; * ) local ENV_COLOR = \" $COLOR_BLUE \" ;; esac __DRUPAL_SITE = \" ${ ENV_COLOR }${ __DRUPAL_SITE }${ COLOR_NONE } \" } fi","title":"prompt.sh"},{"location":"examples/example.site.yml/","text":"# # Example of valid statements for an alias file. # Basic Alias File Usage # # In its most basic form, the Drush site alias feature provides a way # for teams to share short names that refer to the live and staging sites # (usually remote) for a given Drupal site. # # 1. Make a local working clone of your Drupal site and then # `cd` to the project work to select it. # 2. Add an alias file called $PROJECT/drush/sites/self.site.yml, # where $PROJECT is the project root (location of composer.json file). # 3. Run remote commands against the shared live or stage sites # # Following these steps, a cache:rebuild on the live environment would be: # # $ drush @live cache:rebuild # # The site alias file should be named `self.site.yml` because this name is # special, and is used to define the different environments (usually remote) # of the current Drupal site. # # The contents of the alias file should look something like the example below: # # @code # # File: self.site.yml # live: # host: server.domain.com # user: www-admin # root: /other/path/to/live/drupal # uri: http://example.com # stage: # host: server.domain.com # user: www-admin # root: /other/path/to/stage/drupal # uri: http://stage.example.com # @endcode # # The top-level element names (`live` and `stage` in the example above) are # used to identify the different environments available for this site. These # may be used on the command line to select a different target environment # to operate on by prepending an `@` character, e.g. `@live` or `@stage`. # # All of the available aliases for a site's environments may be listed via: # # $ drush site:alias @self # # The elements of a site alias environment are: # # - 'host': The fully-qualified domain name of the remote system # hosting the Drupal instance. **Important Note: The remote-host option # must be omitted for local sites, as this option controls various # operations, such as whether or not rsync parameters are for local or # remote machines, and so on. # - 'user': The username to log in as when using ssh or rsync. If each user # has to use own username, you can create an environment variable which holds # the value, and reference via ${env.PROJECT_SSH_USER} (for example). Or you may # omit the `user:` item and specify a user in the `~/.ssh/config` file. # - 'root': The Drupal root; must not be specified as a relative path. # - 'uri': The value of --uri should always be the same as # when the site is being accessed from a web browser (e.g. http://example.com) # # Drush uses ssh to run commands on remote systems; all team members should # install ssh keys on the target servers (e.g. via ssh-add). # Advanced Site Alias File Usage # # It is also possible to create site alias files that reference other # sites on the same local system. Site alias files for other local sites # are usually stored in the directory `~/.drush/sites`; however, Drush does # not search this location for alias files by default. To use this location, # you must add the path in your Drush configuration file. For example, # to re-add both of the default user alias path from Drush 8, put the following # in your ~/.drush/drush.yml configuration file: # # @code # drush: # paths: # alias-path: # - '${env.HOME}/.drush/sites' # - /etc/drush/sites # @endcode # # The command `drush core:init` will automatically configure your # ~/.drush/drush.yml configuration file to add `~/.drush/sites` and # `/etc/drush/sites` as locations where alias files may be placed. # # A canonical alias named \"example\" that points to a local # Drupal site named \"http://example.com\" looks like this: # # @code # File: example.site.yml # dev: # root: /path/to/drupal # uri: http://example.com # @endcode # # Note that the first part of the filename (in this case \"example\") # defines the name of the site alias, and the top-level key (\"dev\") # defines the name of the environment. # # With these definitions in place, it is possible to run commands targeting # the dev environment of the target site via: # # $ drush @example.dev status # # This command is equivalent to the longer form: # # $ drush --root=/path/to/drupal --uri=http://example.com status # # See \"Additional Site Alias Options\" below for more information. # Converting Legacy Alias Files # # To convert legacy alias (*.aliases.drushrc.php) to yml, run the # site:alias-convert command. # Altering aliases: # # See examples/Commands/SiteAliasAlterCommands.php for an example. # Environment variables: # # Site aliases may reference environment variables, just like any Drush config # file. For example, ${env.PROJECT_SSH_USER} will be replaced by the value # of the PROJECT_SSH_USER environment value. # # SSH site aliases may set environment variables via the 'env-vars' key. # See below. # Additional Site Alias Options # # Aliases are commonly used to define short names for # local or remote Drupal installations; however, an alias # is really nothing more than a collection of options. # # - 'docker': When specified, Drush executes via docker-compose exec rather than ssh # - 'service': the name of the container to run on. # - 'exec': # - 'options': Options for the exec subcommand. # - 'os': The operating system of the remote server. Valid values # are 'Windows' and 'Linux'. Be sure to set this value for all remote # aliases because the default value is PHP_OS if 'remote-host' # is not set, and 'Linux' (or $options['remote-os']) if it is. Therefore, # if you set a 'remote-host' value, and your remote OS is Windows, if you # do not set the 'OS' value, it will default to 'Linux' and could cause # unintended consequences, particularly when running 'drush sql-sync'. # - 'ssh': Contains settings used to control how ssh commands are generated # when running remote commands. # - 'options': Contains additional commandline options for the ssh command # itself, e.g. \"-p 100\" # - 'tty': Usually, Drush will decide whether or not to create a tty (via # the ssh '--t' option) based on whether the local Drush command is running # interactively or not. To force Drush to always or never create a tty, # set the 'ssh.tty' option to 'true' or 'false', respectively. # - 'paths': An array of aliases for common rsync targets. # Relative aliases are always taken from the Drupal root. # - 'files': Path to 'files' directory. This will be looked up if not # specified. # - 'drush-script': Path to the remote Drush command. # - 'command': These options will only be set if the alias # is used with the specified command. In the example below, the option # `--no-dump` will be selected whenever the @stage alias # is used in any of the following ways: # - `drush @stage sql-sync @self @live` # - `drush sql-sync @stage @live` # - `drush sql-sync @live @stage` # NOTE: Setting boolean options broke with Symfony 3. This will be fixed # in a future release. See: https://github.com/drush-ops/drush/issues/2956 # - 'env-vars': An array of key / value pairs that will be set as environment # variables. # # Complex example: # # @code # # File: remote.site.yml # live: # host: server.domain.com # user: www-admin # root: /other/path/to/drupal # uri: http://example.com # ssh: # options: '-p 100' # paths: # drush-script: '/path/to/drush' # env-vars: # PATH: /bin:/usr/bin:/home/www-admin/.composer/vendor/bin # DRUPAL_ENV: live # command: # site: # install: # options: # admin-password: 'secret-secret' # @endcode # Site Alias Files for Service Providers # # There are a number of service providers that manage Drupal sites as a # service. Drush allows service providers to create collections of site alias # files to reference all of the sites available to a single user. In order # to do this, a new location must be defined in your Drush configuration # file: # # @code # drush: # paths: # alias-path: # - '${env.HOME}/.drush/sites/provider-name' # @endcode # # Site aliases stored in this directory may then be referenced by its # full alias name, including its location, e.g.: # # $ drush @provider-name.example.dev # # Such alias files may still be referenced by their shorter name, e.g. # `@example.dev`. Note that it is necessary to individually list every # location where site alias files may be stored; Drush never does recursive # (deep) directory searches for alias files. # # The `site:alias` command may also be used to list all of the sites and # environments in a given location, e.g.: # # $ drush site:alias @provider-name # # Add the option `--format=list` to show only the names of each site and # environment without also showing the values in each alias record. # Wildcard Aliases for Service Providers # # Some service providers that manage Drupal sites allow customers to create # multiple \"environments\" for a site. It is common for these providers to # also have a feature to automatically create Drush aliases for all of a # user's sites. Rather than write one record for every environment in that # site, it is also possible to write a single \"wildcard\" alias that represents # all possible environments. This is possible if the contents of each # environment alias are identical save for the name of the environment in # one or more values. The variable `${env-name}` will be substituted with the # environment name wherever it appears. # # Example wildcard record: # # @code # # File: remote-example.site.yml # '*': # host: ${env-name}.server.domain.com # user: www-admin # root: /path/to/${env-name} # uri: http://${env-name}.remote-example.com # @endcode # # With a wildcard record, any environment name may be used, and will always # match. This is not desirable in instances where the specified environment # does not exist (e.g. if the user made a typo). An alias alter hook in a # policy file may be used to catch these mistakes and report an error. # @see SiteAliasAlterCommands for an example on how to do this. # Developer Information # # See https://github.com/consolidation/site-alias for more developer # information about Site Aliases. # # An example appears below. Edit to suit and remove the @code / @endcode and # leading hashes to enable. # # @code # # File: mysite.site.yml # local: # This environment is an example of the DockerCompose transport. # docker: # service: drupal # exec: # options: --user USER # stage: # uri: http://stage.example.com # root: /path/to/remote/drupal/root # host: mystagingserver.myisp.com # user: publisher # os: Linux # paths: # - files: sites/mydrupalsite.com/files # - custom: /my/custom/path # command: # sql: # sync: # options: # no-dump: true # dev: # root: /path/to/docroot # uri: https://dev.example.com # @endcode # Example of rsync with exclude-paths # # Note that most options typically passed to rsync via `drush rsync` are # \"passthrough options\", which is to say they appear after the `--` separator # on the command line. Passthrough options are actually arguments, and # it is not possible to set default arguments in an alias record. The # `drush rsync` command does support two options, `--mode` and `--exclude-paths`, # which are interpreted directly by Drush. Default values for these options # may be specified in an alias record, as shown below. # # @code # dev: # root: /path/to/docroot # uri: https://dev.example.com # command: # core: # rsync: # options: # mode: rlptz # exclude-paths: 'css:imagecache:ctools:js:tmp:php:styles' # @endcode","title":"site.yml"},{"location":"examples/git-bisect.example.sh/","text":"#!/usr/bin/env sh # # Git bisect is a helpful way to discover which commit an error # occurred in. This example file gives simple instructions for # using git bisect with Drush to quickly find erroneous commits # in Drush commands or Drupal modules, presuming that you can # trigger the error condition via Drush (e.g. using `drush php-eval`). # # Follow these simple steps: # # $ git bisect start # $ git bisect bad # Tell git that the current commit does not work # $ git bisect good bcadd5a # Tell drush that the commithash 12345 worked fine # $ git bisect run mytestscript.sh # # 'git bisect run' will continue to call 'git bisect good' and 'git bisect bad', # based on whether the script's exit code was 0 or 1, respectively. # # Replace 'mytestscript.sh' in the example above with a custom script that you # write yourself. Use the example script at the end of this document as a # guide. Replace the example command with one that calls the Drush command # that you would like to test, and replace the 'grep' string with a value # that appears when the error exists in the commit, but does not appear when # commit is okay. # # If you are using Drush to test Drupal or an external Drush module, use: # # $ git bisect run drush mycommand --strict=2 # # This presumes that there is one or more '[warning]' or '[error]' # messages emitted when there is a problem, and no warnings or errors # when the commit is okay. Omit '--strict=2' to ignore warnings, and # signal failure only when 'error' messages are emitted. # # If you need to test for an error condition explicitly, to find errors # that do not return any warning or error log messages on their own, you # can use the Drush php-eval command to force an error when `myfunction()` # returns FALSE. Replace 'myfunction()' with the name of an appropriate # function in your module that can be used to detect the error condition # you are looking for. # # $ git bisect run drush ev 'if(!myfunction()) { return drush_set_error(\"ERR\"); }' # drush mycommand --myoption 2 > & 1 | grep -q 'string that indicates there was a problem' if [ $? == 0 ] ; then exit 1 else exit 0 fi","title":"git-bisect.sh"},{"location":"examples/helloworld.script/","text":"<? php // // This example demonstrates how to write a drush // script. These scripts are run with the php-script command. // use Drush\\Drush ; $this -> output () -> writeln ( \"Hello world!\" ); $this -> output () -> writeln ( \"The extra options/arguments to this command were:\" ); $this -> output () -> writeln ( print_r ( $extra , true )); // // We can check which site was bootstrapped via // the '@self' alias, which is defined only if // there is a bootstrapped site. // $self = Drush :: aliasManager () -> getSelf ();; if ( ! $self -> hasRoot ()) { $this -> output () -> writeln ( 'No bootstrapped site.' ); } else { $this -> output () -> writeln ( 'The following site is bootstrapped:' ); $this -> output () -> writeln ( print_r ( $self -> legacyRecord (), true )); }","title":"Helloworld.script"}]}